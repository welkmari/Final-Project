import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React$1 from 'react';
import React__default from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';
import * as AvatarPrimitive from '@radix-ui/react-avatar';
import * as class_variance_authority_dist_types from 'class-variance-authority/dist/types';
import { VariantProps } from 'class-variance-authority';
import { DayPicker } from 'react-day-picker';
import useEmblaCarousel, { UseEmblaCarouselType } from 'embla-carousel-react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { DialogProps } from '@radix-ui/react-dialog';
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';
import { Drawer } from 'vaul';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import * as HoverCardPrimitive from '@radix-ui/react-hover-card';
import { OTPInput } from 'input-otp';
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';
import * as PopoverPrimitive from '@radix-ui/react-popover';
import * as ProgressPrimitive from '@radix-ui/react-progress';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';
import * as SelectPrimitive from '@radix-ui/react-select';
import * as SeparatorPrimitive from '@radix-ui/react-separator';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';
import * as SliderPrimitive from '@radix-ui/react-slider';
import { Toaster as Toaster$1 } from 'sonner';
import * as SwitchPrimitives from '@radix-ui/react-switch';
import * as TabsPrimitive from '@radix-ui/react-tabs';

declare const AlertDialogBase: React$1.FC<AlertDialogPrimitive.AlertDialogProps>;
declare const AlertDialogTriggerBase: React$1.ForwardRefExoticComponent<AlertDialogPrimitive.AlertDialogTriggerProps & React$1.RefAttributes<HTMLButtonElement>>;
declare const AlertDialogPortalBase: React$1.FC<AlertDialogPrimitive.AlertDialogPortalProps>;
declare const AlertDialogOverlayBase: React$1.ForwardRefExoticComponent<Omit<AlertDialogPrimitive.AlertDialogOverlayProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const AlertDialogContentBase: React$1.ForwardRefExoticComponent<Omit<AlertDialogPrimitive.AlertDialogContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const AlertDialogHeaderBase: {
    ({ className, ...props }: React$1.HTMLAttributes<HTMLDivElement>): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const AlertDialogFooterBase: {
    ({ className, ...props }: React$1.HTMLAttributes<HTMLDivElement>): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const AlertDialogTitleBase: React$1.ForwardRefExoticComponent<Omit<AlertDialogPrimitive.AlertDialogTitleProps & React$1.RefAttributes<HTMLHeadingElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLHeadingElement>>;
declare const AlertDialogDescriptionBase: React$1.ForwardRefExoticComponent<Omit<AlertDialogPrimitive.AlertDialogDescriptionProps & React$1.RefAttributes<HTMLParagraphElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLParagraphElement>>;
declare const AlertDialogActionBase: React$1.ForwardRefExoticComponent<Omit<AlertDialogPrimitive.AlertDialogActionProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLButtonElement>>;
declare const AlertDialogCancelBase: React$1.ForwardRefExoticComponent<Omit<AlertDialogPrimitive.AlertDialogCancelProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLButtonElement>>;

declare const AvatarBase: React$1.ForwardRefExoticComponent<Omit<AvatarPrimitive.AvatarProps & React$1.RefAttributes<HTMLSpanElement>, "ref"> & React$1.RefAttributes<HTMLSpanElement>>;
declare const AvatarImageBase: React$1.ForwardRefExoticComponent<Omit<AvatarPrimitive.AvatarImageProps & React$1.RefAttributes<HTMLImageElement>, "ref"> & React$1.RefAttributes<HTMLImageElement>>;
declare const AvatarFallbackBase: React$1.ForwardRefExoticComponent<Omit<AvatarPrimitive.AvatarFallbackProps & React$1.RefAttributes<HTMLSpanElement>, "ref"> & React$1.RefAttributes<HTMLSpanElement>>;

declare const badgeVariants: (props?: ({
    variant?: "default" | "destructive" | "outline" | "secondary" | null | undefined;
    status?: "destructive" | "success" | "desactivated" | "away" | "custom" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
type StatusType = "success" | "desactivated" | "destructive" | "away" | "custom";
interface BadgeBaseProps extends React$1.ComponentProps<"span">, VariantProps<typeof badgeVariants> {
    asChild?: boolean;
    status?: StatusType;
    statusColor?: string;
}
declare function BadgeBase({ className, variant, status, statusColor, asChild, children, style, ...props }: BadgeBaseProps): react_jsx_runtime.JSX.Element;

declare function BreadcrumbBase({ ...props }: React$1.ComponentProps<"nav">): react_jsx_runtime.JSX.Element;
declare function BreadcrumbListBase({ className, ...props }: React$1.ComponentProps<"ol">): react_jsx_runtime.JSX.Element;
declare function BreadcrumbItemBase({ className, ...props }: React$1.ComponentProps<"li">): react_jsx_runtime.JSX.Element;
declare function BreadcrumbLinkBase({ asChild, className, ...props }: React$1.ComponentProps<"a"> & {
    asChild?: boolean;
}): react_jsx_runtime.JSX.Element;
declare function BreadcrumbPageBase({ className, ...props }: React$1.ComponentProps<"span">): react_jsx_runtime.JSX.Element;
declare function BreadcrumbSeparatorBase({ children, className, ...props }: React$1.ComponentProps<"li">): react_jsx_runtime.JSX.Element;
declare function BreadcrumbEllipsisBase({ className, ...props }: React$1.ComponentProps<"span">): react_jsx_runtime.JSX.Element;

declare const buttonVariantsBase: (props?: ({
    variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link" | null | undefined;
    size?: "default" | "sm" | "lg" | "icon" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
interface ButtonProps extends React$1.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariantsBase> {
    asChild?: boolean;
    testid?: string;
}
declare const ButtonBase: React$1.ForwardRefExoticComponent<ButtonProps & React$1.RefAttributes<HTMLButtonElement>>;
interface ButtonGroupProps extends React$1.HTMLAttributes<HTMLDivElement> {
    children: React$1.ReactNode;
    orientation?: "horizontal" | "vertical";
}
declare const ButtonGroupBase: React$1.ForwardRefExoticComponent<ButtonGroupProps & React$1.RefAttributes<HTMLDivElement>>;

type CalendarProps = React$1.ComponentProps<typeof DayPicker>;
declare function CalendarBase({ className, classNames, showOutsideDays, ...props }: CalendarProps): react_jsx_runtime.JSX.Element;
declare namespace CalendarBase {
    var displayName: string;
}

declare const CardBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CardHeaderBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CardTitleBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CardDescriptionBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CardContentBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CardFooterBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];
type CarouselProps = {
    opts?: CarouselOptions;
    plugins?: CarouselPlugin;
    orientation?: "horizontal" | "vertical";
    setApi?: (api: CarouselApi) => void;
};
declare function CarouselBase({ orientation, opts, setApi, plugins, className, children, ...props }: React$1.ComponentProps<"div"> & CarouselProps): react_jsx_runtime.JSX.Element;
declare function CarouselContentBase({ className, ...props }: React$1.ComponentProps<"div">): react_jsx_runtime.JSX.Element;
declare function CarouselItemBase({ className, ...props }: React$1.ComponentProps<"div">): react_jsx_runtime.JSX.Element;
declare function CarouselPrevious({ className, variant, size, ...props }: React$1.ComponentProps<typeof ButtonBase>): react_jsx_runtime.JSX.Element;
declare function CarouselNextBase({ className, variant, size, ...props }: React$1.ComponentProps<typeof ButtonBase>): react_jsx_runtime.JSX.Element;

declare const CheckboxBase: React$1.ForwardRefExoticComponent<Omit<CheckboxPrimitive.CheckboxProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLButtonElement>>;

declare const CollapsibleBase: React$1.ForwardRefExoticComponent<Omit<CollapsiblePrimitive.CollapsibleProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const CollapsibleTriggerBase: React$1.ForwardRefExoticComponent<Omit<CollapsiblePrimitive.CollapsibleTriggerProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & {
    leftIcon?: React$1.ReactNode;
    showCaret?: boolean;
} & React$1.RefAttributes<HTMLButtonElement>>;
declare const CollapsibleContentBase: React$1.ForwardRefExoticComponent<Omit<CollapsiblePrimitive.CollapsibleContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;

declare const CommandBase: React$1.ForwardRefExoticComponent<Omit<{
    children?: React$1.ReactNode;
} & Pick<Pick<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    ref?: React$1.Ref<HTMLDivElement>;
} & {
    asChild?: boolean;
}, "asChild" | "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    label?: string;
    shouldFilter?: boolean;
    filter?: (value: string, search: string, keywords?: string[]) => number;
    defaultValue?: string;
    value?: string;
    onValueChange?: (value: string) => void;
    loop?: boolean;
    disablePointerSelection?: boolean;
    vimBindings?: boolean;
} & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CommandDialogBase: ({ children, open, ...props }: DialogProps) => react_jsx_runtime.JSX.Element;
declare const CommandInputBase: React$1.ForwardRefExoticComponent<Omit<Omit<Pick<Pick<React$1.DetailedHTMLProps<React$1.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof React$1.InputHTMLAttributes<HTMLInputElement>> & {
    ref?: React$1.Ref<HTMLInputElement>;
} & {
    asChild?: boolean;
}, "asChild" | "key" | keyof React$1.InputHTMLAttributes<HTMLInputElement>>, "type" | "value" | "onChange"> & {
    value?: string;
    onValueChange?: (search: string) => void;
} & React$1.RefAttributes<HTMLInputElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLInputElement>>;
declare const CommandListBase: React$1.ForwardRefExoticComponent<Omit<{
    children?: React$1.ReactNode;
} & Pick<Pick<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    ref?: React$1.Ref<HTMLDivElement>;
} & {
    asChild?: boolean;
}, "asChild" | "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    label?: string;
} & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CommandEmptyBase: React$1.ForwardRefExoticComponent<Omit<{
    children?: React$1.ReactNode;
} & Pick<Pick<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    ref?: React$1.Ref<HTMLDivElement>;
} & {
    asChild?: boolean;
}, "asChild" | "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CommandGroupBase: React$1.ForwardRefExoticComponent<Omit<{
    children?: React$1.ReactNode;
} & Omit<Pick<Pick<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    ref?: React$1.Ref<HTMLDivElement>;
} & {
    asChild?: boolean;
}, "asChild" | "key" | keyof React$1.HTMLAttributes<HTMLDivElement>>, "value" | "heading"> & {
    heading?: React$1.ReactNode;
    value?: string;
    forceMount?: boolean;
} & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CommandSeparatorBase: React$1.ForwardRefExoticComponent<Omit<Pick<Pick<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    ref?: React$1.Ref<HTMLDivElement>;
} & {
    asChild?: boolean;
}, "asChild" | "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    alwaysRender?: boolean;
} & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CommandItemBase: React$1.ForwardRefExoticComponent<Omit<{
    children?: React$1.ReactNode;
} & Omit<Pick<Pick<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React$1.HTMLAttributes<HTMLDivElement>> & {
    ref?: React$1.Ref<HTMLDivElement>;
} & {
    asChild?: boolean;
}, "asChild" | "key" | keyof React$1.HTMLAttributes<HTMLDivElement>>, "disabled" | "value" | "onSelect"> & {
    disabled?: boolean;
    onSelect?: (value: string) => void;
    value?: string;
    keywords?: string[];
    forceMount?: boolean;
} & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const CommandShortcutBase: {
    ({ className, ...props }: React$1.HTMLAttributes<HTMLSpanElement>): react_jsx_runtime.JSX.Element;
    displayName: string;
};

declare function ContextMenuBase(props: React$1.ComponentProps<typeof ContextMenuPrimitive.Root>): react_jsx_runtime.JSX.Element;
declare function ContextMenuTriggerBase(props: React$1.ComponentProps<typeof ContextMenuPrimitive.Trigger>): react_jsx_runtime.JSX.Element;
declare function ContextMenuGroupBase(props: React$1.ComponentProps<typeof ContextMenuPrimitive.Group>): react_jsx_runtime.JSX.Element;
declare function ContextMenuPortalBase(props: React$1.ComponentProps<typeof ContextMenuPrimitive.Portal>): react_jsx_runtime.JSX.Element;
declare function ContextMenuSubBase(props: React$1.ComponentProps<typeof ContextMenuPrimitive.Sub>): react_jsx_runtime.JSX.Element;
declare function ContextMenuRadioGroupBase(props: React$1.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>): react_jsx_runtime.JSX.Element;
declare function ContextMenuSubTriggerBase({ className, inset, children, ...props }: React$1.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
}): react_jsx_runtime.JSX.Element;
declare function ContextMenuSubContentBase({ className, ...props }: React$1.ComponentProps<typeof ContextMenuPrimitive.SubContent>): react_jsx_runtime.JSX.Element;
declare function ContextMenuContentBase({ className, ...props }: React$1.ComponentProps<typeof ContextMenuPrimitive.Content>): react_jsx_runtime.JSX.Element;
declare function ContextMenuItemBase({ className, inset, variant, ...props }: React$1.ComponentProps<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
    variant?: "default" | "destructive";
}): react_jsx_runtime.JSX.Element;
declare function ContextMenuCheckboxItemBase({ className, children, checked, ...props }: React$1.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>): react_jsx_runtime.JSX.Element;
declare function ContextMenuRadioItemBase({ className, children, ...props }: React$1.ComponentProps<typeof ContextMenuPrimitive.RadioItem>): react_jsx_runtime.JSX.Element;
declare function ContextMenuLabelBase({ className, inset, ...props }: React$1.ComponentProps<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
}): react_jsx_runtime.JSX.Element;
declare function ContextMenuSeparatorBase({ className, ...props }: React$1.ComponentProps<typeof ContextMenuPrimitive.Separator>): react_jsx_runtime.JSX.Element;
declare function ContextMenuShortcutBase({ className, ...props }: React$1.ComponentProps<"span">): react_jsx_runtime.JSX.Element;

type TestIdProps$1 = {
    testid?: string;
};
declare const DialogBase: React$1.FC<DialogPrimitive.DialogProps>;
declare const DialogTriggerBase: React$1.ForwardRefExoticComponent<DialogPrimitive.DialogTriggerProps & React$1.RefAttributes<HTMLButtonElement>>;
declare const DialogPortalBase: React$1.FC<DialogPrimitive.DialogPortalProps>;
declare const DialogCloseBase: React$1.ForwardRefExoticComponent<DialogPrimitive.DialogCloseProps & React$1.RefAttributes<HTMLButtonElement>>;
declare const DialogOverlayBase: React$1.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogOverlayProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & TestIdProps$1 & React$1.RefAttributes<HTMLDivElement>>;
declare const DialogContentBase: React$1.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & TestIdProps$1 & React$1.RefAttributes<HTMLDivElement>>;
declare const DialogHeaderBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & TestIdProps$1 & React$1.RefAttributes<HTMLDivElement>>;
declare const DialogFooterBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLDivElement> & TestIdProps$1 & React$1.RefAttributes<HTMLDivElement>>;
declare const DialogTitleBase: React$1.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogTitleProps & React$1.RefAttributes<HTMLHeadingElement>, "ref"> & TestIdProps$1 & React$1.RefAttributes<HTMLHeadingElement>>;
declare const DialogDescriptionBase: React$1.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogDescriptionProps & React$1.RefAttributes<HTMLParagraphElement>, "ref"> & TestIdProps$1 & React$1.RefAttributes<HTMLParagraphElement>>;

declare function DrawerBase({ ...props }: React$1.ComponentProps<typeof Drawer.Root>): react_jsx_runtime.JSX.Element;
declare function DrawerTriggerBase({ ...props }: React$1.ComponentProps<typeof Drawer.Trigger>): react_jsx_runtime.JSX.Element;
declare function DrawerPortalBase({ ...props }: React$1.ComponentProps<typeof Drawer.Portal>): react_jsx_runtime.JSX.Element;
declare function DrawerCloseBase({ ...props }: React$1.ComponentProps<typeof Drawer.Close>): react_jsx_runtime.JSX.Element;
declare function DrawerOverlayBase({ className, ...props }: React$1.ComponentProps<typeof Drawer.Overlay>): react_jsx_runtime.JSX.Element;
declare function DrawerContentBase({ className, children, ...props }: React$1.ComponentProps<typeof Drawer.Content>): react_jsx_runtime.JSX.Element;
declare function DrawerHeaderBase({ className, ...props }: React$1.ComponentProps<"div">): react_jsx_runtime.JSX.Element;
declare function DrawerFooterBase({ className, ...props }: React$1.ComponentProps<"div">): react_jsx_runtime.JSX.Element;
declare function DrawerTitleBase({ className, ...props }: React$1.ComponentProps<typeof Drawer.Title>): react_jsx_runtime.JSX.Element;
declare function DrawerDescriptionBase({ className, ...props }: React$1.ComponentProps<typeof Drawer.Description>): react_jsx_runtime.JSX.Element;

declare const DropDownMenuBase: React$1.FC<DropdownMenuPrimitive.DropdownMenuProps>;
declare const DropDownMenuTriggerBase: React$1.ForwardRefExoticComponent<DropdownMenuPrimitive.DropdownMenuTriggerProps & React$1.RefAttributes<HTMLButtonElement>>;
declare const DropDownMenuGroupBase: React$1.ForwardRefExoticComponent<DropdownMenuPrimitive.DropdownMenuGroupProps & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuPortalBase: React$1.FC<DropdownMenuPrimitive.DropdownMenuPortalProps>;
declare const DropDownMenuSubBase: React$1.FC<DropdownMenuPrimitive.DropdownMenuSubProps>;
declare const DropDownMenuRadioGroupBase: React$1.ForwardRefExoticComponent<DropdownMenuPrimitive.DropdownMenuRadioGroupProps & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuSubTriggerBase: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuSubTriggerProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    inset?: boolean;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuSubContentBase: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuSubContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuContentBase: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuItemBase: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuItemProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    inset?: boolean;
    leftIcon?: React$1.ReactNode;
    rightIcon?: React$1.ReactNode;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuCheckboxItemBase: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuCheckboxItemProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuRadioItemBase: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuRadioItemProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuLabelBase: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuLabelProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    inset?: boolean;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuSeparatorBase: React$1.ForwardRefExoticComponent<Omit<DropdownMenuPrimitive.DropdownMenuSeparatorProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const DropDownMenuShortcutBase: {
    ({ className, ...props }: React$1.HTMLAttributes<HTMLSpanElement>): react_jsx_runtime.JSX.Element;
    displayName: string;
};

declare function HoverCardBase(props: React$1.ComponentProps<typeof HoverCardPrimitive.Root>): react_jsx_runtime.JSX.Element;
declare function HoverCardTriggerBase(props: React$1.ComponentProps<typeof HoverCardPrimitive.Trigger>): react_jsx_runtime.JSX.Element;
declare function HoverCardContentBase({ className, align, sideOffset, ...props }: React$1.ComponentProps<typeof HoverCardPrimitive.Content>): react_jsx_runtime.JSX.Element;

declare function InputOTPBase({ className, containerClassName, ...props }: React$1.ComponentProps<typeof OTPInput> & {
    containerClassName?: string;
}): react_jsx_runtime.JSX.Element;
declare function InputOTPGroupBase({ className, ...props }: React$1.ComponentProps<"div">): react_jsx_runtime.JSX.Element;
declare function InputOTPSlotBase({ index, className, ...props }: React$1.ComponentProps<"div"> & {
    index: number;
}): react_jsx_runtime.JSX.Element;
declare function InputOTPSeparatorBase({ ...props }: React$1.ComponentProps<"div">): react_jsx_runtime.JSX.Element;

interface InputBaseProps extends React$1.ComponentProps<"input"> {
    label?: string;
    labelClassname?: string;
    leftIcon?: React$1.ReactNode;
    rightIcon?: React$1.ReactNode;
    "data-testid"?: string;
}
declare const InputBase: React$1.ForwardRefExoticComponent<Omit<InputBaseProps, "ref"> & React$1.RefAttributes<HTMLInputElement>>;

declare const LabelBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & {
    asChild?: boolean;
    testid?: string;
} & React$1.RefAttributes<HTMLLabelElement>>;

declare function NavigationMenuBase({ className, children, viewport, ...props }: React$1.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
    viewport?: boolean;
}): react_jsx_runtime.JSX.Element;
declare function NavigationMenuListBase({ className, ...props }: React$1.ComponentProps<typeof NavigationMenuPrimitive.List>): react_jsx_runtime.JSX.Element;
declare function NavigationMenuItemBase({ className, ...props }: React$1.ComponentProps<typeof NavigationMenuPrimitive.Item>): react_jsx_runtime.JSX.Element;
declare function NavigationMenuTriggerBase({ className, children, ...props }: React$1.ComponentProps<typeof NavigationMenuPrimitive.Trigger>): react_jsx_runtime.JSX.Element;
declare function NavigationMenuContentBase({ className, ...props }: React$1.ComponentProps<typeof NavigationMenuPrimitive.Content>): react_jsx_runtime.JSX.Element;
declare function NavigationMenuViewportBase({ className, ...props }: React$1.ComponentProps<typeof NavigationMenuPrimitive.Viewport>): react_jsx_runtime.JSX.Element;
declare function NavigationMenuLinkBase({ className, ...props }: React$1.ComponentProps<typeof NavigationMenuPrimitive.Link>): react_jsx_runtime.JSX.Element;
declare function NavigationMenuIndicatorBase({ className, ...props }: React$1.ComponentProps<typeof NavigationMenuPrimitive.Indicator>): react_jsx_runtime.JSX.Element;

declare const PopoverBase: React$1.FC<PopoverPrimitive.PopoverProps>;
declare const PopoverTriggerBase: React$1.ForwardRefExoticComponent<PopoverPrimitive.PopoverTriggerProps & React$1.RefAttributes<HTMLButtonElement>>;
declare const PopoverAnchorBase: React$1.ForwardRefExoticComponent<PopoverPrimitive.PopoverAnchorProps & React$1.RefAttributes<HTMLDivElement>>;
type TestIdProps = {
    testid?: string;
};
declare const PopoverContentBase: React$1.ForwardRefExoticComponent<Omit<PopoverPrimitive.PopoverContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & TestIdProps & React$1.RefAttributes<HTMLDivElement>>;

interface ProgressBaseProps extends React$1.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> {
    label?: string;
    leftIcon?: React$1.ReactNode;
    rightIcon?: React$1.ReactNode;
}
declare const ProgressBase: React$1.ForwardRefExoticComponent<ProgressBaseProps & React$1.RefAttributes<HTMLDivElement>>;
interface ProgressSegmentsBaseProps {
    label?: string;
    segments: number;
    value: number;
}
declare const ProgressSegmentsBase: ({ label, segments, value, }: ProgressSegmentsBaseProps) => react_jsx_runtime.JSX.Element;
interface ProgressPanelsBaseProps {
    label?: string;
    steps: string[];
    currentStep: number;
}
declare const ProgressPanelsBase: ({ label, steps, currentStep, }: ProgressPanelsBaseProps) => react_jsx_runtime.JSX.Element;
interface ProgressCirclesBaseProps {
    label?: string;
    steps: string[];
    currentStep: number;
}
declare const ProgressCirclesBase: ({ label, steps, currentStep, }: ProgressCirclesBaseProps) => react_jsx_runtime.JSX.Element;

declare const ScrollAreaBase: React$1.ForwardRefExoticComponent<Omit<ScrollAreaPrimitive.ScrollAreaProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const ScrollBarBase: React$1.ForwardRefExoticComponent<Omit<ScrollAreaPrimitive.ScrollAreaScrollbarProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;

declare const SelectBase: React$1.FC<SelectPrimitive.SelectProps>;
declare const SelectGroupBase: React$1.ForwardRefExoticComponent<SelectPrimitive.SelectGroupProps & React$1.RefAttributes<HTMLDivElement>>;
declare const SelectValueBase: React$1.ForwardRefExoticComponent<SelectPrimitive.SelectValueProps & React$1.RefAttributes<HTMLSpanElement>>;
declare const SelectTriggerBase: React$1.ForwardRefExoticComponent<Omit<SelectPrimitive.SelectTriggerProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & {
    open?: boolean;
} & React$1.RefAttributes<HTMLButtonElement>>;
declare const SelectScrollUpButtonBase: React$1.ForwardRefExoticComponent<Omit<SelectPrimitive.SelectScrollUpButtonProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SelectScrollDownButtonBase: React$1.ForwardRefExoticComponent<Omit<SelectPrimitive.SelectScrollDownButtonProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SelectContentBase: React$1.ForwardRefExoticComponent<Omit<SelectPrimitive.SelectContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLDivElement>>;
declare const SelectLabelBase: React$1.ForwardRefExoticComponent<Omit<SelectPrimitive.SelectLabelProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SelectItemBase: React$1.ForwardRefExoticComponent<Omit<SelectPrimitive.SelectItemProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SelectSeparatorBase: React$1.ForwardRefExoticComponent<Omit<SelectPrimitive.SelectSeparatorProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;

declare const SeparatorBase: React$1.ForwardRefExoticComponent<Omit<SeparatorPrimitive.SeparatorProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;

declare const SheetBase: React$1.FC<DialogPrimitive.DialogProps>;
declare const SheetTriggerBase: React$1.ForwardRefExoticComponent<DialogPrimitive.DialogTriggerProps & React$1.RefAttributes<HTMLButtonElement>>;
declare const SheetCloseBase: React$1.ForwardRefExoticComponent<DialogPrimitive.DialogCloseProps & React$1.RefAttributes<HTMLButtonElement>>;
declare const SheetPortalBase: React$1.FC<DialogPrimitive.DialogPortalProps>;
declare const SheetOverlayBase: React$1.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogOverlayProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const sheetVariants: (props?: ({
    side?: "left" | "right" | "bottom" | "top" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
interface SheetContentProps extends React$1.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>, VariantProps<typeof sheetVariants> {
}
declare const SheetContentBase: React$1.ForwardRefExoticComponent<SheetContentProps & React$1.RefAttributes<HTMLDivElement>>;
declare const SheetHeaderBase: {
    ({ className, ...props }: React$1.HTMLAttributes<HTMLDivElement>): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const SheetFooterBase: {
    ({ className, ...props }: React$1.HTMLAttributes<HTMLDivElement>): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const SheetTitleBase: React$1.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogTitleProps & React$1.RefAttributes<HTMLHeadingElement>, "ref"> & React$1.RefAttributes<HTMLHeadingElement>>;
declare const SheetDescriptionBase: React$1.ForwardRefExoticComponent<Omit<DialogPrimitive.DialogDescriptionProps & React$1.RefAttributes<HTMLParagraphElement>, "ref"> & React$1.RefAttributes<HTMLParagraphElement>>;

declare const TooltipProviderBase: React$1.FC<TooltipPrimitive.TooltipProviderProps>;
declare const TooltipBase: React$1.FC<TooltipPrimitive.TooltipProps>;
declare const TooltipTriggerBase: React$1.ForwardRefExoticComponent<TooltipPrimitive.TooltipTriggerProps & React$1.RefAttributes<HTMLButtonElement>>;
declare const TooltipContentBase: React$1.ForwardRefExoticComponent<Omit<TooltipPrimitive.TooltipContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;

type SidebarContext = {
    state: "expanded" | "collapsed";
    open: boolean;
    setOpen: (open: boolean) => void;
    openMobile: boolean;
    setOpenMobile: (open: boolean) => void;
    isMobile: boolean;
    toggleSidebar: () => void;
};
declare const SidebarContext: React$1.Context<SidebarContext | null>;
declare function UseSideBarBase(): SidebarContext;
declare const SidebarProviderBase: React$1.ForwardRefExoticComponent<Omit<React$1.ClassAttributes<HTMLDivElement> & React$1.HTMLAttributes<HTMLDivElement> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
}, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarBase: React$1.ForwardRefExoticComponent<Omit<React$1.ClassAttributes<HTMLDivElement> & React$1.HTMLAttributes<HTMLDivElement> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
}, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarTriggerBase: React$1.ForwardRefExoticComponent<Omit<ButtonProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & React$1.RefAttributes<HTMLButtonElement>>;
declare const SidebarRailBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & React$1.RefAttributes<HTMLButtonElement>>;
declare const SidebarInsetBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarInputBase: React$1.ForwardRefExoticComponent<Omit<Omit<InputBaseProps, "ref"> & React$1.RefAttributes<HTMLInputElement>, "ref"> & React$1.RefAttributes<HTMLInputElement>>;
declare const SidebarHeaderBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarFooterBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarSeparatorBase: React$1.ForwardRefExoticComponent<Omit<Omit<SeparatorPrimitive.SeparatorProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarContentBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarGroupBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarGroupLabelBase: React$1.ForwardRefExoticComponent<Omit<React$1.ClassAttributes<HTMLDivElement> & React$1.HTMLAttributes<HTMLDivElement> & {
    asChild?: boolean;
}, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarGroupActionBase: React$1.ForwardRefExoticComponent<Omit<React$1.ClassAttributes<HTMLButtonElement> & React$1.ButtonHTMLAttributes<HTMLButtonElement> & {
    asChild?: boolean;
}, "ref"> & React$1.RefAttributes<HTMLButtonElement>>;
declare const SidebarGroupContentBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarMenuBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLUListElement>, HTMLUListElement>, "ref"> & React$1.RefAttributes<HTMLUListElement>>;
declare const SidebarMenuItemBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, "ref"> & React$1.RefAttributes<HTMLLIElement>>;
declare const SidebarMenuButtonBase: React$1.ForwardRefExoticComponent<Omit<React$1.ClassAttributes<HTMLButtonElement> & React$1.ButtonHTMLAttributes<HTMLButtonElement> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React$1.ComponentProps<typeof TooltipContentBase>;
} & VariantProps<(props?: ({
    variant?: "default" | "outline" | null | undefined;
    size?: "default" | "sm" | "lg" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string>, "ref"> & React$1.RefAttributes<HTMLButtonElement>>;
declare const SidebarMenuActionBase: React$1.ForwardRefExoticComponent<Omit<React$1.ClassAttributes<HTMLButtonElement> & React$1.ButtonHTMLAttributes<HTMLButtonElement> & {
    asChild?: boolean;
    showOnHover?: boolean;
}, "ref"> & React$1.RefAttributes<HTMLButtonElement>>;
declare const SidebarMenuBadgeBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarMenuSkeletonBase: React$1.ForwardRefExoticComponent<Omit<React$1.ClassAttributes<HTMLDivElement> & React$1.HTMLAttributes<HTMLDivElement> & {
    showIcon?: boolean;
}, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const SidebarMenuSubBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.HTMLAttributes<HTMLUListElement>, HTMLUListElement>, "ref"> & React$1.RefAttributes<HTMLUListElement>>;
declare const SidebarMenuSubItemBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, "ref"> & React$1.RefAttributes<HTMLLIElement>>;
declare const SidebarMenuSubButtonBase: React$1.ForwardRefExoticComponent<Omit<React$1.ClassAttributes<HTMLAnchorElement> & React$1.AnchorHTMLAttributes<HTMLAnchorElement> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
}, "ref"> & React$1.RefAttributes<HTMLAnchorElement>>;

declare function SkeletonBase({ className, ...props }: React.HTMLAttributes<HTMLDivElement>): react_jsx_runtime.JSX.Element;

interface SliderBaseProps extends React$1.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {
    label?: string;
    leftIcon?: React$1.ReactNode;
    rightIcon?: React$1.ReactNode;
}
declare const SlideBase: React$1.ForwardRefExoticComponent<SliderBaseProps & React$1.RefAttributes<HTMLSpanElement>>;

type ToasterProps = React.ComponentProps<typeof Toaster$1> & {
    testId?: string;
};
declare const Toaster: ({ testId, ...props }: ToasterProps) => react_jsx_runtime.JSX.Element;
declare const toast: {
    success: (message: string) => string | number;
    error: (message: string) => string | number;
    warning: (message: string) => string | number;
    info: (message: string) => string | number;
    loading: (message: string) => string | number;
};

declare const SwitchBase: React$1.ForwardRefExoticComponent<Omit<SwitchPrimitives.SwitchProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & {
    testid?: string;
} & React$1.RefAttributes<HTMLButtonElement>>;

declare const TableBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableElement> & React$1.RefAttributes<HTMLTableElement>>;
declare const TableHeaderBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableSectionElement> & React$1.RefAttributes<HTMLTableSectionElement>>;
declare const TableBodyBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableSectionElement> & React$1.RefAttributes<HTMLTableSectionElement>>;
declare const TableFooterBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableSectionElement> & React$1.RefAttributes<HTMLTableSectionElement>>;
declare const TableRowBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableRowElement> & React$1.RefAttributes<HTMLTableRowElement>>;
declare const TableHeadBase: React$1.ForwardRefExoticComponent<React$1.ThHTMLAttributes<HTMLTableCellElement> & React$1.RefAttributes<HTMLTableCellElement>>;
declare const TableCellBase: React$1.ForwardRefExoticComponent<React$1.TdHTMLAttributes<HTMLTableCellElement> & React$1.RefAttributes<HTMLTableCellElement>>;
declare const TableCaptionBase: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableCaptionElement> & React$1.RefAttributes<HTMLTableCaptionElement>>;

declare const TabsBase: React$1.ForwardRefExoticComponent<TabsPrimitive.TabsProps & React$1.RefAttributes<HTMLDivElement>>;
declare const TabsListBase: React$1.ForwardRefExoticComponent<Omit<TabsPrimitive.TabsListProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;
declare const TabsTriggerBase: React$1.ForwardRefExoticComponent<Omit<TabsPrimitive.TabsTriggerProps & React$1.RefAttributes<HTMLButtonElement>, "ref"> & React$1.RefAttributes<HTMLButtonElement>>;
declare const TabsContentBase: React$1.ForwardRefExoticComponent<Omit<TabsPrimitive.TabsContentProps & React$1.RefAttributes<HTMLDivElement>, "ref"> & React$1.RefAttributes<HTMLDivElement>>;

declare const TextAreaBase: React$1.ForwardRefExoticComponent<Omit<React$1.DetailedHTMLProps<React$1.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, "ref"> & React$1.RefAttributes<HTMLTextAreaElement>>;

type Theme = "light" | "light-purple" | "light-green" | "light-blue" | "dark" | "dark-purple" | "dark-green" | "dark-blue" | "system";
type ThemeProviderProps = {
    children: React.ReactNode;
    defaultTheme?: Theme;
    storageKey?: string;
};
type ThemeProviderState = {
    theme: Theme;
    setTheme: (theme: Theme) => void;
};
declare function ThemeProviderBase({ children, defaultTheme, storageKey, ...props }: ThemeProviderProps): react_jsx_runtime.JSX.Element;
declare const useTheme: () => ThemeProviderState;

type ModeToggleBaseProps = {
    themes?: Theme[];
};
declare function ModeToggleBase({ themes, }: ModeToggleBaseProps): react_jsx_runtime.JSX.Element;

interface DateTimePickerProps {
    label?: string;
    date: Date | undefined;
    onChange: (date: Date | undefined) => void;
    hideSeconds?: boolean;
    fromDate?: Date;
    toDate?: Date;
    disabled?: boolean;
    dialogTitle?: string;
}
declare function DateTimePicker({ label, date, onChange, hideSeconds, fromDate, toDate, disabled, dialogTitle, }: DateTimePickerProps): react_jsx_runtime.JSX.Element;

interface TimePickerProps {
    date: Date | undefined;
    setDate: (date: Date | undefined) => void;
    hideSeconds?: boolean;
}
declare function TimePicker({ date, setDate, hideSeconds }: TimePickerProps): react_jsx_runtime.JSX.Element;

type TimePickerType = "minutes" | "seconds" | "hours" | "12hours";
type Period = "AM" | "PM";

interface TimePickerInputProps extends React__default.InputHTMLAttributes<HTMLInputElement> {
    picker: TimePickerType;
    date: Date | undefined;
    setDate: (date: Date | undefined) => void;
    period?: Period;
    onRightFocus?: () => void;
    onLeftFocus?: () => void;
}
declare const TimePickerInput: React__default.ForwardRefExoticComponent<TimePickerInputProps & React__default.RefAttributes<HTMLInputElement>>;

interface ComboboxItem<T extends string> {
    label: string;
    value: T;
}

interface ComboboxTestIds {
    root?: string;
    trigger?: string;
    popover?: string;
    command?: string;
    search?: string;
    list?: string;
    empty?: string;
    group?: string;
    option?: string;
    check?: string;
    selected?: string;
}
interface ComboboxProps<T extends string> {
    items: ComboboxItem<T>[];
    selected: ComboboxItem<T>["value"] | null;
    onChange: (value: ComboboxItem<T>["value"] | null) => void;
    className?: string;
    placeholder?: string;
    searchPlaceholder?: string;
    label?: string;
    labelClassname?: string;
    testIds?: ComboboxTestIds;
}
declare function Combobox<T extends string>({ items, selected, onChange, className, placeholder, searchPlaceholder, label, labelClassname, testIds, }: ComboboxProps<T>): react_jsx_runtime.JSX.Element;

interface MultiComboboxTestIds {
    root?: string;
    label?: string;
    selectedWrapper?: string;
    emptyPlaceholder?: string;
    selectedItem?: (value: string) => string;
}
interface MultiComboboxProps<T extends string> extends Omit<ComboboxProps<T>, "selected" | "onChange"> {
    selected: T[];
    onChange: (value: T[]) => void;
    label?: string;
    labelClassname?: string;
    testIds?: MultiComboboxTestIds;
}
declare function MultiCombobox<T extends string>({ items, selected, onChange, className, placeholder, searchPlaceholder, label, labelClassname, testIds, }: MultiComboboxProps<T>): react_jsx_runtime.JSX.Element;

interface SelectItem<T extends string> {
    label: string;
    value: T;
}
interface DefaultSelectProps {
    placeholder: string;
    onChange: (value: string) => void;
    errorMessage?: string;
}
interface SelectTestIds {
    root?: string;
    base?: string;
    trigger?: string;
    value?: string;
    scrollarea?: string;
    content?: string;
    group?: string;
    label?: string;
    item?: (value: string) => string;
    error?: string;
}
interface SelectPropsWithItems<T extends string> extends DefaultSelectProps {
    items: SelectItem<T>[];
    groupItems?: never;
    testIds?: SelectTestIds;
}
interface SelectPropsWithGroupItems<T extends string> extends DefaultSelectProps {
    items?: never;
    groupItems: {
        [key: string]: SelectItem<T>[];
    };
    testIds?: SelectTestIds;
}
type SelectProps<T extends string> = SelectPropsWithItems<T> | SelectPropsWithGroupItems<T>;
declare function Select<T extends string>({ items, groupItems, placeholder, onChange, errorMessage, testIds, }: SelectProps<T>): react_jsx_runtime.JSX.Element;

interface DestructiveDialogProps {
    title: string;
    description: string;
    onConfirm: () => void;
    onCancel?: () => void;
    children?: React$1.ReactNode;
    triggerContent?: React$1.ReactNode;
}
declare const DestructiveDialog: React$1.FC<DestructiveDialogProps>;

interface LineChartData {
    name: string;
    [key: string]: string | number;
}
interface CustomLineChartProps {
    data?: LineChartData[];
    className?: string;
    height?: number;
    width?: number | string;
    colors?: string[];
    gridColor?: string;
    showGrid?: boolean;
    showTooltip?: boolean;
    showLegend?: boolean;
    title?: string;
    titlePosition?: "left" | "center" | "right";
    strokeWidth?: number;
    showDots?: boolean;
    showLabels?: boolean;
}
declare const CustomLineChart: React__default.FC<CustomLineChartProps>;

interface PieChartData {
    name: string;
    value: number;
    [key: string]: string | number;
}
interface CustomPieChartProps {
    data?: PieChartData[];
    className?: string;
    height?: number;
    width?: number | string;
    colors?: string[];
    showTooltip?: boolean;
    showLegend?: boolean;
    showLabels?: boolean;
    innerRadius?: number;
    outerRadius?: number;
    centerX?: string | number;
    centerY?: string | number;
}
declare const CustomPieChart: React__default.FC<CustomPieChartProps>;

interface BarChartData {
    [key: string]: string | number | boolean | null | undefined;
}
interface XAxisConfig$1 {
    dataKey: string;
    label?: string;
    formatter?: (value: string | number) => string;
    autoLabel?: boolean;
}
interface DataMapper {
    [dataKey: string]: {
        label?: string;
        formatter?: (value: string | number) => string | number;
        color?: string;
        type?: "number" | "string" | "auto";
        visible?: boolean;
    };
}
interface BarChartProps {
    data: BarChartData[];
    className?: string;
    height?: number;
    width?: number | string;
    colors?: string[];
    gridColor?: string;
    showGrid?: boolean;
    showTooltip?: boolean;
    showLegend?: boolean;
    title?: string;
    titlePosition?: "left" | "center" | "right";
    showLabels?: boolean;
    labelMap?: Record<string, string>;
    xAxis?: XAxisConfig$1 | string;
    mapper?: DataMapper | string[];
    yAxis?: DataMapper | string[];
    autoDetect?: boolean;
}
declare const BarChart: React__default.FC<BarChartProps>;

interface ChartData {
    [key: string]: string | number | boolean | null | undefined;
}
interface XAxisConfig {
    dataKey: string;
    label?: string;
    formatter?: (value: string | number) => string;
    autoLabel?: boolean;
}
type SeriesProp = {
    bar?: string[];
    line?: string[];
    area?: string[];
};
interface ChartProps {
    data: ChartData[];
    series?: SeriesProp;
    className?: string;
    height?: number;
    width?: number | string;
    colors?: string[];
    gridColor?: string;
    showGrid?: boolean;
    showTooltip?: boolean;
    showLegend?: boolean;
    title?: string;
    titlePosition?: "left" | "center" | "right";
    showLabels?: boolean;
    labelMap?: Record<string, string>;
    xAxis: XAxisConfig | string;
    enableHighlights?: boolean;
    enableShowOnly?: boolean;
    enablePeriodsDropdown?: boolean;
    enableDraggableTooltips?: boolean;
}
declare const Chart: React__default.FC<ChartProps>;

declare function useIsMobile(): boolean;

interface Position {
    top: number;
    left: number;
}
interface UseDragOptions {
    onDragStart?: (id: string) => void;
    onDragEnd?: (id: string) => void;
    onDrag?: (id: string, position: Position) => void;
}
declare const useDrag: (options?: UseDragOptions) => {
    handleMouseDown: (id: string, e: React.MouseEvent) => void;
    getPosition: (id: string) => Position;
    setPosition: (id: string, position: Position) => void;
    isElementDragging: (id: string) => boolean;
    isDragging: boolean;
};

export { AlertDialogActionBase, AlertDialogBase, AlertDialogCancelBase, AlertDialogContentBase, AlertDialogDescriptionBase, AlertDialogFooterBase, AlertDialogHeaderBase, AlertDialogOverlayBase, AlertDialogPortalBase, AlertDialogTitleBase, AlertDialogTriggerBase, AvatarBase, AvatarFallbackBase, AvatarImageBase, BadgeBase, BarChart, BreadcrumbBase, BreadcrumbEllipsisBase, BreadcrumbItemBase, BreadcrumbLinkBase, BreadcrumbListBase, BreadcrumbPageBase, BreadcrumbSeparatorBase, ButtonBase, ButtonGroupBase, type ButtonProps, CalendarBase, type CalendarProps, CardBase, CardContentBase, CardDescriptionBase, CardFooterBase, CardHeaderBase, CardTitleBase, type CarouselApi, CarouselBase, CarouselContentBase, CarouselItemBase, CarouselNextBase, CarouselPrevious, Chart, CheckboxBase, CollapsibleBase, CollapsibleContentBase, CollapsibleTriggerBase, Combobox, type ComboboxProps, type ComboboxTestIds, CommandBase, CommandDialogBase, CommandEmptyBase, CommandGroupBase, CommandInputBase, CommandItemBase, CommandListBase, CommandSeparatorBase, CommandShortcutBase, ContextMenuBase, ContextMenuCheckboxItemBase, ContextMenuContentBase, ContextMenuGroupBase, ContextMenuItemBase, ContextMenuLabelBase, ContextMenuPortalBase, ContextMenuRadioGroupBase, ContextMenuRadioItemBase, ContextMenuSeparatorBase, ContextMenuShortcutBase, ContextMenuSubBase, ContextMenuSubContentBase, ContextMenuSubTriggerBase, ContextMenuTriggerBase, DateTimePicker, DestructiveDialog, DialogBase, DialogCloseBase, DialogContentBase, DialogDescriptionBase, DialogFooterBase, DialogHeaderBase, DialogOverlayBase, DialogPortalBase, DialogTitleBase, DialogTriggerBase, DrawerBase, DrawerCloseBase, DrawerContentBase, DrawerDescriptionBase, DrawerFooterBase, DrawerHeaderBase, DrawerOverlayBase, DrawerPortalBase, DrawerTitleBase, DrawerTriggerBase, DropDownMenuBase, DropDownMenuCheckboxItemBase, DropDownMenuContentBase, DropDownMenuGroupBase, DropDownMenuItemBase, DropDownMenuLabelBase, DropDownMenuPortalBase, DropDownMenuRadioGroupBase, DropDownMenuRadioItemBase, DropDownMenuSeparatorBase, DropDownMenuShortcutBase, DropDownMenuSubBase, DropDownMenuSubContentBase, DropDownMenuSubTriggerBase, DropDownMenuTriggerBase, HoverCardBase, HoverCardContentBase, HoverCardTriggerBase, InputBase, type InputBaseProps, InputOTPBase, InputOTPGroupBase, InputOTPSeparatorBase, InputOTPSlotBase, LabelBase, CustomLineChart as LineChart, ModeToggleBase, MultiCombobox, NavigationMenuBase, NavigationMenuContentBase, NavigationMenuIndicatorBase, NavigationMenuItemBase, NavigationMenuLinkBase, NavigationMenuListBase, NavigationMenuTriggerBase, NavigationMenuViewportBase, CustomPieChart as PieChart, PopoverAnchorBase, PopoverBase, PopoverContentBase, PopoverTriggerBase, ProgressBase, type ProgressBaseProps, ProgressCirclesBase, type ProgressCirclesBaseProps, ProgressPanelsBase, type ProgressPanelsBaseProps, ProgressSegmentsBase, type ProgressSegmentsBaseProps, ScrollAreaBase, ScrollBarBase, Select, SelectBase, SelectContentBase, SelectGroupBase, type SelectItem, SelectItemBase, SelectLabelBase, SelectScrollDownButtonBase, SelectScrollUpButtonBase, SelectSeparatorBase, SelectTriggerBase, SelectValueBase, SeparatorBase, SheetBase, SheetCloseBase, SheetContentBase, SheetDescriptionBase, SheetFooterBase, SheetHeaderBase, SheetOverlayBase, SheetPortalBase, SheetTitleBase, SheetTriggerBase, SidebarBase, SidebarContentBase, SidebarFooterBase, SidebarGroupActionBase, SidebarGroupBase, SidebarGroupContentBase, SidebarGroupLabelBase, SidebarHeaderBase, SidebarInputBase, SidebarInsetBase, SidebarMenuActionBase, SidebarMenuBadgeBase, SidebarMenuBase, SidebarMenuButtonBase, SidebarMenuItemBase, SidebarMenuSkeletonBase, SidebarMenuSubBase, SidebarMenuSubButtonBase, SidebarMenuSubItemBase, SidebarProviderBase, SidebarRailBase, SidebarSeparatorBase, SidebarTriggerBase, SkeletonBase, SlideBase, type SliderBaseProps, SwitchBase, TableBase, TableBodyBase, TableCaptionBase, TableCellBase, TableFooterBase, TableHeadBase, TableHeaderBase, TableRowBase, TabsBase, TabsContentBase, TabsListBase, TabsTriggerBase, TextAreaBase, type Theme, ThemeProviderBase, TimePicker, TimePickerInput, type TimePickerInputProps, Toaster, TooltipBase, TooltipContentBase, TooltipProviderBase, TooltipTriggerBase, UseSideBarBase, badgeVariants, buttonVariantsBase, toast, useDrag, useIsMobile, useTheme };
