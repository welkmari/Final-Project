"use client";
import './index.css';
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/picocolors/picocolors.browser.js
var require_picocolors_browser = __commonJS({
  "node_modules/picocolors/picocolors.browser.js"(exports, module2) {
    "use strict";
    var x = String;
    var create = function() {
      return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x, blackBright: x, redBright: x, greenBright: x, yellowBright: x, blueBright: x, magentaBright: x, cyanBright: x, whiteBright: x, bgBlackBright: x, bgRedBright: x, bgGreenBright: x, bgYellowBright: x, bgBlueBright: x, bgMagentaBright: x, bgCyanBright: x, bgWhiteBright: x };
    };
    module2.exports = create();
    module2.exports.createColors = create;
  }
});

// node_modules/tailwindcss/lib/util/log.js
var require_log = __commonJS({
  "node_modules/tailwindcss/lib/util/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      dim: function() {
        return dim;
      },
      default: function() {
        return _default;
      }
    });
    var _picocolors = /* @__PURE__ */ _interop_require_default(require_picocolors_browser());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var alreadyShown = /* @__PURE__ */ new Set();
    function log(type, messages, key) {
      if (typeof process !== "undefined" && process.env.JEST_WORKER_ID) return;
      if (key && alreadyShown.has(key)) return;
      if (key) alreadyShown.add(key);
      console.warn("");
      messages.forEach((message) => console.warn(type, "-", message));
    }
    function dim(input) {
      return _picocolors.default.dim(input);
    }
    var _default = {
      info(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.cyan("info")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      },
      warn(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.yellow("warn")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      },
      risk(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.magenta("risk")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      }
    };
  }
});

// node_modules/tailwindcss/lib/public/colors.js
var require_colors = __commonJS({
  "node_modules/tailwindcss/lib/public/colors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    var _log = /* @__PURE__ */ _interop_require_default(require_log());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function warn({ version, from, to }) {
      _log.default.warn(`${from}-color-renamed`, [
        `As of Tailwind CSS ${version}, \`${from}\` has been renamed to \`${to}\`.`,
        "Update your configuration file to silence this warning."
      ]);
    }
    var _default = {
      inherit: "inherit",
      current: "currentColor",
      transparent: "transparent",
      black: "#000",
      white: "#fff",
      slate: {
        50: "#f8fafc",
        100: "#f1f5f9",
        200: "#e2e8f0",
        300: "#cbd5e1",
        400: "#94a3b8",
        500: "#64748b",
        600: "#475569",
        700: "#334155",
        800: "#1e293b",
        900: "#0f172a",
        950: "#020617"
      },
      gray: {
        50: "#f9fafb",
        100: "#f3f4f6",
        200: "#e5e7eb",
        300: "#d1d5db",
        400: "#9ca3af",
        500: "#6b7280",
        600: "#4b5563",
        700: "#374151",
        800: "#1f2937",
        900: "#111827",
        950: "#030712"
      },
      zinc: {
        50: "#fafafa",
        100: "#f4f4f5",
        200: "#e4e4e7",
        300: "#d4d4d8",
        400: "#a1a1aa",
        500: "#71717a",
        600: "#52525b",
        700: "#3f3f46",
        800: "#27272a",
        900: "#18181b",
        950: "#09090b"
      },
      neutral: {
        50: "#fafafa",
        100: "#f5f5f5",
        200: "#e5e5e5",
        300: "#d4d4d4",
        400: "#a3a3a3",
        500: "#737373",
        600: "#525252",
        700: "#404040",
        800: "#262626",
        900: "#171717",
        950: "#0a0a0a"
      },
      stone: {
        50: "#fafaf9",
        100: "#f5f5f4",
        200: "#e7e5e4",
        300: "#d6d3d1",
        400: "#a8a29e",
        500: "#78716c",
        600: "#57534e",
        700: "#44403c",
        800: "#292524",
        900: "#1c1917",
        950: "#0c0a09"
      },
      red: {
        50: "#fef2f2",
        100: "#fee2e2",
        200: "#fecaca",
        300: "#fca5a5",
        400: "#f87171",
        500: "#ef4444",
        600: "#dc2626",
        700: "#b91c1c",
        800: "#991b1b",
        900: "#7f1d1d",
        950: "#450a0a"
      },
      orange: {
        50: "#fff7ed",
        100: "#ffedd5",
        200: "#fed7aa",
        300: "#fdba74",
        400: "#fb923c",
        500: "#f97316",
        600: "#ea580c",
        700: "#c2410c",
        800: "#9a3412",
        900: "#7c2d12",
        950: "#431407"
      },
      amber: {
        50: "#fffbeb",
        100: "#fef3c7",
        200: "#fde68a",
        300: "#fcd34d",
        400: "#fbbf24",
        500: "#f59e0b",
        600: "#d97706",
        700: "#b45309",
        800: "#92400e",
        900: "#78350f",
        950: "#451a03"
      },
      yellow: {
        50: "#fefce8",
        100: "#fef9c3",
        200: "#fef08a",
        300: "#fde047",
        400: "#facc15",
        500: "#eab308",
        600: "#ca8a04",
        700: "#a16207",
        800: "#854d0e",
        900: "#713f12",
        950: "#422006"
      },
      lime: {
        50: "#f7fee7",
        100: "#ecfccb",
        200: "#d9f99d",
        300: "#bef264",
        400: "#a3e635",
        500: "#84cc16",
        600: "#65a30d",
        700: "#4d7c0f",
        800: "#3f6212",
        900: "#365314",
        950: "#1a2e05"
      },
      green: {
        50: "#f0fdf4",
        100: "#dcfce7",
        200: "#bbf7d0",
        300: "#86efac",
        400: "#4ade80",
        500: "#22c55e",
        600: "#16a34a",
        700: "#15803d",
        800: "#166534",
        900: "#14532d",
        950: "#052e16"
      },
      emerald: {
        50: "#ecfdf5",
        100: "#d1fae5",
        200: "#a7f3d0",
        300: "#6ee7b7",
        400: "#34d399",
        500: "#10b981",
        600: "#059669",
        700: "#047857",
        800: "#065f46",
        900: "#064e3b",
        950: "#022c22"
      },
      teal: {
        50: "#f0fdfa",
        100: "#ccfbf1",
        200: "#99f6e4",
        300: "#5eead4",
        400: "#2dd4bf",
        500: "#14b8a6",
        600: "#0d9488",
        700: "#0f766e",
        800: "#115e59",
        900: "#134e4a",
        950: "#042f2e"
      },
      cyan: {
        50: "#ecfeff",
        100: "#cffafe",
        200: "#a5f3fc",
        300: "#67e8f9",
        400: "#22d3ee",
        500: "#06b6d4",
        600: "#0891b2",
        700: "#0e7490",
        800: "#155e75",
        900: "#164e63",
        950: "#083344"
      },
      sky: {
        50: "#f0f9ff",
        100: "#e0f2fe",
        200: "#bae6fd",
        300: "#7dd3fc",
        400: "#38bdf8",
        500: "#0ea5e9",
        600: "#0284c7",
        700: "#0369a1",
        800: "#075985",
        900: "#0c4a6e",
        950: "#082f49"
      },
      blue: {
        50: "#eff6ff",
        100: "#dbeafe",
        200: "#bfdbfe",
        300: "#93c5fd",
        400: "#60a5fa",
        500: "#3b82f6",
        600: "#2563eb",
        700: "#1d4ed8",
        800: "#1e40af",
        900: "#1e3a8a",
        950: "#172554"
      },
      indigo: {
        50: "#eef2ff",
        100: "#e0e7ff",
        200: "#c7d2fe",
        300: "#a5b4fc",
        400: "#818cf8",
        500: "#6366f1",
        600: "#4f46e5",
        700: "#4338ca",
        800: "#3730a3",
        900: "#312e81",
        950: "#1e1b4b"
      },
      violet: {
        50: "#f5f3ff",
        100: "#ede9fe",
        200: "#ddd6fe",
        300: "#c4b5fd",
        400: "#a78bfa",
        500: "#8b5cf6",
        600: "#7c3aed",
        700: "#6d28d9",
        800: "#5b21b6",
        900: "#4c1d95",
        950: "#2e1065"
      },
      purple: {
        50: "#faf5ff",
        100: "#f3e8ff",
        200: "#e9d5ff",
        300: "#d8b4fe",
        400: "#c084fc",
        500: "#a855f7",
        600: "#9333ea",
        700: "#7e22ce",
        800: "#6b21a8",
        900: "#581c87",
        950: "#3b0764"
      },
      fuchsia: {
        50: "#fdf4ff",
        100: "#fae8ff",
        200: "#f5d0fe",
        300: "#f0abfc",
        400: "#e879f9",
        500: "#d946ef",
        600: "#c026d3",
        700: "#a21caf",
        800: "#86198f",
        900: "#701a75",
        950: "#4a044e"
      },
      pink: {
        50: "#fdf2f8",
        100: "#fce7f3",
        200: "#fbcfe8",
        300: "#f9a8d4",
        400: "#f472b6",
        500: "#ec4899",
        600: "#db2777",
        700: "#be185d",
        800: "#9d174d",
        900: "#831843",
        950: "#500724"
      },
      rose: {
        50: "#fff1f2",
        100: "#ffe4e6",
        200: "#fecdd3",
        300: "#fda4af",
        400: "#fb7185",
        500: "#f43f5e",
        600: "#e11d48",
        700: "#be123c",
        800: "#9f1239",
        900: "#881337",
        950: "#4c0519"
      },
      get lightBlue() {
        warn({
          version: "v2.2",
          from: "lightBlue",
          to: "sky"
        });
        return this.sky;
      },
      get warmGray() {
        warn({
          version: "v3.0",
          from: "warmGray",
          to: "stone"
        });
        return this.stone;
      },
      get trueGray() {
        warn({
          version: "v3.0",
          from: "trueGray",
          to: "neutral"
        });
        return this.neutral;
      },
      get coolGray() {
        warn({
          version: "v3.0",
          from: "coolGray",
          to: "gray"
        });
        return this.gray;
      },
      get blueGray() {
        warn({
          version: "v3.0",
          from: "blueGray",
          to: "slate"
        });
        return this.slate;
      }
    };
  }
});

// node_modules/tailwindcss/colors.js
var require_colors2 = __commonJS({
  "node_modules/tailwindcss/colors.js"(exports, module2) {
    "use strict";
    var colors2 = require_colors();
    module2.exports = (colors2.__esModule ? colors2 : { default: colors2 }).default;
  }
});

// src/index.ts
var index_exports = {};
__export(index_exports, {
  AlertDialogActionBase: () => AlertDialogActionBase,
  AlertDialogBase: () => AlertDialogBase,
  AlertDialogCancelBase: () => AlertDialogCancelBase,
  AlertDialogContentBase: () => AlertDialogContentBase,
  AlertDialogDescriptionBase: () => AlertDialogDescriptionBase,
  AlertDialogFooterBase: () => AlertDialogFooterBase,
  AlertDialogHeaderBase: () => AlertDialogHeaderBase,
  AlertDialogOverlayBase: () => AlertDialogOverlayBase,
  AlertDialogPortalBase: () => AlertDialogPortalBase,
  AlertDialogTitleBase: () => AlertDialogTitleBase,
  AlertDialogTriggerBase: () => AlertDialogTriggerBase,
  AvatarBase: () => AvatarBase,
  AvatarFallbackBase: () => AvatarFallbackBase,
  AvatarImageBase: () => AvatarImageBase,
  BadgeBase: () => BadgeBase,
  BarChart: () => BarChart_default,
  BreadcrumbBase: () => BreadcrumbBase,
  BreadcrumbEllipsisBase: () => BreadcrumbEllipsisBase,
  BreadcrumbItemBase: () => BreadcrumbItemBase,
  BreadcrumbLinkBase: () => BreadcrumbLinkBase,
  BreadcrumbListBase: () => BreadcrumbListBase,
  BreadcrumbPageBase: () => BreadcrumbPageBase,
  BreadcrumbSeparatorBase: () => BreadcrumbSeparatorBase,
  ButtonBase: () => ButtonBase,
  ButtonGroupBase: () => ButtonGroupBase,
  CalendarBase: () => CalendarBase,
  CardBase: () => CardBase,
  CardContentBase: () => CardContentBase,
  CardDescriptionBase: () => CardDescriptionBase,
  CardFooterBase: () => CardFooterBase,
  CardHeaderBase: () => CardHeaderBase,
  CardTitleBase: () => CardTitleBase,
  CarouselBase: () => CarouselBase,
  CarouselContentBase: () => CarouselContentBase,
  CarouselItemBase: () => CarouselItemBase,
  CarouselNextBase: () => CarouselNextBase,
  CarouselPrevious: () => CarouselPrevious,
  Chart: () => Chart_default,
  CheckboxBase: () => CheckboxBase,
  CollapsibleBase: () => CollapsibleBase,
  CollapsibleContentBase: () => CollapsibleContentBase,
  CollapsibleTriggerBase: () => CollapsibleTriggerBase,
  Combobox: () => Combobox,
  CommandBase: () => CommandBase,
  CommandDialogBase: () => CommandDialogBase,
  CommandEmptyBase: () => CommandEmptyBase,
  CommandGroupBase: () => CommandGroupBase,
  CommandInputBase: () => CommandInputBase,
  CommandItemBase: () => CommandItemBase,
  CommandListBase: () => CommandListBase,
  CommandSeparatorBase: () => CommandSeparatorBase,
  CommandShortcutBase: () => CommandShortcutBase,
  ContextMenuBase: () => ContextMenuBase,
  ContextMenuCheckboxItemBase: () => ContextMenuCheckboxItemBase,
  ContextMenuContentBase: () => ContextMenuContentBase,
  ContextMenuGroupBase: () => ContextMenuGroupBase,
  ContextMenuItemBase: () => ContextMenuItemBase,
  ContextMenuLabelBase: () => ContextMenuLabelBase,
  ContextMenuPortalBase: () => ContextMenuPortalBase,
  ContextMenuRadioGroupBase: () => ContextMenuRadioGroupBase,
  ContextMenuRadioItemBase: () => ContextMenuRadioItemBase,
  ContextMenuSeparatorBase: () => ContextMenuSeparatorBase,
  ContextMenuShortcutBase: () => ContextMenuShortcutBase,
  ContextMenuSubBase: () => ContextMenuSubBase,
  ContextMenuSubContentBase: () => ContextMenuSubContentBase,
  ContextMenuSubTriggerBase: () => ContextMenuSubTriggerBase,
  ContextMenuTriggerBase: () => ContextMenuTriggerBase,
  DateTimePicker: () => DateTimePicker,
  DestructiveDialog: () => DestructiveDialog,
  DialogBase: () => DialogBase,
  DialogCloseBase: () => DialogCloseBase,
  DialogContentBase: () => DialogContentBase,
  DialogDescriptionBase: () => DialogDescriptionBase,
  DialogFooterBase: () => DialogFooterBase,
  DialogHeaderBase: () => DialogHeaderBase,
  DialogOverlayBase: () => DialogOverlayBase,
  DialogPortalBase: () => DialogPortalBase,
  DialogTitleBase: () => DialogTitleBase,
  DialogTriggerBase: () => DialogTriggerBase,
  DrawerBase: () => DrawerBase,
  DrawerCloseBase: () => DrawerCloseBase,
  DrawerContentBase: () => DrawerContentBase,
  DrawerDescriptionBase: () => DrawerDescriptionBase,
  DrawerFooterBase: () => DrawerFooterBase,
  DrawerHeaderBase: () => DrawerHeaderBase,
  DrawerOverlayBase: () => DrawerOverlayBase,
  DrawerPortalBase: () => DrawerPortalBase,
  DrawerTitleBase: () => DrawerTitleBase,
  DrawerTriggerBase: () => DrawerTriggerBase,
  DropDownMenuBase: () => DropDownMenuBase,
  DropDownMenuCheckboxItemBase: () => DropDownMenuCheckboxItemBase,
  DropDownMenuContentBase: () => DropDownMenuContentBase,
  DropDownMenuGroupBase: () => DropDownMenuGroupBase,
  DropDownMenuItemBase: () => DropDownMenuItemBase,
  DropDownMenuLabelBase: () => DropDownMenuLabelBase,
  DropDownMenuPortalBase: () => DropDownMenuPortalBase,
  DropDownMenuRadioGroupBase: () => DropDownMenuRadioGroupBase,
  DropDownMenuRadioItemBase: () => DropDownMenuRadioItemBase,
  DropDownMenuSeparatorBase: () => DropDownMenuSeparatorBase,
  DropDownMenuShortcutBase: () => DropDownMenuShortcutBase,
  DropDownMenuSubBase: () => DropDownMenuSubBase,
  DropDownMenuSubContentBase: () => DropDownMenuSubContentBase,
  DropDownMenuSubTriggerBase: () => DropDownMenuSubTriggerBase,
  DropDownMenuTriggerBase: () => DropDownMenuTriggerBase,
  HoverCardBase: () => HoverCardBase,
  HoverCardContentBase: () => HoverCardContentBase,
  HoverCardTriggerBase: () => HoverCardTriggerBase,
  InputBase: () => InputBase,
  InputOTPBase: () => InputOTPBase,
  InputOTPGroupBase: () => InputOTPGroupBase,
  InputOTPSeparatorBase: () => InputOTPSeparatorBase,
  InputOTPSlotBase: () => InputOTPSlotBase,
  LabelBase: () => LabelBase_default,
  LineChart: () => LineChart_default,
  ModeToggleBase: () => ModeToggleBase,
  MultiCombobox: () => MultiCombobox,
  NavigationMenuBase: () => NavigationMenuBase,
  NavigationMenuContentBase: () => NavigationMenuContentBase,
  NavigationMenuIndicatorBase: () => NavigationMenuIndicatorBase,
  NavigationMenuItemBase: () => NavigationMenuItemBase,
  NavigationMenuLinkBase: () => NavigationMenuLinkBase,
  NavigationMenuListBase: () => NavigationMenuListBase,
  NavigationMenuTriggerBase: () => NavigationMenuTriggerBase,
  NavigationMenuViewportBase: () => NavigationMenuViewportBase,
  PieChart: () => PieChart_default,
  PopoverAnchorBase: () => PopoverAnchorBase,
  PopoverBase: () => PopoverBase,
  PopoverContentBase: () => PopoverContentBase,
  PopoverTriggerBase: () => PopoverTriggerBase,
  ProgressBase: () => ProgressBase,
  ProgressCirclesBase: () => ProgressCirclesBase,
  ProgressPanelsBase: () => ProgressPanelsBase,
  ProgressSegmentsBase: () => ProgressSegmentsBase,
  ScrollAreaBase: () => ScrollAreaBase,
  ScrollBarBase: () => ScrollBarBase,
  Select: () => Select,
  SelectBase: () => SelectBase,
  SelectContentBase: () => SelectContentBase,
  SelectGroupBase: () => SelectGroupBase,
  SelectItemBase: () => SelectItemBase,
  SelectLabelBase: () => SelectLabelBase,
  SelectScrollDownButtonBase: () => SelectScrollDownButtonBase,
  SelectScrollUpButtonBase: () => SelectScrollUpButtonBase,
  SelectSeparatorBase: () => SelectSeparatorBase,
  SelectTriggerBase: () => SelectTriggerBase,
  SelectValueBase: () => SelectValueBase,
  SeparatorBase: () => SeparatorBase,
  SheetBase: () => SheetBase,
  SheetCloseBase: () => SheetCloseBase,
  SheetContentBase: () => SheetContentBase,
  SheetDescriptionBase: () => SheetDescriptionBase,
  SheetFooterBase: () => SheetFooterBase,
  SheetHeaderBase: () => SheetHeaderBase,
  SheetOverlayBase: () => SheetOverlayBase,
  SheetPortalBase: () => SheetPortalBase,
  SheetTitleBase: () => SheetTitleBase,
  SheetTriggerBase: () => SheetTriggerBase,
  SidebarBase: () => SidebarBase,
  SidebarContentBase: () => SidebarContentBase,
  SidebarFooterBase: () => SidebarFooterBase,
  SidebarGroupActionBase: () => SidebarGroupActionBase,
  SidebarGroupBase: () => SidebarGroupBase,
  SidebarGroupContentBase: () => SidebarGroupContentBase,
  SidebarGroupLabelBase: () => SidebarGroupLabelBase,
  SidebarHeaderBase: () => SidebarHeaderBase,
  SidebarInputBase: () => SidebarInputBase,
  SidebarInsetBase: () => SidebarInsetBase,
  SidebarMenuActionBase: () => SidebarMenuActionBase,
  SidebarMenuBadgeBase: () => SidebarMenuBadgeBase,
  SidebarMenuBase: () => SidebarMenuBase,
  SidebarMenuButtonBase: () => SidebarMenuButtonBase,
  SidebarMenuItemBase: () => SidebarMenuItemBase,
  SidebarMenuSkeletonBase: () => SidebarMenuSkeletonBase,
  SidebarMenuSubBase: () => SidebarMenuSubBase,
  SidebarMenuSubButtonBase: () => SidebarMenuSubButtonBase,
  SidebarMenuSubItemBase: () => SidebarMenuSubItemBase,
  SidebarProviderBase: () => SidebarProviderBase,
  SidebarRailBase: () => SidebarRailBase,
  SidebarSeparatorBase: () => SidebarSeparatorBase,
  SidebarTriggerBase: () => SidebarTriggerBase,
  SkeletonBase: () => SkeletonBase,
  SlideBase: () => SlideBase,
  SwitchBase: () => SwitchBase,
  TableBase: () => TableBase,
  TableBodyBase: () => TableBodyBase,
  TableCaptionBase: () => TableCaptionBase,
  TableCellBase: () => TableCellBase,
  TableFooterBase: () => TableFooterBase,
  TableHeadBase: () => TableHeadBase,
  TableHeaderBase: () => TableHeaderBase,
  TableRowBase: () => TableRowBase,
  TabsBase: () => TabsBase,
  TabsContentBase: () => TabsContentBase,
  TabsListBase: () => TabsListBase,
  TabsTriggerBase: () => TabsTriggerBase,
  TextAreaBase: () => TextAreaBase,
  ThemeProviderBase: () => ThemeProviderBase,
  TimePicker: () => TimePicker,
  TimePickerInput: () => TimePickerInput,
  Toaster: () => Toaster,
  TooltipBase: () => TooltipBase,
  TooltipContentBase: () => TooltipContentBase,
  TooltipProviderBase: () => TooltipProviderBase,
  TooltipTriggerBase: () => TooltipTriggerBase,
  UseSideBarBase: () => UseSideBarBase,
  badgeVariants: () => badgeVariants,
  buttonVariantsBase: () => buttonVariantsBase,
  toast: () => toast,
  useDrag: () => useDrag,
  useIsMobile: () => useIsMobile,
  useTheme: () => useTheme
});
module.exports = __toCommonJS(index_exports);

// src/components/ui/AlertDialogBase.tsx
var React2 = __toESM(require("react"));
var AlertDialogPrimitive = __toESM(require("@radix-ui/react-alert-dialog"));

// src/lib/utils.ts
var import_clsx = require("clsx");
var import_tailwind_merge = require("tailwind-merge");
function cn(...inputs) {
  return (0, import_tailwind_merge.twMerge)((0, import_clsx.clsx)(inputs));
}

// src/components/ui/ButtonBase.tsx
var React = __toESM(require("react"));
var import_react_slot = require("@radix-ui/react-slot");
var import_class_variance_authority = require("class-variance-authority");
var import_jsx_runtime = require("react/jsx-runtime");
var buttonVariantsBase = (0, import_class_variance_authority.cva)(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive: "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline: "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary: "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
var ButtonBase = React.forwardRef(
  ({ className, variant, size, asChild = false, testid = `button-${variant ?? "default"}`, ...props }, ref) => {
    const Comp = asChild ? import_react_slot.Slot : "button";
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      Comp,
      {
        className: cn(buttonVariantsBase({ variant, size, className })),
        ref,
        "data-testid": testid ?? `button-${variant ?? "default"}`,
        ...props
      }
    );
  }
);
ButtonBase.displayName = "Button";
var ButtonGroupBase = React.forwardRef(
  ({ className, children, orientation = "horizontal", ...props }, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "div",
      {
        ref,
        className: cn(
          "inline-flex",
          orientation === "vertical" ? "flex-col" : "flex-row",
          "rounded-md overflow-hidden isolate",
          className
        ),
        ...props,
        children: React.Children.map(children, (child, index) => {
          if (!React.isValidElement(child)) return child;
          const typedChild = child;
          return React.cloneElement(typedChild, {
            className: cn(
              typedChild.props.className,
              "rounded-none border-0",
              index === 0 && orientation === "horizontal" && "rounded-l-md",
              index === 0 && orientation === "vertical" && "rounded-t-md",
              index === React.Children.count(children) - 1 && orientation === "horizontal" && "rounded-r-md",
              index === React.Children.count(children) - 1 && orientation === "vertical" && "rounded-b-md"
            )
          });
        })
      }
    );
  }
);
ButtonGroupBase.displayName = "ButtonGroup";

// src/components/ui/AlertDialogBase.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var AlertDialogBase = AlertDialogPrimitive.Root;
var AlertDialogTriggerBase = AlertDialogPrimitive.Trigger;
var AlertDialogPortalBase = AlertDialogPrimitive.Portal;
var AlertDialogOverlayBase = React2.forwardRef(({ className, testid = "alertdialog-overlay", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  AlertDialogPrimitive.Overlay,
  {
    className: cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    "data-testid": testid,
    ...props,
    ref
  }
));
AlertDialogOverlayBase.displayName = AlertDialogPrimitive.Overlay.displayName;
var AlertDialogContentBase = React2.forwardRef(({ className, testid = "alertdialog-content", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(AlertDialogPortalBase, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(AlertDialogOverlayBase, {}),
  /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    AlertDialogPrimitive.Content,
    {
      ref,
      className: cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      ),
      "data-testid": testid,
      ...props
    }
  )
] }));
AlertDialogContentBase.displayName = AlertDialogPrimitive.Content.displayName;
var AlertDialogHeaderBase = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    ),
    ...props
  }
);
AlertDialogHeaderBase.displayName = "AlertDialogHeaderBase";
var AlertDialogFooterBase = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end",
      className
    ),
    ...props
  }
);
AlertDialogFooterBase.displayName = "AlertDialogFooterBase";
var AlertDialogTitleBase = React2.forwardRef(({ className, testid = "alertdialog-title", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  AlertDialogPrimitive.Title,
  {
    ref,
    className: cn("text-lg font-semibold", className),
    "data-testid": testid,
    ...props
  }
));
AlertDialogTitleBase.displayName = AlertDialogPrimitive.Title.displayName;
var AlertDialogDescriptionBase = React2.forwardRef(({ className, testid = "alertdialog-description", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  AlertDialogPrimitive.Description,
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    "data-testid": testid,
    ...props
  }
));
AlertDialogDescriptionBase.displayName = AlertDialogPrimitive.Description.displayName;
var AlertDialogActionBase = React2.forwardRef(({ className, testid = "alertdialog-action", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  AlertDialogPrimitive.Action,
  {
    ref,
    className: cn(buttonVariantsBase(), className),
    "data-testid": testid,
    ...props
  }
));
AlertDialogActionBase.displayName = AlertDialogPrimitive.Action.displayName;
var AlertDialogCancelBase = React2.forwardRef(({ className, testid = "alertdialog-cancel", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  AlertDialogPrimitive.Cancel,
  {
    ref,
    className: cn(buttonVariantsBase({ variant: "outline" }), className),
    "data-testid": testid,
    ...props
  }
));
AlertDialogCancelBase.displayName = AlertDialogPrimitive.Cancel.displayName;

// src/components/ui/AvatarBase.tsx
var React3 = __toESM(require("react"));
var AvatarPrimitive = __toESM(require("@radix-ui/react-avatar"));
var import_jsx_runtime3 = require("react/jsx-runtime");
var AvatarBase = React3.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
  AvatarPrimitive.Root,
  {
    ref,
    className: cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    ),
    ...props
  }
));
AvatarBase.displayName = AvatarPrimitive.Root.displayName;
var AvatarImageBase = React3.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
  AvatarPrimitive.Image,
  {
    ref,
    className: cn("aspect-square h-full w-full", className),
    ...props
  }
));
AvatarImageBase.displayName = AvatarPrimitive.Image.displayName;
var AvatarFallbackBase = React3.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
  AvatarPrimitive.Fallback,
  {
    ref,
    className: cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    ),
    ...props
  }
));
AvatarFallbackBase.displayName = AvatarPrimitive.Fallback.displayName;

// src/components/ui/BadgeBase.tsx
var import_react_slot2 = require("@radix-ui/react-slot");
var import_class_variance_authority2 = require("class-variance-authority");
var import_jsx_runtime4 = require("react/jsx-runtime");
var tailwindColors = {
  // Red
  "red-50": "#fef2f2",
  "red-100": "#fee2e2",
  "red-200": "#fecaca",
  "red-300": "#fca5a5",
  "red-400": "#f87171",
  "red-500": "#ef4444",
  "red-600": "#dc2626",
  "red-700": "#b91c1c",
  "red-800": "#991b1b",
  "red-900": "#7f1d1d",
  // Orange
  "orange-50": "#fff7ed",
  "orange-100": "#ffedd5",
  "orange-200": "#fed7aa",
  "orange-300": "#fdba74",
  "orange-400": "#fb923c",
  "orange-500": "#f97316",
  "orange-600": "#ea580c",
  "orange-700": "#c2410c",
  "orange-800": "#9a3412",
  "orange-900": "#7c2d12",
  // Yellow
  "yellow-50": "#fefce8",
  "yellow-100": "#fef3c7",
  "yellow-200": "#fde68a",
  "yellow-300": "#fcd34d",
  "yellow-400": "#fbbf24",
  "yellow-500": "#f59e0b",
  "yellow-600": "#d97706",
  "yellow-700": "#b45309",
  "yellow-800": "#92400e",
  "yellow-900": "#78350f",
  // Green
  "green-50": "#f0fdf4",
  "green-100": "#dcfce7",
  "green-200": "#bbf7d0",
  "green-300": "#86efac",
  "green-400": "#4ade80",
  "green-500": "#22c55e",
  "green-600": "#16a34a",
  "green-700": "#15803d",
  "green-800": "#166534",
  "green-900": "#14532d",
  // Blue
  "blue-50": "#eff6ff",
  "blue-100": "#dbeafe",
  "blue-200": "#bfdbfe",
  "blue-300": "#93c5fd",
  "blue-400": "#60a5fa",
  "blue-500": "#3b82f6",
  "blue-600": "#2563eb",
  "blue-700": "#1d4ed8",
  "blue-800": "#1e40af",
  "blue-900": "#1e3a8a",
  // Purple
  "purple-50": "#faf5ff",
  "purple-100": "#f3e8ff",
  "purple-200": "#e9d5ff",
  "purple-300": "#d8b4fe",
  "purple-400": "#c084fc",
  "purple-500": "#a855f7",
  "purple-600": "#9333ea",
  "purple-700": "#7c3aed",
  "purple-800": "#6b21a8",
  "purple-900": "#581c87",
  // Pink
  "pink-50": "#fdf2f8",
  "pink-100": "#fce7f3",
  "pink-200": "#fbcfe8",
  "pink-300": "#f9a8d4",
  "pink-400": "#f472b6",
  "pink-500": "#ec4899",
  "pink-600": "#db2777",
  "pink-700": "#be185d",
  "pink-800": "#9d174d",
  "pink-900": "#831843",
  // Gray
  "gray-50": "#f9fafb",
  "gray-100": "#f3f4f6",
  "gray-200": "#e5e7eb",
  "gray-300": "#d1d5db",
  "gray-400": "#9ca3af",
  "gray-500": "#6b7280",
  "gray-600": "#4b5563",
  "gray-700": "#374151",
  "gray-800": "#1f2937",
  "gray-900": "#111827",
  // Indigo
  "indigo-50": "#eef2ff",
  "indigo-100": "#e0e7ff",
  "indigo-200": "#c7d2fe",
  "indigo-300": "#a5b4fc",
  "indigo-400": "#818cf8",
  "indigo-500": "#6366f1",
  "indigo-600": "#4f46e5",
  "indigo-700": "#4338ca",
  "indigo-800": "#3730a3",
  "indigo-900": "#312e81",
  // Teal
  "teal-50": "#f0fdfa",
  "teal-100": "#ccfbf1",
  "teal-200": "#99f6e4",
  "teal-300": "#5eead4",
  "teal-400": "#2dd4bf",
  "teal-500": "#14b8a6",
  "teal-600": "#0d9488",
  "teal-700": "#0f766e",
  "teal-800": "#115e59",
  "teal-900": "#134e4a",
  // Emerald
  "emerald-50": "#ecfdf5",
  "emerald-100": "#d1fae5",
  "emerald-200": "#a7f3d0",
  "emerald-300": "#6ee7b7",
  "emerald-400": "#34d399",
  "emerald-500": "#10b981",
  "emerald-600": "#059669",
  "emerald-700": "#047857",
  "emerald-800": "#065f46",
  "emerald-900": "#064e3b",
  // Cyan
  "cyan-50": "#ecfeff",
  "cyan-100": "#cffafe",
  "cyan-200": "#a5f3fc",
  "cyan-300": "#67e8f9",
  "cyan-400": "#22d3ee",
  "cyan-500": "#06b6d4",
  "cyan-600": "#0891b2",
  "cyan-700": "#0e7490",
  "cyan-800": "#155e75",
  "cyan-900": "#164e63"
};
var getTailwindColor = (color) => {
  if (color.startsWith("#") || color.startsWith("rgb") || color.startsWith("hsl")) {
    return color;
  }
  if (tailwindColors[color]) {
    return tailwindColors[color];
  }
  if (!color.includes("-")) {
    const defaultColor = `${color}-500`;
    if (tailwindColors[defaultColor]) {
      return tailwindColors[defaultColor];
    }
  }
  return color;
};
var badgeVariants = (0, import_class_variance_authority2.cva)(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary: "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive: "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline: "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground"
      },
      status: {
        success: "bg-green-500 border-white dark:border-zinc-900",
        desactivated: "bg-gray-400 border-white dark:border-zinc-900",
        destructive: "bg-red-500 border-white dark:border-zinc-900",
        away: "bg-yellow-400 border-white dark:border-zinc-900",
        custom: "border-white dark:border-zinc-900"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);
function BadgeBase({
  className,
  variant,
  status,
  statusColor,
  asChild = false,
  children,
  style,
  ...props
}) {
  const Comp = asChild ? import_react_slot2.Slot : "span";
  const isStatus = Boolean(status);
  const resolvedStatusColor = statusColor ? getTailwindColor(statusColor) : void 0;
  const customStyle = status === "custom" && resolvedStatusColor ? { ...style, backgroundColor: resolvedStatusColor } : style;
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    Comp,
    {
      "data-slot": "badge",
      className: cn(
        badgeVariants({ variant, status: isStatus ? status : void 0 }),
        isStatus && "absolute bottom-0 right-0 rounded-full p-0 h-4 w-4 flex items-center justify-center border-2",
        className
      ),
      style: customStyle,
      ...props,
      children: isStatus ? null : children
    }
  );
}

// src/components/ui/BreadcrumbBase.tsx
var import_react_slot3 = require("@radix-ui/react-slot");
var import_react = require("@phosphor-icons/react");
var import_jsx_runtime5 = require("react/jsx-runtime");
function BreadcrumbBase({ ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("nav", { "aria-label": "breadcrumb", "data-slot": "breadcrumb", ...props });
}
function BreadcrumbListBase({ className, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "ol",
    {
      "data-slot": "breadcrumb-list",
      className: cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      ),
      ...props
    }
  );
}
function BreadcrumbItemBase({ className, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "li",
    {
      "data-slot": "breadcrumb-item",
      className: cn("inline-flex items-center gap-1.5", className),
      ...props
    }
  );
}
function BreadcrumbLinkBase({
  asChild,
  className,
  ...props
}) {
  const Comp = asChild ? import_react_slot3.Slot : "a";
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    Comp,
    {
      "data-slot": "breadcrumb-link",
      className: cn("hover:text-foreground transition-colors", className),
      ...props
    }
  );
}
function BreadcrumbPageBase({ className, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "span",
    {
      "data-slot": "breadcrumb-page",
      role: "link",
      "aria-disabled": "true",
      "aria-current": "page",
      className: cn("text-foreground font-normal", className),
      ...props
    }
  );
}
function BreadcrumbSeparatorBase({
  children,
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "li",
    {
      "data-slot": "breadcrumb-separator",
      role: "presentation",
      "aria-hidden": "true",
      className: cn("[&>svg]:size-3.5", className),
      ...props,
      children: children ?? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react.CaretRightIcon, {})
    }
  );
}
function BreadcrumbEllipsisBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(
    "span",
    {
      "data-slot": "breadcrumb-ellipsis",
      role: "presentation",
      "aria-hidden": "true",
      className: cn("flex size-9 items-center justify-center", className),
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react.DotsThreeIcon, { className: "size-4" }),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("span", { className: "sr-only", children: "More" })
      ]
    }
  );
}

// src/components/ui/CalendarBase.tsx
var import_react2 = require("@phosphor-icons/react");
var import_react_day_picker = require("react-day-picker");
var import_jsx_runtime6 = require("react/jsx-runtime");
function CalendarBase({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
    import_react_day_picker.DayPicker,
    {
      showOutsideDays,
      className: cn("bg-background p-3", className),
      classNames: {
        months: "flex items-center flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariantsBase({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0  opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-slate-500 rounded-md w-9 font-normal text-[0.8rem] dark:text-slate-400",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-slate-100/50 [&:has([aria-selected])]:bg-slate-100 first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20 dark:[&:has([aria-selected].day-outside)]:bg-slate-800/50 dark:[&:has([aria-selected])]:bg-slate-800",
        day: cn(
          buttonVariantsBase({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected: "bg-purple text-slate-50 hover:bg-primary hover:text-slate-50 focus:bg-purple-500 focus:text-slate-50 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50 dark:hover:text-slate-900 dark:focus:bg-slate-50 dark:focus:text-slate-900",
        day_today: "bg-slate-100 text-slate-900 dark:bg-primary dark:text-slate-50",
        day_outside: "day-outside text-slate-500 opacity-50 aria-selected:bg-slate-100/50 aria-selected:text-slate-500 aria-selected:opacity-30 dark:text-slate-400 dark:aria-selected:bg-slate-800/50 dark:aria-selected:text-slate-400",
        day_disabled: "text-slate-500 opacity-50 dark:text-slate-400",
        day_range_middle: "aria-selected:bg-slate-100 aria-selected:text-slate-900 dark:aria-selected:bg-primary dark:aria-selected:text-primary",
        day_hidden: "invisible",
        ...classNames
      },
      components: {
        IconLeft: () => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_react2.CaretLeftIcon, { className: "h-4 w-4" }),
        IconRight: () => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_react2.CaretRightIcon, { className: "h-4 w-4" })
      },
      ...props
    }
  );
}
CalendarBase.displayName = "Calendar";

// src/components/ui/CardBase.tsx
var React4 = __toESM(require("react"));
var import_jsx_runtime7 = require("react/jsx-runtime");
var CardBase = React4.forwardRef(({ className, testid: dataTestId = "card-base", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
  "div",
  {
    ref,
    className: cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    ),
    "data-testid": dataTestId,
    ...props
  }
));
CardBase.displayName = "Card";
var CardHeaderBase = React4.forwardRef(({ className, testid: dataTestId = "card-header", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
  "div",
  {
    ref,
    className: cn("flex flex-col space-y-1.5 p-6", className),
    "data-testid": dataTestId,
    ...props
  }
));
CardHeaderBase.displayName = "CardHeader";
var CardTitleBase = React4.forwardRef(({ className, testid: dataTestId = "card-title", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
  "div",
  {
    ref,
    className: cn("font-semibold leading-none tracking-tight", className),
    "data-testid": dataTestId,
    ...props
  }
));
CardTitleBase.displayName = "CardTitle";
var CardDescriptionBase = React4.forwardRef(({ className, testid: dataTestId = "card-description", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
  "div",
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    "data-testid": dataTestId,
    ...props
  }
));
CardDescriptionBase.displayName = "CardDescription";
var CardContentBase = React4.forwardRef(({ className, testid: dataTestId = "card-content", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { ref, className: cn("p-6 pt-0", className), "data-testid": dataTestId, ...props }));
CardContentBase.displayName = "CardContent";
var CardFooterBase = React4.forwardRef(({ className, testid: dataTestId = "card-footer", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
  "div",
  {
    ref,
    className: cn("flex items-center p-6 pt-0", className),
    "data-testid": dataTestId,
    ...props
  }
));
CardFooterBase.displayName = "CardFooter";

// src/components/ui/CarouselBase.tsx
var React5 = __toESM(require("react"));
var import_embla_carousel_react = __toESM(require("embla-carousel-react"));
var import_react3 = require("@phosphor-icons/react");
var import_jsx_runtime8 = require("react/jsx-runtime");
var CarouselContext = React5.createContext(null);
function useCarousel() {
  const context = React5.useContext(CarouselContext);
  if (!context) {
    throw new Error("useCarousel must be used within a <CarouselBase />");
  }
  return context;
}
function CarouselBase({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}) {
  const [carouselRef, api] = (0, import_embla_carousel_react.default)(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y"
    },
    plugins
  );
  const [canScrollPrev, setCanScrollPrev] = React5.useState(false);
  const [canScrollNext, setCanScrollNext] = React5.useState(false);
  const onSelect = React5.useCallback((api2) => {
    if (!api2) return;
    setCanScrollPrev(api2.canScrollPrev());
    setCanScrollNext(api2.canScrollNext());
  }, []);
  const scrollPrev = React5.useCallback(() => {
    api?.scrollPrev();
  }, [api]);
  const scrollNext = React5.useCallback(() => {
    api?.scrollNext();
  }, [api]);
  const handleKeyDown = React5.useCallback(
    (event) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault();
        scrollPrev();
      } else if (event.key === "ArrowRight") {
        event.preventDefault();
        scrollNext();
      }
    },
    [scrollPrev, scrollNext]
  );
  React5.useEffect(() => {
    if (!api || !setApi) return;
    setApi(api);
  }, [api, setApi]);
  React5.useEffect(() => {
    if (!api) return;
    onSelect(api);
    api.on("reInit", onSelect);
    api.on("select", onSelect);
    return () => {
      api?.off("select", onSelect);
    };
  }, [api, onSelect]);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    CarouselContext.Provider,
    {
      value: {
        carouselRef,
        api,
        opts,
        orientation: orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        "div",
        {
          onKeyDownCapture: handleKeyDown,
          className: cn("relative", className),
          role: "region",
          "aria-roledescription": "carousel",
          "data-slot": "carousel",
          ...props,
          children
        }
      )
    }
  );
}
function CarouselContentBase({ className, ...props }) {
  const { carouselRef, orientation } = useCarousel();
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    "div",
    {
      ref: carouselRef,
      className: "overflow-hidden",
      "data-slot": "carousel-content",
      children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        "div",
        {
          className: cn(
            "flex",
            orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
            className
          ),
          ...props
        }
      )
    }
  );
}
function CarouselItemBase({ className, ...props }) {
  const { orientation } = useCarousel();
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    "div",
    {
      role: "group",
      "aria-roledescription": "slide",
      "data-slot": "carousel-item",
      className: cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      ),
      ...props
    }
  );
}
function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(
    ButtonBase,
    {
      "data-slot": "carousel-previous",
      variant,
      size,
      className: cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal" ? "top-1/2 -left-12 -translate-y-1/2" : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      ),
      disabled: !canScrollPrev,
      onClick: scrollPrev,
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_react3.ArrowLeftIcon, {}),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "sr-only", children: "Previous slide" })
      ]
    }
  );
}
function CarouselNextBase({
  className,
  variant = "outline",
  size = "icon",
  ...props
}) {
  const { orientation, scrollNext, canScrollNext } = useCarousel();
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(
    ButtonBase,
    {
      "data-slot": "carousel-next",
      variant,
      size,
      className: cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal" ? "top-1/2 -right-12 -translate-y-1/2" : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      ),
      disabled: !canScrollNext,
      onClick: scrollNext,
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_react3.ArrowRightIcon, {}),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "sr-only", children: "Next slide" })
      ]
    }
  );
}

// src/components/ui/CheckBoxBase.tsx
var React6 = __toESM(require("react"));
var CheckboxPrimitive = __toESM(require("@radix-ui/react-checkbox"));
var import_react4 = require("@phosphor-icons/react");
var import_framer_motion = require("framer-motion");
var import_jsx_runtime9 = require("react/jsx-runtime");
var CheckboxBase = React6.forwardRef(({ className, testid: dataTestId = "checkbox-base", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
  CheckboxPrimitive.Root,
  {
    ref,
    className: cn(
      "peer h-4 w-4 shrink-0 rounded-md border border-primary shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground transition-colors",
      className
    ),
    "data-testid": dataTestId,
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(CheckboxPrimitive.Indicator, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
      import_framer_motion.motion.div,
      {
        initial: { scale: 0, opacity: 0, rotate: -90 },
        animate: { scale: 1, opacity: 1, rotate: 0 },
        exit: { scale: 0, opacity: 0, rotate: 90 },
        transition: { type: "spring", stiffness: 500, damping: 30 },
        className: "flex items-center justify-center text-current",
        children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(import_react4.CheckIcon, { className: "h-4 w-4", weight: "bold" })
      }
    ) })
  }
));
CheckboxBase.displayName = CheckboxPrimitive.Root.displayName;

// src/components/ui/CollapsibleBase.tsx
var React7 = __toESM(require("react"));
var CollapsiblePrimitive = __toESM(require("@radix-ui/react-collapsible"));
var import_react5 = require("@phosphor-icons/react");
var import_jsx_runtime10 = require("react/jsx-runtime");
var CollapsibleBase = React7.forwardRef(({ ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(CollapsiblePrimitive.Root, { ref, "data-slot": "collapsible", ...props });
});
CollapsibleBase.displayName = CollapsiblePrimitive.Root.displayName;
var CollapsibleTriggerBase = React7.forwardRef(({ className, children, leftIcon, showCaret = true, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
    CollapsiblePrimitive.CollapsibleTrigger,
    {
      ref,
      className: cn(
        "flex w-full items-center justify-between p-3 text-left font-medium transition-all duration-500 ease-[cubic-bezier(0.4,0,0.2,1)] hover:bg-accent hover:text-accent-foreground rounded-md outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 [&[data-state=open]_.caret-icon]:rotate-180",
        className
      ),
      "data-slot": "collapsible-trigger",
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex items-center gap-2", children: [
          leftIcon && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { className: "flex-shrink-0 [&>svg]:size-4", children: leftIcon }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { children })
        ] }),
        showCaret && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { className: "caret-icon flex-shrink-0 transition-transform duration-500 ease-[cubic-bezier(0.4,0,0.2,1)]", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(import_react5.CaretUpDownIcon, { className: "h-4 w-4" }) })
      ]
    }
  );
});
CollapsibleTriggerBase.displayName = CollapsiblePrimitive.CollapsibleTrigger.displayName;
var CollapsibleContentBase = React7.forwardRef(({ className, children, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
    CollapsiblePrimitive.CollapsibleContent,
    {
      ref,
      className: cn(
        "overflow-hidden data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down",
        className
      ),
      "data-slot": "collapsible-content",
      ...props,
      children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "pb-3 pt-1", children })
    }
  );
});
CollapsibleContentBase.displayName = CollapsiblePrimitive.CollapsibleContent.displayName;

// src/components/ui/CommandBase.tsx
var React9 = __toESM(require("react"));
var import_cmdk = require("cmdk");
var import_react7 = require("@phosphor-icons/react");
var import_framer_motion2 = require("framer-motion");

// src/components/ui/DialogBase.tsx
var React8 = __toESM(require("react"));
var DialogPrimitive = __toESM(require("@radix-ui/react-dialog"));
var import_react6 = require("@phosphor-icons/react");
var import_jsx_runtime11 = require("react/jsx-runtime");
var DialogBase = DialogPrimitive.Root;
var DialogTriggerBase = DialogPrimitive.Trigger;
var DialogPortalBase = DialogPrimitive.Portal;
var DialogCloseBase = DialogPrimitive.Close;
var DialogOverlayBase = React8.forwardRef(({ className, testid: dataTestId = "dialog-overlay", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
  DialogPrimitive.Overlay,
  {
    ref,
    className: cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    "data-testid": dataTestId,
    ...props
  }
));
DialogOverlayBase.displayName = DialogPrimitive.Overlay.displayName;
var DialogContentBase = React8.forwardRef(({ className, children, testid: dataTestId = "dialog-content", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(DialogPortalBase, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(DialogOverlayBase, {}),
  /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
    DialogPrimitive.Content,
    {
      ref,
      className: cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      ),
      "data-testid": dataTestId,
      ...props,
      children: [
        children,
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(DialogPrimitive.Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_react6.XIcon, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "sr-only", children: "Close" })
        ] })
      ]
    }
  )
] }));
DialogContentBase.displayName = DialogPrimitive.Content.displayName;
var DialogHeaderBase = React8.forwardRef(({ className, testid: dataTestId = "dialog-header", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
  "div",
  {
    ref,
    className: cn("flex flex-col space-y-1.5 text-center sm:text-left", className),
    "data-testid": dataTestId,
    ...props
  }
));
DialogHeaderBase.displayName = "DialogHeader";
var DialogFooterBase = React8.forwardRef(({ className, testid: dataTestId = "dialog-footer", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
  "div",
  {
    ref,
    className: cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className),
    "data-testid": dataTestId,
    ...props
  }
));
DialogFooterBase.displayName = "DialogFooter";
var DialogTitleBase = React8.forwardRef(({ className, testid: dataTestId = "dialog-title", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
  DialogPrimitive.Title,
  {
    ref,
    className: cn("text-lg font-semibold leading-none tracking-tight", className),
    "data-testid": dataTestId,
    ...props
  }
));
DialogTitleBase.displayName = DialogPrimitive.Title.displayName;
var DialogDescriptionBase = React8.forwardRef(({ className, testid: dataTestId = "dialog-description", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
  DialogPrimitive.Description,
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    "data-testid": dataTestId,
    ...props
  }
));
DialogDescriptionBase.displayName = DialogPrimitive.Description.displayName;

// src/components/ui/CommandBase.tsx
var import_jsx_runtime12 = require("react/jsx-runtime");
var CommandBase = React9.forwardRef(({ className, testid: dataTestId = "command-base", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
  import_cmdk.Command,
  {
    ref,
    className: cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-background text-popover-foreground",
      className
    ),
    "data-testid": dataTestId,
    ...props
  }
));
CommandBase.displayName = import_cmdk.Command.displayName;
var dialogVariants = {
  hidden: { opacity: 0, scale: 0.95, y: -20 },
  visible: { opacity: 1, scale: 1, y: 0 },
  exit: { opacity: 0, scale: 0.95, y: -20 }
};
var CommandDialogBase = ({ children, open, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogBase, { open, ...props, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_framer_motion2.AnimatePresence, { children: open && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogContentBase, { asChild: true, forceMount: true, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
    import_framer_motion2.motion.div,
    {
      initial: "hidden",
      animate: "visible",
      exit: "exit",
      variants: dialogVariants,
      transition: { duration: 0.2, ease: "easeOut" },
      className: "overflow-hidden p-0",
      children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(CommandBase, { className: "[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5", children })
    },
    "command-dialog"
  ) }) }) });
};
var CommandInputBase = React9.forwardRef(({ className, testid: dataTestId = "command-input", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "flex items-center border-b px-3", "cmdk-input-wrapper": "", children: [
  /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react7.MagnifyingGlassIcon, { className: "mr-2 h-4 w-4 shrink-0 text-primary" }),
  /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
    import_cmdk.Command.Input,
    {
      ref,
      className: cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none text-primary placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      ),
      "data-testid": dataTestId,
      ...props
    }
  )
] }));
CommandInputBase.displayName = import_cmdk.Command.Input.displayName;
var CommandListBase = React9.forwardRef(({ className, testid: dataTestId = "command-list", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
  import_cmdk.Command.List,
  {
    ref,
    className: cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className),
    "data-testid": dataTestId,
    ...props
  }
));
CommandListBase.displayName = import_cmdk.Command.List.displayName;
var CommandEmptyBase = React9.forwardRef(({ testid: dataTestId = "command-empty", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_cmdk.Command.Empty, { ref, className: "py-6 text-center text-sm", "data-testid": dataTestId, ...props }));
CommandEmptyBase.displayName = import_cmdk.Command.Empty.displayName;
var CommandGroupBase = React9.forwardRef(({ className, testid: dataTestId = "command-group", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
  import_cmdk.Command.Group,
  {
    ref,
    className: cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    ),
    "data-testid": dataTestId,
    ...props
  }
));
CommandGroupBase.displayName = import_cmdk.Command.Group.displayName;
var CommandSeparatorBase = React9.forwardRef(({ className, testid: dataTestId = "command-separator", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_cmdk.Command.Separator, { ref, className: cn("-mx-1 h-px bg-border", className), "data-testid": dataTestId, ...props }));
CommandSeparatorBase.displayName = import_cmdk.Command.Separator.displayName;
var CommandItemBase = React9.forwardRef(({ className, testid: dataTestId = "command-item", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
  import_cmdk.Command.Item,
  {
    ref,
    className: cn(
      "relative flex cursor-pointer gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-all data-[disabled=true]:pointer-events-none data-[selected=true]:bg-primary data-[selected=true]:text-background data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:scale-[1.02] active:scale-[0.98]",
      className
    ),
    "data-testid": dataTestId,
    ...props
  }
));
CommandItemBase.displayName = import_cmdk.Command.Item.displayName;
var CommandShortcutBase = ({ className, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: cn("ml-auto text-xs tracking-widest text-muted-foreground", className), ...props });
};
CommandShortcutBase.displayName = "CommandShortcut";

// src/components/ui/ContextMenuBase.tsx
var ContextMenuPrimitive = __toESM(require("@radix-ui/react-context-menu"));
var import_react8 = require("@phosphor-icons/react");
var import_jsx_runtime13 = require("react/jsx-runtime");
function ContextMenuBase(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.Root, { "data-slot": "context-menu", ...props });
}
function ContextMenuTriggerBase(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.Trigger, { "data-slot": "context-menu-trigger", ...props });
}
function ContextMenuGroupBase(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.Group, { "data-slot": "context-menu-group", ...props });
}
function ContextMenuPortalBase(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.Portal, { "data-slot": "context-menu-portal", ...props });
}
function ContextMenuSubBase(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.Sub, { "data-slot": "context-menu-sub", ...props });
}
function ContextMenuRadioGroupBase(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.RadioGroup, { "data-slot": "context-menu-radio-group", ...props });
}
function ContextMenuSubTriggerBase({
  className,
  inset,
  children,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(
    ContextMenuPrimitive.SubTrigger,
    {
      "data-slot": "context-menu-sub-trigger",
      "data-inset": inset,
      className: cn(
        "focus:outline-none",
        "focus:bg-accent focus:text-accent-foreground",
        "flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm select-none",
        "data-[inset]:pl-8",
        "[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      ),
      ...props,
      children: [
        children,
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(import_react8.CaretRightIcon, { className: "ml-auto" })
      ]
    }
  );
}
function ContextMenuSubContentBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    ContextMenuPrimitive.SubContent,
    {
      "data-slot": "context-menu-sub-content",
      className: cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out",
        "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
        "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
        "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border p-1 shadow-lg",
        className
      ),
      ...props
    }
  );
}
function ContextMenuContentBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    ContextMenuPrimitive.Content,
    {
      "data-slot": "context-menu-content",
      className: cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out",
        "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
        "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
        "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        "z-50 max-h-[var(--radix-context-menu-content-available-height)] min-w-[8rem]",
        "overflow-x-hidden overflow-y-auto rounded-md border border-border p-1 shadow-md",
        className
      ),
      ...props
    }
  ) });
}
function ContextMenuItemBase({
  className,
  inset,
  variant = "default",
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    ContextMenuPrimitive.Item,
    {
      "data-slot": "context-menu-item",
      "data-inset": inset,
      "data-variant": variant,
      className: cn(
        "focus:outline-none",
        "focus:bg-accent focus:text-accent-foreground",
        "data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20",
        "data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive",
        "[&_svg:not([class*='text-'])]:text-muted-foreground",
        "relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm select-none",
        "data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        "data-[inset]:pl-8",
        "[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      ),
      ...props
    }
  );
}
function ContextMenuCheckboxItemBase({
  className,
  children,
  checked,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(
    ContextMenuPrimitive.CheckboxItem,
    {
      "data-slot": "context-menu-checkbox-item",
      className: cn(
        "focus:outline-none",
        "focus:bg-accent focus:text-accent-foreground",
        "relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm select-none",
        "data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        "[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      ),
      checked,
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { className: "pointer-events-none absolute left-2 flex size-3.5 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.ItemIndicator, { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(import_react8.CheckIcon, { className: "size-4" }) }) }),
        children
      ]
    }
  );
}
function ContextMenuRadioItemBase({
  className,
  children,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(
    ContextMenuPrimitive.RadioItem,
    {
      "data-slot": "context-menu-radio-item",
      className: cn(
        "focus:outline-none",
        "focus:bg-accent focus:text-accent-foreground",
        "relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm select-none",
        "data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        "[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      ),
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { className: "pointer-events-none absolute left-2 flex size-3.5 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContextMenuPrimitive.ItemIndicator, { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(import_react8.CircleIcon, { className: "size-2 fill-current" }) }) }),
        children
      ]
    }
  );
}
function ContextMenuLabelBase({
  className,
  inset,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    ContextMenuPrimitive.Label,
    {
      "data-slot": "context-menu-label",
      "data-inset": inset,
      className: cn("text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8", className),
      ...props
    }
  );
}
function ContextMenuSeparatorBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    ContextMenuPrimitive.Separator,
    {
      "data-slot": "context-menu-separator",
      className: cn("bg-border -mx-1 my-1 h-px", className),
      ...props
    }
  );
}
function ContextMenuShortcutBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    "span",
    {
      "data-slot": "context-menu-shortcut",
      className: cn("text-muted-foreground ml-auto text-xs tracking-widest", className),
      ...props
    }
  );
}

// src/components/ui/DrawerBase.tsx
var import_vaul = require("vaul");
var import_jsx_runtime14 = require("react/jsx-runtime");
function DrawerBase({
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_vaul.Drawer.Root, { "data-slot": "drawer", ...props });
}
function DrawerTriggerBase({
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_vaul.Drawer.Trigger, { "data-slot": "drawer-trigger", ...props });
}
function DrawerPortalBase({
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_vaul.Drawer.Portal, { "data-slot": "drawer-portal", ...props });
}
function DrawerCloseBase({
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_vaul.Drawer.Close, { "data-slot": "drawer-close", ...props });
}
function DrawerOverlayBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    import_vaul.Drawer.Overlay,
    {
      "data-slot": "drawer-overlay",
      className: cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      ),
      ...props
    }
  );
}
function DrawerContentBase({
  className,
  children,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(DrawerPortalBase, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(DrawerOverlayBase, {}),
    /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(
      import_vaul.Drawer.Content,
      {
        "data-slot": "drawer-content",
        className: cn(
          "group/drawer-content bg-background fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm",
          className
        ),
        ...props,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" }),
          children
        ]
      }
    )
  ] });
}
function DrawerHeaderBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    "div",
    {
      "data-slot": "drawer-header",
      className: cn(
        "flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left",
        className
      ),
      ...props
    }
  );
}
function DrawerFooterBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    "div",
    {
      "data-slot": "drawer-footer",
      className: cn("mt-auto flex flex-col gap-2 p-4", className),
      ...props
    }
  );
}
function DrawerTitleBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    import_vaul.Drawer.Title,
    {
      "data-slot": "drawer-title",
      className: cn("text-foreground font-semibold", className),
      ...props
    }
  );
}
function DrawerDescriptionBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    import_vaul.Drawer.Description,
    {
      "data-slot": "drawer-description",
      className: cn("text-muted-foreground text-sm", className),
      ...props
    }
  );
}

// src/components/ui/DropDownMenuBase.tsx
var React10 = __toESM(require("react"));
var DropdownMenuPrimitive = __toESM(require("@radix-ui/react-dropdown-menu"));
var import_react9 = require("@phosphor-icons/react");
var import_framer_motion3 = require("framer-motion");
var import_jsx_runtime15 = require("react/jsx-runtime");
var DropDownMenuBase = DropdownMenuPrimitive.Root;
var DropDownMenuTriggerBase = DropdownMenuPrimitive.Trigger;
var DropDownMenuGroupBase = DropdownMenuPrimitive.Group;
var DropDownMenuPortalBase = DropdownMenuPrimitive.Portal;
var DropDownMenuSubBase = DropdownMenuPrimitive.Sub;
var DropDownMenuRadioGroupBase = DropdownMenuPrimitive.RadioGroup;
var DropDownMenuSubTriggerBase = React10.forwardRef(({ className, inset, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
  DropdownMenuPrimitive.SubTrigger,
  {
    ref,
    className: cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    ),
    ...props,
    children: [
      children,
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_react9.CaretRightIcon, { className: "ml-auto" })
    ]
  }
));
DropDownMenuSubTriggerBase.displayName = DropdownMenuPrimitive.SubTrigger.displayName;
var DropDownMenuSubContentBase = React10.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
  DropdownMenuPrimitive.SubContent,
  {
    ref,
    className: cn(
      " min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
));
var DropDownMenuContentBase = React10.forwardRef(({ className, sideOffset = 4, testid: dataTestId = "dropdown-content", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(DropdownMenuPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
  DropdownMenuPrimitive.Content,
  {
    sideOffset,
    forceMount: true,
    ref,
    className: cn("z-[9999] p-0", className),
    "data-testid": dataTestId,
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_framer_motion3.AnimatePresence, { children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
      import_framer_motion3.motion.div,
      {
        initial: { opacity: 0, scale: 0.95, y: 5 },
        animate: { opacity: 1, scale: 1, y: 0 },
        exit: { opacity: 0, scale: 0.95, y: 5 },
        transition: { duration: 0.2, ease: "easeOut" },
        className: cn(
          "min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
          className
        ),
        children: props.children
      }
    ) })
  }
) }));
DropDownMenuContentBase.displayName = DropdownMenuPrimitive.Content.displayName;
var DropDownMenuItemBase = React10.forwardRef(({ className, inset, leftIcon, rightIcon, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
  DropdownMenuPrimitive.Item,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center justify-between rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    ),
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center gap-2", children: [
        leftIcon && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "[&>svg]:size-4", children: leftIcon }),
        children
      ] }),
      rightIcon && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "[&>svg]:size-4", children: rightIcon })
    ]
  }
));
DropDownMenuItemBase.displayName = DropdownMenuPrimitive.Item.displayName;
var DropDownMenuCheckboxItemBase = React10.forwardRef(({ className, children, checked, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
  DropdownMenuPrimitive.CheckboxItem,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    checked,
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(DropdownMenuPrimitive.ItemIndicator, { children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_react9.CheckIcon, { className: "h-4 w-4" }) }) }),
      children
    ]
  }
));
DropDownMenuCheckboxItemBase.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;
var DropDownMenuRadioItemBase = React10.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
  DropdownMenuPrimitive.RadioItem,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(DropdownMenuPrimitive.ItemIndicator, { children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_react9.CircleIcon, { className: "h-2 w-2 fill-current" }) }) }),
      children
    ]
  }
));
DropDownMenuRadioItemBase.displayName = DropdownMenuPrimitive.RadioItem.displayName;
var DropDownMenuLabelBase = React10.forwardRef(({ className, inset, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
  DropdownMenuPrimitive.Label,
  {
    ref,
    className: cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    ),
    ...props
  }
));
DropDownMenuLabelBase.displayName = DropdownMenuPrimitive.Label.displayName;
var DropDownMenuSeparatorBase = React10.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
  DropdownMenuPrimitive.Separator,
  {
    ref,
    className: cn("-mx-1 my-1 h-px bg-muted", className),
    ...props
  }
));
DropDownMenuSeparatorBase.displayName = DropdownMenuPrimitive.Separator.displayName;
var DropDownMenuShortcutBase = ({
  className,
  ...props
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    "span",
    {
      className: cn("ml-auto text-xs tracking-widest opacity-60", className),
      ...props
    }
  );
};
DropDownMenuShortcutBase.displayName = "DropDownMenuShortcutBase";

// src/components/ui/FilterBase.tsx
var import_react15 = require("react");
var import_react_router_dom = require("react-router-dom");

// src/components/ui/InputBase.tsx
var React12 = __toESM(require("react"));

// src/components/ui/LabelBase.tsx
var React11 = __toESM(require("react"));
var import_react_label = require("@radix-ui/react-label");
var import_react_slot4 = require("@radix-ui/react-slot");
var import_jsx_runtime16 = require("react/jsx-runtime");
var LabelBase = React11.forwardRef(
  ({ className, asChild = false, testid = "label-base", ...props }, ref) => {
    const Comp = asChild ? import_react_slot4.Slot : "label";
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_react_label.Label, { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
      Comp,
      {
        ref,
        className: cn(
          "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
          className
        ),
        "data-testid": testid,
        ...props
      }
    ) });
  }
);
LabelBase.displayName = "LabelBase";
var LabelBase_default = LabelBase;

// src/components/ui/InputBase.tsx
var import_jsx_runtime17 = require("react/jsx-runtime");
var InputBase = React12.forwardRef(
  ({
    className,
    type = "text",
    label,
    labelClassname,
    leftIcon,
    rightIcon,
    "data-testid": dataTestId,
    ...props
  }, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex flex-col w-full min-w-[150px]", children: [
      label && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(LabelBase_default, { className: labelClassname, children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
        "div",
        {
          className: cn(
            "flex items-center rounded-md transition focus-within:ring-1 focus-within:ring-ring focus-within:border-ring bg-background overflow-hidden",
            type !== "file" && "border border-input"
          ),
          children: [
            leftIcon && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "flex items-center justify-center px-2", children: leftIcon }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
              "input",
              {
                type,
                className: cn(
                  "w-full flex-1 text-sm py-1.5 px-3 focus:outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50 bg-background text-foreground",
                  className
                ),
                ref,
                "data-testid": dataTestId ?? "input-base",
                ...props
              }
            ),
            rightIcon && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "flex items-center justify-center px-2", children: rightIcon })
          ]
        }
      )
    ] });
  }
);
InputBase.displayName = "Input";

// src/components/selects/Combobox.tsx
var import_react12 = require("react");

// src/components/ui/PopoverBase.tsx
var React13 = __toESM(require("react"));
var PopoverPrimitive = __toESM(require("@radix-ui/react-popover"));
var import_jsx_runtime18 = require("react/jsx-runtime");
var PopoverBase = PopoverPrimitive.Root;
var PopoverTriggerBase = PopoverPrimitive.Trigger;
var PopoverAnchorBase = PopoverPrimitive.Anchor;
var PopoverContentBase = React13.forwardRef(({ className, align = "center", sideOffset = 4, testid: dataTestId = "popover-content", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PopoverPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
  PopoverPrimitive.Content,
  {
    ref,
    align,
    sideOffset,
    className: cn(
      "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    "data-testid": dataTestId,
    ...props
  }
) }));
PopoverContentBase.displayName = PopoverPrimitive.Content.displayName;

// src/components/selects/ComboboxBase.tsx
var import_react10 = require("@phosphor-icons/react");
var import_react11 = require("react");
var import_jsx_runtime19 = require("react/jsx-runtime");
function ComboboxBase({
  items,
  renderSelected,
  handleSelection,
  checkIsSelected,
  searchPlaceholder,
  errorMessage,
  testIds = {}
}) {
  const [open, setOpen] = (0, import_react11.useState)(false);
  return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
    "div",
    {
      className: "col-span-1 w-full",
      "data-testid": testIds.root ?? "combobox-base-root",
      children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(PopoverBase, { open, onOpenChange: setOpen, modal: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          PopoverTriggerBase,
          {
            asChild: true,
            className: "flex w-full justify-between dark:bg-[hsl(231,15%,19%)]",
            children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
              ButtonBase,
              {
                variant: "outline",
                role: "combobox",
                "aria-expanded": open,
                className: cn(
                  "flex items-start gap-2 justify-between h-full",
                  errorMessage && "border-red-500"
                ),
                "data-testid": testIds.trigger ?? "combobox-trigger",
                children: [
                  renderSelected,
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(import_react10.CaretDownIcon, { size: 16, className: "mt-0.5" })
                ]
              }
            )
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          PopoverContentBase,
          {
            className: "max-h-[--radix-popover-content-available-height] w-[--radix-popover-trigger-width] p-0 border-none",
            "data-testid": testIds.popover ?? "combobox-popover",
            children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
              CommandBase,
              {
                className: "dark:text-white",
                "data-testid": testIds.command ?? "combobox-command",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    CommandInputBase,
                    {
                      tabIndex: -1,
                      placeholder: searchPlaceholder ?? "Busque uma op\xE7\xE3o...",
                      "data-testid": testIds.search ?? "combobox-search"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(CommandListBase, { "data-testid": testIds.list ?? "combobox-list", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(CommandEmptyBase, { "data-testid": testIds.empty ?? "combobox-empty", children: "Nenhum dado encontrado" }),
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(CommandGroupBase, { "data-testid": testIds.group ?? "combobox-group", children: items.map((item) => {
                      const isSelected = checkIsSelected(item.value);
                      return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
                        CommandItemBase,
                        {
                          keywords: [item.label],
                          value: item.value,
                          onSelect: (value) => {
                            handleSelection(value);
                            setOpen(false);
                          },
                          "data-testid": testIds.option ?? "combobox-option",
                          children: [
                            item.label,
                            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                              import_react10.CheckIcon,
                              {
                                className: cn(
                                  "ml-auto",
                                  isSelected ? "opacity-100" : "opacity-0"
                                ),
                                "data-testid": isSelected ? testIds.check ?? "combobox-option-check" : void 0
                              }
                            )
                          ]
                        },
                        item.value
                      );
                    }) })
                  ] })
                ]
              }
            )
          }
        )
      ] })
    }
  );
}

// src/components/selects/Combobox.tsx
var import_jsx_runtime20 = require("react/jsx-runtime");
function Combobox({
  items,
  selected,
  onChange,
  className,
  placeholder,
  searchPlaceholder,
  label,
  labelClassname,
  testIds
}) {
  const selectedItem = items.find((item) => item.value === selected);
  const renderSelected = (0, import_react12.useMemo)(() => {
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
      "span",
      {
        "data-testid": testIds?.selected ?? "combobox-selected",
        className: cn("truncate", !selectedItem && "text-gray-500"),
        children: selectedItem?.label ?? placeholder ?? "Selecione uma op\xE7\xE3o..."
      }
    );
  }, [placeholder, selectedItem, testIds?.selected]);
  const checkIsSelected = (0, import_react12.useCallback)(
    (value) => selected == null ? false : selected == value,
    [selected]
  );
  const handleSelection = (0, import_react12.useCallback)(
    (value) => {
      onChange(value === selected ? null : value);
    },
    [selected, onChange]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: cn("flex flex-col gap-1 w-full min-w-[150px]", className), children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(LabelBase_default, { className: labelClassname, children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
      ComboboxBase,
      {
        items,
        renderSelected,
        handleSelection,
        checkIsSelected,
        searchPlaceholder,
        testIds
      }
    )
  ] });
}

// src/components/selects/MultiCombobox.tsx
var import_react13 = require("react");
var import_react14 = require("@phosphor-icons/react");
var import_jsx_runtime21 = require("react/jsx-runtime");
function MultiCombobox({
  items,
  selected,
  onChange,
  className,
  placeholder,
  searchPlaceholder,
  label,
  labelClassname,
  testIds = {}
}) {
  const selectedItems = items.filter((item) => selected.includes(item.value));
  const checkIsSelected = (0, import_react13.useCallback)(
    (value) => selected.includes(value),
    [selected]
  );
  const handleSelection = (0, import_react13.useCallback)(
    (value) => {
      const isSelected = selected.includes(value);
      if (isSelected) {
        onChange(selected.filter((item) => item !== value));
      } else {
        onChange([...selected, value]);
      }
    },
    [selected, onChange]
  );
  const renderSelected = (0, import_react13.useMemo)(() => {
    if (selectedItems.length === 0) {
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
        "span",
        {
          "data-testid": testIds.emptyPlaceholder ?? "combobox-selected-empty",
          className: "text-gray-500",
          children: placeholder ?? "Selecione uma op\xE7\xE3o..."
        }
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
      "div",
      {
        "data-testid": testIds.selectedWrapper ?? "combobox-selected-wrapper",
        className: "flex w-full flex-wrap gap-2",
        children: selectedItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
          "div",
          {
            className: "flex items-center gap-1 rounded-md border p-1",
            "data-testid": testIds.selectedItem?.(item.value) ?? `combobox-selected-${item.value}`,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "whitespace-break-spaces text-xs", children: item.label }),
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                "span",
                {
                  role: "button",
                  tabIndex: 0,
                  onClick: (e) => {
                    e.stopPropagation();
                    handleSelection(item.value);
                  },
                  className: "cursor-pointer p-0 m-0 text-xs flex items-center justify-center hover:text-red-500 hover:scale-110 transition-all",
                  children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(import_react14.XIcon, { size: 14 })
                }
              )
            ]
          },
          item.value
        ))
      }
    );
  }, [handleSelection, placeholder, selectedItems, testIds]);
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
    "div",
    {
      className: cn("flex flex-col gap-1 w-full min-w-[150px]", className),
      "data-testid": testIds.root ?? "multi-combobox-root",
      children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          LabelBase_default,
          {
            className: labelClassname,
            "data-testid": testIds.label ?? "multi-combobox-label",
            children: label
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          ComboboxBase,
          {
            items,
            renderSelected,
            handleSelection,
            checkIsSelected,
            searchPlaceholder
          }
        )
      ]
    }
  );
}

// src/components/ui/TooltipBase.tsx
var React14 = __toESM(require("react"));
var TooltipPrimitive = __toESM(require("@radix-ui/react-tooltip"));
var import_jsx_runtime22 = require("react/jsx-runtime");
var TooltipProviderBase = TooltipPrimitive.Provider;
var TooltipBase = TooltipPrimitive.Root;
var TooltipTriggerBase = TooltipPrimitive.Trigger;
var TooltipContentBase = React14.forwardRef(({ className, sideOffset = 4, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(TooltipPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
  TooltipPrimitive.Content,
  {
    ref,
    sideOffset,
    className: cn(
      "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
) }));
TooltipContentBase.displayName = TooltipPrimitive.Content.displayName;

// src/components/ui/FilterBase.tsx
var import_react16 = require("@phosphor-icons/react");
var import_colors = __toESM(require_colors2());
var import_jsx_runtime23 = require("react/jsx-runtime");

// src/components/ui/HoverCardBase.tsx
var HoverCardPrimitive = __toESM(require("@radix-ui/react-hover-card"));
var import_jsx_runtime24 = require("react/jsx-runtime");
function HoverCardBase(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(HoverCardPrimitive.Root, { ...props });
}
function HoverCardTriggerBase(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(HoverCardPrimitive.Trigger, { ...props });
}
function HoverCardContentBase({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(HoverCardPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
    HoverCardPrimitive.Content,
    {
      align,
      sideOffset,
      className: cn(
        "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none",
        "data-[state=open]:animate-in data-[state=closed]:animate-out",
        "data-[state=open]:fade-in-0 data-[state=closed]:fade-out-0",
        "data-[state=open]:zoom-in-95 data-[state=closed]:zoom-out-95",
        "data-[side=bottom]:slide-in-from-top-2",
        "data-[side=left]:slide-in-from-right-2",
        "data-[side=right]:slide-in-from-left-2",
        "data-[side=top]:slide-in-from-bottom-2",
        className
      ),
      ...props
    }
  ) });
}

// src/components/ui/Input-OTP-Base.tsx
var React15 = __toESM(require("react"));
var import_input_otp = require("input-otp");
var import_react17 = require("@phosphor-icons/react");
var import_jsx_runtime25 = require("react/jsx-runtime");
function InputOTPBase({
  className,
  containerClassName,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
    import_input_otp.OTPInput,
    {
      "data-slot": "input-otp",
      containerClassName: cn(
        "flex items-center gap-2 has-disabled:opacity-50",
        containerClassName
      ),
      className: cn("disabled:cursor-not-allowed", className),
      ...props
    }
  );
}
function InputOTPGroupBase({ className, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
    "div",
    {
      "data-slot": "input-otp-group",
      className: cn("flex items-center", className),
      ...props
    }
  );
}
function InputOTPSlotBase({
  index,
  className,
  ...props
}) {
  const inputOTPContext = React15.useContext(import_input_otp.OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {};
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
    "div",
    {
      "data-slot": "input-otp-slot",
      "data-active": isActive,
      className: cn(
        "data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]",
        className
      ),
      ...props,
      children: [
        char,
        hasFakeCaret && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "pointer-events-none absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "animate-caret-blink bg-foreground h-4 w-px duration-1000" }) })
      ]
    }
  );
}
function InputOTPSeparatorBase({ ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { "data-slot": "input-otp-separator", role: "separator", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(import_react17.MinusIcon, {}) });
}

// src/components/ui/NavigationMenuBase.tsx
var NavigationMenuPrimitive = __toESM(require("@radix-ui/react-navigation-menu"));
var import_react18 = require("@phosphor-icons/react");
var import_jsx_runtime26 = require("react/jsx-runtime");
function NavigationMenuBase({
  className,
  children,
  viewport = true,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
    NavigationMenuPrimitive.Root,
    {
      "data-slot": "navigation-menu",
      "data-viewport": viewport,
      className: cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center z-[999]",
        className
      ),
      ...props,
      children: [
        children,
        viewport && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(NavigationMenuViewportBase, {})
      ]
    }
  );
}
function NavigationMenuListBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    NavigationMenuPrimitive.List,
    {
      "data-slot": "navigation-menu-list",
      className: cn(
        "group flex flex-1 list-none items-center justify-center gap-1",
        className
      ),
      ...props
    }
  );
}
function NavigationMenuItemBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    NavigationMenuPrimitive.Item,
    {
      "data-slot": "navigation-menu-item",
      className: cn("relative", className),
      ...props
    }
  );
}
function NavigationMenuTriggerBase({
  className,
  children,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
    NavigationMenuPrimitive.Trigger,
    {
      "data-slot": "navigation-menu-trigger",
      className: cn("group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1", "group", className),
      ...props,
      children: [
        children,
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
          import_react18.CaretDownIcon,
          {
            className: "relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180",
            "aria-hidden": "true"
          }
        )
      ]
    }
  );
}
function NavigationMenuContentBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    NavigationMenuPrimitive.Content,
    {
      "data-slot": "navigation-menu-content",
      className: cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className
      ),
      ...props
    }
  );
}
function NavigationMenuViewportBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: cn("absolute top-full left-0 isolate z-50 flex justify-center"), children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    NavigationMenuPrimitive.Viewport,
    {
      "data-slot": "navigation-menu-viewport",
      className: cn(
        "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      ),
      ...props
    }
  ) });
}
function NavigationMenuLinkBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    NavigationMenuPrimitive.Link,
    {
      "data-slot": "navigation-menu-link",
      className: cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className
      ),
      ...props
    }
  );
}
function NavigationMenuIndicatorBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    NavigationMenuPrimitive.Indicator,
    {
      "data-slot": "navigation-menu-indicator",
      className: cn(
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        className
      ),
      ...props,
      children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" })
    }
  );
}

// src/components/ui/ProgressBase.tsx
var React16 = __toESM(require("react"));
var ProgressPrimitive = __toESM(require("@radix-ui/react-progress"));
var import_jsx_runtime27 = require("react/jsx-runtime");
var ProgressBase = React16.forwardRef(({ className, value, label, leftIcon, rightIcon, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex flex-col gap-1 w-full min-w-[150px]", children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(LabelBase_default, { className: "py-2", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-2", children: [
      leftIcon && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex items-center justify-center", children: leftIcon }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
        ProgressPrimitive.Root,
        {
          ref,
          className: cn(
            "relative h-3 w-full overflow-hidden rounded-full bg-zinc-200 dark:bg-zinc-800 shadow-inner transition-all",
            className
          ),
          value,
          ...props,
          children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            ProgressPrimitive.Indicator,
            {
              className: "h-full w-full flex-1 bg-primary transition-all duration-500 ease-in-out",
              style: { transform: `translateX(-${100 - (value || 0)}%)` }
            }
          )
        }
      ),
      rightIcon && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex items-center justify-center", children: rightIcon })
    ] })
  ] });
});
ProgressBase.displayName = "ProgressBase";
var ProgressSegmentsBase = ({
  label,
  segments,
  value
}) => {
  const filled = Math.round(value / 100 * segments);
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex flex-col gap-1 w-full min-w-[150px]", children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(LabelBase_default, { className: "py-2", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex gap-1 w-full", children: Array.from({ length: segments }).map((_, idx) => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
      "div",
      {
        className: cn(
          "h-2 flex-1 rounded-full transition-all duration-300",
          idx < filled ? "bg-primary" : "bg-zinc-300 hover:bg-zinc-400"
        )
      },
      idx
    )) })
  ] });
};
var ArrowRightIcon2 = () => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
  "svg",
  {
    className: "w-6 h-6 text-zinc-400 transition-transform duration-300 group-hover:translate-x-1",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 2,
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg",
    children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 5l7 7-7 7" })
  }
);
var ProgressPanelsBase = ({
  label,
  steps,
  currentStep
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex flex-col gap-1 w-full", children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(LabelBase_default, { className: "py-2", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex w-full gap-1 rounded-lg overflow-hidden", children: steps.map((step, idx) => {
      const isActive = idx === currentStep;
      const isLast = idx === steps.length - 1;
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(React16.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
          "div",
          {
            className: cn(
              "relative flex items-center justify-center cursor-pointer select-none rounded-lg border transition-shadow duration-300 ease-in-out",
              "hover:shadow-md hover:z-10",
              "aspect-[5/1] min-w-[90px] px-4",
              isActive ? "bg-primary/20 border-2 border-primary shadow-lg font-semibold" : "border-zinc-300"
            ),
            style: { flex: "1 1 0" },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "truncate", children: step }),
              isActive && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "absolute bottom-0 left-0 h-1 w-full animate-pulse rounded-b-lg" })
            ]
          }
        ),
        !isLast && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex items-center px-2 group", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ArrowRightIcon2, {}) })
      ] }, idx);
    }) })
  ] });
};
var ProgressCirclesBase = ({
  label,
  steps,
  currentStep
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex flex-col gap-2 w-full", children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { className: "py-2 text-base font-semibold text-gray-700 dark:text-gray-300", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "relative flex items-center justify-between w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "absolute top-5 left-0 w-full h-1 bg-zinc-200 dark:bg-zinc-700" }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
        "div",
        {
          className: "absolute top-5 left-0 h-1 bg-primary transition-all duration-300",
          style: {
            width: `${currentStep / (steps.length - 1) * 100}%`
          }
        }
      ),
      steps.map((step, idx) => {
        const isActive = idx <= currentStep;
        return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
          "div",
          {
            className: "relative flex flex-col items-center w-10",
            style: { zIndex: isActive ? 10 : 1 },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
                "div",
                {
                  className: cn(
                    "w-10 h-10 rounded-full flex items-center justify-center font-bold text-sm transition-all duration-300 cursor-pointer select-none",
                    isActive ? "bg-primary text-white dark:text-black shadow-md" : "bg-zinc-200 text-zinc-500 hover:bg-zinc-300 dark:bg-zinc-500 dark:text-black"
                  ),
                  children: idx + 1
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "text-xs text-center font-medium mt-1 max-w-[80px] break-words", children: step })
            ]
          },
          idx
        );
      })
    ] })
  ] });
};

// src/components/ui/ScrollareaBase.tsx
var React17 = __toESM(require("react"));
var ScrollAreaPrimitive = __toESM(require("@radix-ui/react-scroll-area"));
var import_jsx_runtime28 = require("react/jsx-runtime");
var ScrollAreaBase = React17.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
  ScrollAreaPrimitive.Root,
  {
    ref,
    className: cn("relative overflow-hidden", className),
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ScrollAreaPrimitive.Viewport, { className: "h-full w-full rounded-[inherit]", children }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ScrollBarBase, {}),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ScrollAreaPrimitive.Corner, {})
    ]
  }
));
ScrollAreaBase.displayName = ScrollAreaPrimitive.Root.displayName;
var ScrollBarBase = React17.forwardRef(({ className, orientation = "vertical", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
  ScrollAreaPrimitive.ScrollAreaScrollbar,
  {
    ref,
    orientation,
    className: cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    ),
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ScrollAreaPrimitive.ScrollAreaThumb, { className: "relative flex-1 rounded-full bg-border" })
  }
));
ScrollBarBase.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

// src/components/ui/SelectBase.tsx
var React18 = __toESM(require("react"));
var SelectPrimitive = __toESM(require("@radix-ui/react-select"));
var import_react19 = require("@phosphor-icons/react");
var import_framer_motion4 = require("framer-motion");
var import_jsx_runtime29 = require("react/jsx-runtime");
var SelectBase = SelectPrimitive.Root;
var SelectGroupBase = SelectPrimitive.Group;
var SelectValueBase = SelectPrimitive.Value;
var SelectTriggerBase = React18.forwardRef(({ className, children, open, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
  SelectPrimitive.Trigger,
  {
    ref,
    className: cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    ),
    ...props,
    children: [
      children,
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
        import_framer_motion4.motion.span,
        {
          animate: { rotate: open ? 180 : 0 },
          transition: { duration: 0.3 },
          className: "flex items-center",
          children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_react19.CaretDownIcon, { className: "h-4 w-4 opacity-50" })
        }
      )
    ]
  }
));
SelectTriggerBase.displayName = SelectPrimitive.Trigger.displayName;
var SelectScrollUpButtonBase = React18.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
  SelectPrimitive.ScrollUpButton,
  {
    ref,
    className: cn(
      "flex cursor-default items-center justify-center py-1",
      className
    ),
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_react19.CaretUpIcon, { className: "h-4 w-4" })
  }
));
SelectScrollUpButtonBase.displayName = SelectPrimitive.ScrollUpButton.displayName;
var SelectScrollDownButtonBase = React18.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
  SelectPrimitive.ScrollDownButton,
  {
    ref,
    className: cn(
      "flex cursor-default items-center justify-center py-1",
      className
    ),
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_react19.CaretDownIcon, { className: "h-4 w-4" })
  }
));
SelectScrollDownButtonBase.displayName = SelectPrimitive.ScrollDownButton.displayName;
var SelectContentBase = React18.forwardRef(({ className, children, position = "popper", testid: dataTestId = "select-content", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(SelectPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_framer_motion4.AnimatePresence, { children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
  SelectPrimitive.Content,
  {
    ref,
    className: cn(
      "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md",
      className
    ),
    position,
    "data-testid": dataTestId,
    ...props,
    asChild: true,
    children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      import_framer_motion4.motion.div,
      {
        initial: { opacity: 0, scale: 0.95 },
        animate: { opacity: 1, scale: 1 },
        exit: { opacity: 0, scale: 0.95 },
        transition: { duration: 0.2 },
        children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(import_jsx_runtime29.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(SelectScrollUpButtonBase, {}),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
            SelectPrimitive.Viewport,
            {
              className: cn(
                "p-1",
                position === "popper" && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
              ),
              children
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(SelectScrollDownButtonBase, {})
        ] })
      }
    )
  }
) }) }));
SelectContentBase.displayName = SelectPrimitive.Content.displayName;
var SelectLabelBase = React18.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
  SelectPrimitive.Label,
  {
    ref,
    className: cn("px-2 py-1.5 text-sm font-semibold", className),
    ...props
  }
));
SelectLabelBase.displayName = SelectPrimitive.Label.displayName;
var SelectItemBase = React18.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
  SelectPrimitive.Item,
  {
    ref,
    className: cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { className: "absolute right-2 flex h-3.5 w-3.5 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(SelectPrimitive.ItemIndicator, { children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_react19.CheckIcon, { className: "h-4 w-4" }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(SelectPrimitive.ItemText, { children })
    ]
  }
));
SelectItemBase.displayName = SelectPrimitive.Item.displayName;
var SelectSeparatorBase = React18.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
  SelectPrimitive.Separator,
  {
    ref,
    className: cn("-mx-1 my-1 h-px bg-muted", className),
    ...props
  }
));
SelectSeparatorBase.displayName = SelectPrimitive.Separator.displayName;

// src/components/ui/SeparatorBase.tsx
var React19 = __toESM(require("react"));
var SeparatorPrimitive = __toESM(require("@radix-ui/react-separator"));
var import_framer_motion5 = require("framer-motion");
var import_jsx_runtime30 = require("react/jsx-runtime");
var SeparatorBase = React19.forwardRef(
  ({ className, orientation = "horizontal", decorative = true, ...props }, ref) => {
    const isHorizontal = orientation === "horizontal";
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
      SeparatorPrimitive.Root,
      {
        ref,
        decorative,
        orientation,
        asChild: true,
        ...props,
        children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          import_framer_motion5.motion.div,
          {
            className: cn(
              "shrink-0 bg-border",
              isHorizontal ? "h-[1px] w-full" : "h-full w-[1px]",
              className
            ),
            initial: { scaleX: isHorizontal ? 0 : 1, scaleY: isHorizontal ? 1 : 0 },
            animate: { scaleX: 1, scaleY: 1 },
            transition: { duration: 0.2, ease: "easeInOut" }
          }
        )
      }
    );
  }
);
SeparatorBase.displayName = SeparatorPrimitive.Root.displayName;

// src/components/ui/SheetBase.tsx
var React20 = __toESM(require("react"));
var SheetPrimitive = __toESM(require("@radix-ui/react-dialog"));
var import_class_variance_authority3 = require("class-variance-authority");
var import_react20 = require("@phosphor-icons/react");
var import_jsx_runtime31 = require("react/jsx-runtime");
var SheetBase = SheetPrimitive.Root;
var SheetTriggerBase = SheetPrimitive.Trigger;
var SheetCloseBase = SheetPrimitive.Close;
var SheetPortalBase = SheetPrimitive.Portal;
var SheetOverlayBase = React20.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
  SheetPrimitive.Overlay,
  {
    className: cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    ...props,
    ref
  }
));
SheetOverlayBase.displayName = SheetPrimitive.Overlay.displayName;
var sheetVariants = (0, import_class_variance_authority3.cva)(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom: "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right: "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm"
      }
    },
    defaultVariants: {
      side: "right"
    }
  }
);
var SheetContentBase = React20.forwardRef(({ side = "right", className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(SheetPortalBase, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(SheetOverlayBase, {}),
  /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
    SheetPrimitive.Content,
    {
      ref,
      className: cn(sheetVariants({ side }), className),
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(SheetPrimitive.Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(import_react20.XIcon, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("span", { className: "sr-only", children: "Close" })
        ] }),
        children
      ]
    }
  )
] }));
SheetContentBase.displayName = SheetPrimitive.Content.displayName;
var SheetHeaderBase = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    ),
    ...props
  }
);
SheetHeaderBase.displayName = "SheetHeaderBase";
var SheetFooterBase = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ),
    ...props
  }
);
SheetFooterBase.displayName = "SheetFooterBase";
var SheetTitleBase = React20.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
  SheetPrimitive.Title,
  {
    ref,
    className: cn("text-lg font-semibold text-foreground", className),
    ...props
  }
));
SheetTitleBase.displayName = SheetPrimitive.Title.displayName;
var SheetDescriptionBase = React20.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
  SheetPrimitive.Description,
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    ...props
  }
));
SheetDescriptionBase.displayName = SheetPrimitive.Description.displayName;

// src/components/ui/SidebarBase.tsx
var React22 = __toESM(require("react"));
var import_react_slot5 = require("@radix-ui/react-slot");
var import_class_variance_authority4 = require("class-variance-authority");

// src/hooks/use-mobile.tsx
var React21 = __toESM(require("react"));
var MOBILE_BREAKPOINT = 768;
function useIsMobile() {
  const [isMobile, setIsMobile] = React21.useState(void 0);
  React21.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);
  return !!isMobile;
}

// src/components/ui/SkeletonBase.tsx
var import_jsx_runtime32 = require("react/jsx-runtime");
function SkeletonBase({
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
    "div",
    {
      className: cn("animate-pulse  bg-primary/10", className),
      ...props
    }
  );
}

// src/components/ui/SidebarBase.tsx
var import_react21 = require("@phosphor-icons/react");
var import_jsx_runtime33 = require("react/jsx-runtime");
var SIDEBAR_COOKIE_NAME = "sidebar:state";
var SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
var SIDEBAR_WIDTH = "16rem";
var SIDEBAR_WIDTH_MOBILE = "18rem";
var SIDEBAR_WIDTH_ICON = "3rem";
var SIDEBAR_KEYBOARD_SHORTCUT = "b";
var SidebarContext = React22.createContext(null);
function UseSideBarBase() {
  const context = React22.useContext(SidebarContext);
  if (!context) {
    throw new Error(
      "UseSideBarBase must be used within a SidebarProviderBase."
    );
  }
  return context;
}
var SidebarProviderBase = React22.forwardRef(
  ({
    defaultOpen = true,
    open: openProp,
    onOpenChange: setOpenProp,
    className,
    style,
    children,
    ...props
  }, ref) => {
    const isMobile = useIsMobile();
    const [openMobile, setOpenMobile] = React22.useState(false);
    const [_open, _setOpen] = React22.useState(defaultOpen);
    const open = openProp ?? _open;
    const setOpen = React22.useCallback(
      (value) => {
        const openState = typeof value === "function" ? value(open) : value;
        if (setOpenProp) {
          setOpenProp(openState);
        } else {
          _setOpen(openState);
        }
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
      },
      [setOpenProp, open]
    );
    const toggleSidebar = React22.useCallback(() => {
      return isMobile ? setOpenMobile((open2) => !open2) : setOpen((open2) => !open2);
    }, [isMobile, setOpen, setOpenMobile]);
    React22.useEffect(() => {
      const handleKeyDown = (event) => {
        if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
          event.preventDefault();
          toggleSidebar();
        }
      };
      window.addEventListener("keydown", handleKeyDown);
      return () => window.removeEventListener("keydown", handleKeyDown);
    }, [toggleSidebar]);
    const state = open ? "expanded" : "collapsed";
    const contextValue = React22.useMemo(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SidebarContext.Provider, { value: contextValue, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TooltipProviderBase, { delayDuration: 0, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      "div",
      {
        style: {
          "--sidebar-width": SIDEBAR_WIDTH,
          "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
          ...style
        },
        className: cn(
          "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
          className
        ),
        ref,
        ...props,
        children
      }
    ) }) });
  }
);
SidebarProviderBase.displayName = "SidebarProviderBase";
var SidebarBase = React22.forwardRef(
  ({
    side = "left",
    variant = "sidebar",
    collapsible = "offcanvas",
    className,
    children,
    ...props
  }, ref) => {
    const { isMobile, state, openMobile, setOpenMobile } = UseSideBarBase();
    if (collapsible === "none") {
      return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        "div",
        {
          className: cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          ),
          ref,
          ...props,
          children
        }
      );
    }
    if (isMobile) {
      return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SheetBase, { open: openMobile, onOpenChange: setOpenMobile, ...props, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        SheetContentBase,
        {
          "data-sidebar": "sidebar",
          "data-mobile": "true",
          className: "w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden",
          style: {
            "--sidebar-width": SIDEBAR_WIDTH_MOBILE
          },
          side,
          children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex h-full w-full flex-col", children })
        }
      ) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
      "div",
      {
        ref,
        className: "group peer hidden text-sidebar-foreground md:block",
        "data-state": state,
        "data-collapsible": state === "collapsed" ? collapsible : "",
        "data-variant": variant,
        "data-side": side,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
            "div",
            {
              className: cn(
                "relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
                "group-data-[collapsible=offcanvas]:w-0",
                "group-data-[side=right]:rotate-180",
                variant === "floating" || variant === "inset" ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]" : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
              )
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
            "div",
            {
              className: cn(
                "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
                side === "left" ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]" : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
                // Adjust the padding for floating and inset variants.
                variant === "floating" || variant === "inset" ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]" : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
                className
              ),
              ...props,
              children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                "div",
                {
                  "data-sidebar": "sidebar",
                  className: "flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow",
                  children
                }
              )
            }
          )
        ]
      }
    );
  }
);
SidebarBase.displayName = "SidebarBase";
var SidebarTriggerBase = React22.forwardRef(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = UseSideBarBase();
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
    ButtonBase,
    {
      ref,
      "data-sidebar": "trigger",
      variant: "ghost",
      size: "icon",
      className: cn("h-7 w-7", className),
      onClick: (event) => {
        onClick?.(event);
        toggleSidebar();
      },
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "sr-only", children: "Toggle SidebarBase" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(import_react21.SidebarSimpleIcon, {})
      ]
    }
  ) });
});
SidebarTriggerBase.displayName = "SidebarTriggerBase";
var SidebarRailBase = React22.forwardRef(({ className, ...props }, ref) => {
  const { toggleSidebar } = UseSideBarBase();
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    "button",
    {
      ref,
      "data-sidebar": "rail",
      "aria-label": "Toggle SidebarBase",
      tabIndex: -1,
      onClick: toggleSidebar,
      title: "Toggle SidebarBase",
      className: cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      ),
      ...props
    }
  );
});
SidebarRailBase.displayName = "SidebarRailBase";
var SidebarInsetBase = React22.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    "main",
    {
      ref,
      className: cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      ),
      ...props
    }
  );
});
SidebarInsetBase.displayName = "SidebarInsetBase";
var SidebarInputBase = React22.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    InputBase,
    {
      ref,
      "data-sidebar": "input",
      className: cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      ),
      ...props
    }
  );
});
SidebarInputBase.displayName = "SidebarInputBase";
var SidebarHeaderBase = React22.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    "div",
    {
      ref,
      "data-sidebar": "header",
      className: cn("flex flex-col gap-2 p-2", className),
      ...props
    }
  );
});
SidebarHeaderBase.displayName = "SidebarHeaderBase";
var SidebarFooterBase = React22.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    "div",
    {
      ref,
      "data-sidebar": "footer",
      className: cn("flex flex-col gap-2 p-2", className),
      ...props
    }
  );
});
SidebarFooterBase.displayName = "SidebarFooterBase";
var SidebarSeparatorBase = React22.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    SeparatorBase,
    {
      ref,
      "data-sidebar": "separator",
      className: cn("mx-2 w-auto bg-sidebar-border", className),
      ...props
    }
  );
});
SidebarSeparatorBase.displayName = "SidebarSeparatorBase";
var SidebarContentBase = React22.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    "div",
    {
      ref,
      "data-sidebar": "content",
      className: cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      ),
      ...props
    }
  );
});
SidebarContentBase.displayName = "SidebarContentBase";
var SidebarGroupBase = React22.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    "div",
    {
      ref,
      "data-sidebar": "group",
      className: cn("relative flex w-full min-w-0 flex-col p-2", className),
      ...props
    }
  );
});
SidebarGroupBase.displayName = "SidebarGroupBase";
var SidebarGroupLabelBase = React22.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? import_react_slot5.Slot : "div";
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    Comp,
    {
      ref,
      "data-sidebar": "group-label",
      className: cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      ),
      ...props
    }
  );
});
SidebarGroupLabelBase.displayName = "SidebarGroupLabelBase";
var SidebarGroupActionBase = React22.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? import_react_slot5.Slot : "button";
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    Comp,
    {
      ref,
      "data-sidebar": "group-action",
      className: cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      ),
      ...props
    }
  );
});
SidebarGroupActionBase.displayName = "SidebarGroupActionBase";
var SidebarGroupContentBase = React22.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
  "div",
  {
    ref,
    "data-sidebar": "group-content",
    className: cn("w-full text-sm", className),
    ...props
  }
));
SidebarGroupContentBase.displayName = "SidebarGroupContentBase";
var SidebarMenuBase = React22.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
  "ul",
  {
    ref,
    "data-sidebar": "menu",
    className: cn("flex w-full min-w-0 flex-col gap-1", className),
    ...props
  }
));
SidebarMenuBase.displayName = "SidebarMenuBase";
var SidebarMenuItemBase = React22.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
  "li",
  {
    ref,
    "data-sidebar": "menu-item",
    className: cn("group/menu-item relative", className),
    ...props
  }
));
SidebarMenuItemBase.displayName = "SidebarMenuItemBase";
var sidebarMenuButtonVariants = (0, import_class_variance_authority4.cva)(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline: "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]"
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
var SidebarMenuButtonBase = React22.forwardRef(
  ({
    asChild = false,
    isActive = false,
    variant = "default",
    size = "default",
    tooltip,
    className,
    ...props
  }, ref) => {
    const Comp = asChild ? import_react_slot5.Slot : "button";
    const { isMobile, state } = UseSideBarBase();
    const button = /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      Comp,
      {
        ref,
        "data-sidebar": "menu-button",
        "data-size": size,
        "data-active": isActive,
        className: cn(sidebarMenuButtonVariants({ variant, size }), className),
        ...props
      }
    );
    if (!tooltip) {
      return button;
    }
    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip
      };
    }
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(TooltipBase, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TooltipTriggerBase, { asChild: true, children: button }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        TooltipContentBase,
        {
          side: "right",
          align: "center",
          hidden: state !== "collapsed" || isMobile,
          ...tooltip
        }
      )
    ] });
  }
);
SidebarMenuButtonBase.displayName = "SidebarMenuButtonBase";
var SidebarMenuActionBase = React22.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? import_react_slot5.Slot : "button";
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    Comp,
    {
      ref,
      "data-sidebar": "menu-action",
      className: cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover && "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      ),
      ...props
    }
  );
});
SidebarMenuActionBase.displayName = "SidebarMenuActionBase";
var SidebarMenuBadgeBase = React22.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
  "div",
  {
    ref,
    "data-sidebar": "menu-badge",
    className: cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    ),
    ...props
  }
));
SidebarMenuBadgeBase.displayName = "SidebarMenuBadgeBase";
var SidebarMenuSkeletonBase = React22.forwardRef(({ className, showIcon = false, ...props }, ref) => {
  const width = React22.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
    "div",
    {
      ref,
      "data-sidebar": "menu-skeleton",
      className: cn("flex h-8 items-center gap-2 rounded-md px-2", className),
      ...props,
      children: [
        showIcon && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          SkeletonBase,
          {
            className: "size-4 rounded-md",
            "data-sidebar": "menu-skeleton-icon"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          SkeletonBase,
          {
            className: "h-4 max-w-[--skeleton-width] flex-1",
            "data-sidebar": "menu-skeleton-text",
            style: {
              "--skeleton-width": width
            }
          }
        )
      ]
    }
  );
});
SidebarMenuSkeletonBase.displayName = "SidebarMenuSkeletonBase";
var SidebarMenuSubBase = React22.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
  "ul",
  {
    ref,
    "data-sidebar": "menu-sub",
    className: cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    ),
    ...props
  }
));
SidebarMenuSubBase.displayName = "SidebarMenuSubBase";
var SidebarMenuSubItemBase = React22.forwardRef(({ ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("li", { ref, ...props }));
SidebarMenuSubItemBase.displayName = "SidebarMenuSubItemBase";
var SidebarMenuSubButtonBase = React22.forwardRef(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? import_react_slot5.Slot : "a";
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    Comp,
    {
      ref,
      "data-sidebar": "menu-sub-button",
      "data-size": size,
      "data-active": isActive,
      className: cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      ),
      ...props
    }
  );
});
SidebarMenuSubButtonBase.displayName = "SidebarMenuSubButtonBase";

// src/components/ui/SliderBase.tsx
var React23 = __toESM(require("react"));
var SliderPrimitive = __toESM(require("@radix-ui/react-slider"));
var import_jsx_runtime34 = require("react/jsx-runtime");
var SlideBase = React23.forwardRef(
  ({
    className,
    orientation = "horizontal",
    label,
    leftIcon,
    rightIcon,
    ...props
  }, ref) => {
    const isVertical = orientation === "vertical";
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
      "div",
      {
        className: cn(
          "flex flex-col gap-1",
          isVertical ? "h-full " : "w-full"
        ),
        children: [
          label && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(LabelBase_default, { className: "py-2", children: label }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
            "div",
            {
              className: cn(
                "flex gap-2",
                isVertical ? "flex-col  h-full" : "flex-row items-center w-full"
              ),
              children: [
                leftIcon && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "flex items-center justify-center", children: leftIcon }),
                /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
                  SliderPrimitive.Root,
                  {
                    ref,
                    orientation,
                    className: cn(
                      "relative flex touch-none select-none items-center",
                      isVertical ? "flex-col h-full" : "flex-row w-full",
                      className
                    ),
                    ...props,
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
                        SliderPrimitive.Track,
                        {
                          className: cn(
                            "relative overflow-hidden bg-primary/20 rounded-full",
                            isVertical ? "w-1.5 h-full" : "h-1.5 w-full"
                          ),
                          children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
                            SliderPrimitive.Range,
                            {
                              className: cn(
                                "absolute bg-primary",
                                isVertical ? "w-full" : "h-full"
                              )
                            }
                          )
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
                        SliderPrimitive.Thumb,
                        {
                          className: cn(
                            "block h-4 w-4 rounded-full border border-primary/70 bg-background shadow-md transition-transform",
                            "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2",
                            "hover:scale-125 active:scale-125"
                          )
                        }
                      )
                    ]
                  }
                ),
                rightIcon && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "flex items-center justify-center", children: rightIcon })
              ]
            }
          )
        ]
      }
    );
  }
);
SlideBase.displayName = "SlideBase";

// src/components/ui/SonnerBase.tsx
var import_react22 = require("@phosphor-icons/react");
var import_sonner = require("sonner");
var import_jsx_runtime35 = require("react/jsx-runtime");
var iconBaseClass = "w-5 h-auto";
var Toaster = ({ testId, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
    import_sonner.Toaster,
    {
      className: "toaster group",
      position: "top-center",
      toastOptions: {
        classNames: {
          toast: `
            group toast
            bg-background
            text-foreground
            shadow-lg rounded-md
            border-l-4
            border-border
            flex items-center gap-3
            data-[type=success]:border-l-green-500 data-[type=success]:bg-green-50 data-[type=success]:text-green-800 data-[type=success]:border-green-500
            data-[type=error]:border-l-red-500 data-[type=error]:bg-red-50 data-[type=error]:text-red-800 data-[type=error]:border-red-500
            data-[type=WarningIcon]:border-l-yellow-500 data-[type=WarningIcon]:bg-yellow-50 data-[type=WarningIcon]:text-yellow-800 data-[type=WarningIcon]:border-yellow-500
            data-[type=InfoIcon]:border-l-blue-500 data-[type=InfoIcon]:bg-blue-50 data-[type=InfoIcon]:text-blue-800 data-[type=InfoIcon]:border-blue-500
          `,
          description: `
            text-sm
            group-[.toast]:text-neutral-600
          `,
          actionButton: `
            ml-auto
            rounded-md px-3 py-1 text-sm font-semibold
            bg-neutral-800 text-white
            hover:bg-neutral-700
            transition-colors duration-200
          `,
          cancelButton: `
            ml-2
            rounded-md px-3 py-1 text-sm font-semibold
            bg-neutral-100 text-neutral-700
            hover:bg-neutral-200
            transition-colors duration-200
          `
        }
      },
      "data-testid": testId,
      ...props
    }
  );
};
var toast = {
  success: (message) => import_sonner.toast.success(message, {
    icon: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_react22.CheckCircleIcon, { className: `${iconBaseClass} text-green-600`, weight: "fill" }),
    className: "sonner-success"
  }),
  error: (message) => import_sonner.toast.error(message, {
    icon: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_react22.XCircleIcon, { className: `${iconBaseClass} text-red-600`, weight: "fill" }),
    className: "sonner-error"
  }),
  warning: (message) => import_sonner.toast.warning(message, {
    icon: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_react22.WarningIcon, { className: `${iconBaseClass} text-yellow-600`, weight: "fill" }),
    className: "sonner-WarningIcon"
  }),
  info: (message) => import_sonner.toast.info(message, {
    icon: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_react22.InfoIcon, { className: `${iconBaseClass} text-blue-600`, weight: "fill" }),
    className: "sonner-InfoIcon"
  }),
  loading: (message) => (0, import_sonner.toast)(message, {
    icon: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_react22.SpinnerIcon, { className: `${iconBaseClass} animate-spin text-neutral-500`, weight: "fill" }),
    className: "sonner-loading"
  })
};

// src/components/ui/SwitchBase.tsx
var React24 = __toESM(require("react"));
var SwitchPrimitives = __toESM(require("@radix-ui/react-switch"));
var import_jsx_runtime36 = require("react/jsx-runtime");
var SwitchBase = React24.forwardRef(({ className, testid: dataTestId = "switch-base", ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
    SwitchPrimitives.Root,
    {
      ...props,
      ref,
      className: cn(
        "peer relative inline-flex w-12 cursor-pointer items-center rounded-full border-2 border-transparent shadow-md transition-colors duration-300 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-1 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input data-[state=checked]:shadow-[0_0_15px_4px_var(--tw-shadow-color)] data-[state=checked]:shadow-primary/30",
        className
      ),
      "data-testid": dataTestId,
      children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
        SwitchPrimitives.Thumb,
        {
          className: cn(
            "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-xl ring-0 transition-transform duration-350 ease-out peer-focus:shadow-lg peer-focus:ring-2 peer-focus:ring-primary/70 data-[state=unchecked]:translate-x-0 data-[state=checked]:translate-x-7 data-[state=checked]:animate-bounce-thumb"
          ),
          style: {
            transformOrigin: "center",
            transition: "transform 350ms cubic-bezier(0.68, -0.55, 0.265, 1.55)"
          }
        }
      )
    }
  );
});
SwitchBase.displayName = SwitchPrimitives.Root.displayName;

// src/components/ui/TableBase.tsx
var React25 = __toESM(require("react"));
var import_jsx_runtime37 = require("react/jsx-runtime");
var TableBase = React25.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "relative w-full overflow-auto", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
  "table",
  {
    ref,
    className: cn("w-full caption-bottom text-sm", className),
    ...props
  }
) }));
TableBase.displayName = "TableBase";
var TableHeaderBase = React25.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("thead", { ref, className: cn("[&_tr]:border-b", className), ...props }));
TableHeaderBase.displayName = "TableHeaderBase";
var TableBodyBase = React25.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
  "tbody",
  {
    ref,
    className: cn("[&_tr:last-child]:border-0", className),
    ...props
  }
));
TableBodyBase.displayName = "TableBodyBase";
var TableFooterBase = React25.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
  "tfoot",
  {
    ref,
    className: cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    ),
    ...props
  }
));
TableFooterBase.displayName = "TableFooterBase";
var TableRowBase = React25.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
  "tr",
  {
    ref,
    className: cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    ),
    ...props
  }
));
TableRowBase.displayName = "TableRowBase";
var TableHeadBase = React25.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
  "th",
  {
    ref,
    className: cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    ),
    ...props
  }
));
TableHeadBase.displayName = "TableHeadBase";
var TableCellBase = React25.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
  "td",
  {
    ref,
    className: cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    ),
    ...props
  }
));
TableCellBase.displayName = "TableCellBase";
var TableCaptionBase = React25.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
  "caption",
  {
    ref,
    className: cn("mt-4 text-sm text-muted-foreground", className),
    ...props
  }
));
TableCaptionBase.displayName = "TableCaptionBase";

// src/components/ui/TabsBase.tsx
var React26 = __toESM(require("react"));
var TabsPrimitive = __toESM(require("@radix-ui/react-tabs"));
var import_jsx_runtime38 = require("react/jsx-runtime");
var TabsBase = TabsPrimitive.Root;
var TabsListBase = React26.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
  TabsPrimitive.List,
  {
    ref,
    className: cn(
      "relative flex w-full items-center justify-start gap-4 border-b-2 border-border",
      className
    ),
    ...props
  }
));
TabsListBase.displayName = TabsPrimitive.List.displayName;
var TabsTriggerBase = React26.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
  TabsPrimitive.Trigger,
  {
    ref,
    className: cn(
      "relative inline-flex items-center justify-center whitespace-nowrap px-3 py-2 text-sm font-medium transition-colors",
      "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-3",
      "disabled:pointer-events-none disabled:opacity-50",
      "data-[state=active]:text-primary",
      "after:absolute after:bottom-0 after:left-0 after:h-[1.5px] after:w-full",
      "after:scale-x-0 after:bg-primary after:origin-left",
      "after:transition-transform after:duration-300 after:ease-[cubic-bezier(0.65,0,0.35,1)]",
      "data-[state=active]:after:scale-x-100",
      className
    ),
    ...props
  }
));
var TabsContentBase = React26.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
  TabsPrimitive.Content,
  {
    ref,
    className: cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      "animate-fade-in",
      className
    ),
    ...props
  }
));
TabsContentBase.displayName = TabsPrimitive.Content.displayName;

// src/components/ui/TextAreaBase.tsx
var React27 = __toESM(require("react"));
var import_jsx_runtime39 = require("react/jsx-runtime");
var TextAreaBase = React27.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
    "textarea",
    {
      className: cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      ),
      ref,
      ...props
    }
  );
});
TextAreaBase.displayName = "TextAreaBase";

// src/components/mode-toggle.tsx
var import_react24 = require("@phosphor-icons/react");

// src/components/theme-provider.tsx
var import_react23 = require("react");
var import_jsx_runtime40 = require("react/jsx-runtime");
var initialState = {
  theme: "system",
  setTheme: () => null
};
var ThemeProviderContext = (0, import_react23.createContext)(initialState);
function ThemeProviderBase({
  children,
  defaultTheme = "system",
  storageKey = "app-ui-theme",
  ...props
}) {
  const [theme, setThemeState] = (0, import_react23.useState)(defaultTheme);
  (0, import_react23.useEffect)(() => {
    const root = window.document.documentElement;
    root.classList.remove(
      "light",
      "light-purple",
      "light-green",
      "light-blue",
      "dark",
      "dark-purple",
      "dark-green",
      "dark-blue",
      "system"
    );
    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      root.classList.add(systemTheme);
      document.body.style.backgroundColor = "";
      document.body.style.color = "";
      return;
    }
    root.classList.add(theme);
    if (theme.includes("dark")) {
      document.body.style.backgroundColor = "";
      document.body.style.color = "";
    }
  }, [theme]);
  (0, import_react23.useEffect)(() => {
    const stored = localStorage.getItem(storageKey);
    if (stored) setThemeState(stored);
  }, [storageKey]);
  const setTheme = (newTheme) => {
    if (typeof window !== "undefined") {
      localStorage.setItem(storageKey, newTheme);
    }
    setThemeState(newTheme);
  };
  const value = { theme, setTheme };
  return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(ThemeProviderContext.Provider, { ...props, value, children });
}
var useTheme = () => {
  const context = (0, import_react23.useContext)(ThemeProviderContext);
  if (context === void 0)
    throw new Error("useTheme must be used within a ThemeProvider");
  return context;
};

// src/components/mode-toggle.tsx
var import_jsx_runtime41 = require("react/jsx-runtime");
var themeLabels = {
  light: "Light",
  dark: "Dark",
  system: "System",
  "light-purple": "Light Purple",
  "dark-purple": "Dark Purple",
  "light-blue": "Light Blue",
  "dark-blue": "Dark Blue",
  "light-green": "Light Green",
  "dark-green": "Dark Green"
};
function ModeToggleBase({
  themes = ["light", "dark", "system"]
}) {
  const { setTheme, theme: currentTheme } = useTheme();
  const isDark = currentTheme?.includes("dark") || currentTheme === "system" && typeof window !== "undefined" && window.matchMedia("(prefers-color-scheme: dark)").matches;
  return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(DropDownMenuBase, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(DropDownMenuTriggerBase, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
      ButtonBase,
      {
        variant: "ghost",
        size: "icon",
        className: "relative overflow-hidden border-transparent",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(import_jsx_runtime41.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_react24.SunIcon, { className: `h-[1.2rem] w-[1.2rem] transition-transform duration-300 ${isDark ? "rotate-90 scale-0" : "rotate-0 scale-100"}` }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_react24.MoonIcon, { className: `absolute h-[1.2rem] w-[1.2rem] transition-transform duration-300 ${isDark ? "rotate-0 scale-100" : "rotate-90 scale-0"}` })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "sr-only", children: "Toggle theme" })
        ]
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(DropDownMenuContentBase, { align: "end", className: "border-border bg-popover text-popover-foreground", children: themes.map((theme) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
      DropDownMenuItemBase,
      {
        onClick: () => setTheme(theme),
        className: "flex items-center justify-between hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
        children: [
          themeLabels[theme],
          currentTheme === theme && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_react24.CheckIcon, { className: "h-4 w-4 opacity-100" })
        ]
      },
      theme
    )) })
  ] });
}

// src/components/date-time-picker/DateTimePicker.tsx
var import_date_fns = require("date-fns");

// src/components/date-time-picker/calendar.tsx
var React28 = __toESM(require("react"));
var import_react_day_picker2 = require("react-day-picker");
var import_react25 = require("@phosphor-icons/react");
var import_framer_motion6 = require("framer-motion");
var import_jsx_runtime42 = require("react/jsx-runtime");
var variants = {
  enter: (direction) => ({
    opacity: 0,
    x: direction > 0 ? 30 : -30
  }),
  center: {
    opacity: 1,
    x: 0
  },
  exit: (direction) => ({
    opacity: 0,
    x: direction > 0 ? -30 : 30
  })
};
function CalendarBase2({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  const [month, setMonth] = React28.useState(
    props.month || props.defaultMonth || /* @__PURE__ */ new Date()
  );
  const [direction, setDirection] = React28.useState(1);
  const handleMonthChange = (newMonth) => {
    const isNext = newMonth > month ? 1 : -1;
    setDirection(isNext);
    setMonth(newMonth);
    props.onMonthChange?.(newMonth);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
    "div",
    {
      className: cn(
        "rounded-xl border bg-background p-3 shadow-sm overflow-hidden",
        className
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        import_framer_motion6.motion.div,
        {
          variants,
          initial: "enter",
          animate: "center",
          exit: "exit",
          custom: direction,
          transition: { duration: 0.3, ease: "easeInOut" },
          style: { position: "relative" },
          children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
            import_react_day_picker2.DayPicker,
            {
              showOutsideDays,
              month,
              onMonthChange: handleMonthChange,
              className: "w-full",
              classNames: {
                months: "flex items-center flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
                month: "space-y-4",
                caption: "flex justify-center pt-1 relative items-center",
                caption_label: "text-sm font-medium",
                nav: "space-x-1 flex items-center",
                nav_button: cn(
                  buttonVariantsBase({ variant: "outline" }),
                  "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
                ),
                nav_button_previous: "absolute left-1",
                nav_button_next: "absolute right-1",
                table: "w-full border-collapse space-y-1",
                head_row: "flex",
                head_cell: "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
                row: "flex w-full mt-2",
                cell: cn(
                  "h-9 w-9 text-center text-sm p-0 relative",
                  "[&:has([aria-selected].day-range-end)]:rounded-r-md",
                  "[&:has([aria-selected].day-range-start)]:rounded-l-md",
                  "[&:has([aria-selected].day-outside)]:bg-muted/50",
                  "[&:has([aria-selected])]:bg-muted",
                  "first:[&:has([aria-selected])]:rounded-l-md",
                  "last:[&:has([aria-selected])]:rounded-r-md",
                  "focus-within:relative focus-within:z-20"
                ),
                day: cn(
                  buttonVariantsBase({ variant: "ghost" }),
                  "h-9 w-9 p-0 font-normal rounded-md",
                  "aria-selected:opacity-100 hover:bg-muted"
                ),
                day_selected: "bg-primary text-primary-foreground hover:bg-primary/90 focus:bg-primary/90",
                day_today: "bg-muted text-foreground dark:bg-muted dark:text-foreground",
                day_outside: "day-outside text-gray-500 opacity-50 aria-selected:bg-muted/50 aria-selected:text-black",
                day_disabled: "text-gray-500",
                day_range_middle: "aria-selected:bg-muted aria-selected:text-foreground",
                day_hidden: "invisible",
                ...classNames
              },
              components: {
                IconLeft: () => /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(import_react25.CaretLeftIcon, { className: "h-4 w-4" }),
                IconRight: () => /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(import_react25.CaretRightIcon, { className: "h-4 w-4" })
              },
              ...props
            }
          )
        },
        month.toISOString()
      )
    }
  );
}
CalendarBase2.displayName = "CalendarBase";

// src/components/date-time-picker/DateTimePicker.tsx
var import_locale = require("date-fns/locale");
var import_react28 = require("react");

// src/components/date-time-picker/TimePicker.tsx
var import_react27 = require("@phosphor-icons/react");
var React30 = __toESM(require("react"));

// src/components/date-time-picker/TimePickerInput.tsx
var import_react26 = __toESM(require("react"));

// src/components/date-time-picker/time-picker-utils.ts
function isValidHour(value) {
  return /^(0[0-9]|1[0-9]|2[0-3])$/.test(value);
}
function isValid12Hour(value) {
  return /^(0[1-9]|1[0-2])$/.test(value);
}
function isValidMinuteOrSecond(value) {
  return /^[0-5][0-9]$/.test(value);
}
function getValidNumber(value, { max, min = 0, loop = false }) {
  let numericValue = parseInt(value, 10);
  if (!isNaN(numericValue)) {
    if (!loop) {
      if (numericValue > max) numericValue = max;
      if (numericValue < min) numericValue = min;
    } else {
      if (numericValue > max) numericValue = min;
      if (numericValue < min) numericValue = max;
    }
    return numericValue.toString().padStart(2, "0");
  }
  return "00";
}
function getValidHour(value) {
  if (isValidHour(value)) return value;
  return getValidNumber(value, { max: 23 });
}
function getValid12Hour(value) {
  if (isValid12Hour(value)) return value;
  return getValidNumber(value, { min: 1, max: 12 });
}
function getValidMinuteOrSecond(value) {
  if (isValidMinuteOrSecond(value)) return value;
  return getValidNumber(value, { max: 59 });
}
function getValidArrowNumber(value, { min, max, step }) {
  let numericValue = parseInt(value, 10);
  if (!isNaN(numericValue)) {
    numericValue += step;
    return getValidNumber(String(numericValue), { min, max, loop: true });
  }
  return "00";
}
function getValidArrowHour(value, step) {
  return getValidArrowNumber(value, { min: 0, max: 23, step });
}
function getValidArrow12Hour(value, step) {
  return getValidArrowNumber(value, { min: 1, max: 12, step });
}
function getValidArrowMinuteOrSecond(value, step) {
  return getValidArrowNumber(value, { min: 0, max: 59, step });
}
function setMinutes(date, value) {
  const minutes = getValidMinuteOrSecond(value);
  date.setMinutes(parseInt(minutes, 10));
  return date;
}
function setSeconds(date, value) {
  const seconds = getValidMinuteOrSecond(value);
  date.setSeconds(parseInt(seconds, 10));
  return date;
}
function setHours(date, value) {
  const hours = getValidHour(value);
  date.setHours(parseInt(hours, 10));
  return date;
}
function set12Hours(date, value, period) {
  const hours = parseInt(getValid12Hour(value), 10);
  const convertedHours = convert12HourTo24Hour(hours, period);
  date.setHours(convertedHours);
  return date;
}
function setDateByType(date, value, type, period) {
  switch (type) {
    case "minutes":
      return setMinutes(date, value);
    case "seconds":
      return setSeconds(date, value);
    case "hours":
      return setHours(date, value);
    case "12hours": {
      if (!period) return date;
      return set12Hours(date, value, period);
    }
    default:
      return date;
  }
}
function getDateByType(date, type) {
  switch (type) {
    case "minutes":
      return getValidMinuteOrSecond(String(date.getMinutes()));
    case "seconds":
      return getValidMinuteOrSecond(String(date.getSeconds()));
    case "hours":
      return getValidHour(String(date.getHours()));
    case "12hours":
      const hours = display12HourValue(date.getHours());
      return getValid12Hour(String(hours));
    default:
      return "00";
  }
}
function getArrowByType(value, step, type) {
  switch (type) {
    case "minutes":
      return getValidArrowMinuteOrSecond(value, step);
    case "seconds":
      return getValidArrowMinuteOrSecond(value, step);
    case "hours":
      return getValidArrowHour(value, step);
    case "12hours":
      return getValidArrow12Hour(value, step);
    default:
      return "00";
  }
}
function convert12HourTo24Hour(hour, period) {
  if (period === "PM") {
    if (hour <= 11) {
      return hour + 12;
    } else {
      return hour;
    }
  } else if (period === "AM") {
    if (hour === 12) return 0;
    return hour;
  }
  return hour;
}
function display12HourValue(hours) {
  if (hours === 0 || hours === 12) return "12";
  if (hours >= 22) return `${hours - 12}`;
  if (hours % 12 > 9) return `${hours}`;
  return `0${hours % 12}`;
}

// src/components/date-time-picker/TimePickerInput.tsx
var import_jsx_runtime43 = require("react/jsx-runtime");
var TimePickerInput = import_react26.default.forwardRef(
  ({
    className,
    type = "tel",
    value,
    id,
    name,
    date = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0)),
    setDate,
    onChange,
    onKeyDown,
    picker,
    period,
    onLeftFocus,
    onRightFocus,
    ...props
  }, ref) => {
    const [flag, setFlag] = import_react26.default.useState(false);
    const [prevIntKey, setPrevIntKey] = import_react26.default.useState("0");
    import_react26.default.useEffect(() => {
      if (flag) {
        const timer = setTimeout(() => {
          setFlag(false);
        }, 2e3);
        return () => clearTimeout(timer);
      }
    }, [flag]);
    const calculatedValue = import_react26.default.useMemo(() => {
      return getDateByType(date, picker);
    }, [date, picker]);
    const calculateNewValue = (key) => {
      if (picker === "12hours") {
        if (flag && calculatedValue.slice(1, 2) === "1" && prevIntKey === "0")
          return "0" + key;
      }
      return !flag ? "0" + key : calculatedValue.slice(1, 2) + key;
    };
    const handleKeyDown = (e) => {
      if (e.key === "Tab") return;
      e.preventDefault();
      if (e.key === "ArrowRight") onRightFocus?.();
      if (e.key === "ArrowLeft") onLeftFocus?.();
      if (["ArrowUp", "ArrowDown"].includes(e.key)) {
        const step = e.key === "ArrowUp" ? 1 : -1;
        const newValue = getArrowByType(calculatedValue, step, picker);
        if (flag) setFlag(false);
        const tempDate = new Date(date);
        setDate(setDateByType(tempDate, newValue, picker, period));
      }
      if (e.key >= "0" && e.key <= "9") {
        if (picker === "12hours") setPrevIntKey(e.key);
        const newValue = calculateNewValue(e.key);
        if (flag) onRightFocus?.();
        setFlag((prev) => !prev);
        const tempDate = new Date(date);
        setDate(setDateByType(tempDate, newValue, picker, period));
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
      InputBase,
      {
        ref,
        id: id || picker,
        name: name || picker,
        className: cn(
          "focus:bg-accent focus:text-accent-foreground w-[48px] text-center font-mono text-base tabular-nums caret-transparent [&::-webkit-inner-spin-button]:appearance-none",
          className
        ),
        value: value || calculatedValue,
        onChange: (e) => {
          e.preventDefault();
          onChange?.(e);
        },
        type,
        inputMode: "decimal",
        onKeyDown: (e) => {
          onKeyDown?.(e);
          handleKeyDown(e);
        },
        ...props
      }
    );
  }
);
TimePickerInput.displayName = "TimePickerInput";

// src/components/date-time-picker/TimePicker.tsx
var import_jsx_runtime44 = require("react/jsx-runtime");
function TimePicker({ date, setDate, hideSeconds }) {
  const minuteRef = React30.useRef(null);
  const hourRef = React30.useRef(null);
  const secondRef = React30.useRef(null);
  return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex items-end gap-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "grid gap-1 text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(LabelBase_default, { htmlFor: "hours", className: "text-xs", children: "Horas" }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
        TimePickerInput,
        {
          picker: "hours",
          date,
          setDate,
          ref: hourRef,
          onRightFocus: () => minuteRef.current?.focus()
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "grid gap-1 text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(LabelBase_default, { htmlFor: "minutes", className: "text-xs", children: "Minutos" }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
        TimePickerInput,
        {
          picker: "minutes",
          date,
          setDate,
          ref: minuteRef,
          onLeftFocus: () => hourRef.current?.focus(),
          onRightFocus: () => secondRef.current?.focus()
        }
      )
    ] }),
    !hideSeconds && /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "grid gap-1 text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(LabelBase_default, { htmlFor: "seconds", className: "text-xs", children: "Segundos" }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
        TimePickerInput,
        {
          picker: "seconds",
          date,
          setDate,
          ref: secondRef,
          onLeftFocus: () => minuteRef.current?.focus()
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "flex h-10 items-center", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(import_react27.ClockIcon, { className: "ml-2 h-4 w-4" }) })
  ] });
}

// src/components/date-time-picker/DateTimePicker.tsx
var import_react29 = require("@phosphor-icons/react");
var import_jsx_runtime45 = require("react/jsx-runtime");
function DateTimePicker({
  label,
  date,
  onChange,
  hideSeconds,
  fromDate,
  toDate,
  disabled,
  dialogTitle
}) {
  const [internalDate, setInternalDate] = (0, import_react28.useState)(date);
  const handleSelect = (newDay) => {
    if (!newDay) return;
    if (!internalDate) {
      setInternalDate(newDay);
      return;
    }
    const diff = newDay.getTime() - internalDate.getTime();
    const diffInDays = diff / (1e3 * 60 * 60 * 24);
    const newDateFull = (0, import_date_fns.add)(internalDate, { days: Math.ceil(diffInDays) });
    setInternalDate(newDateFull);
  };
  const [open, setOpen] = (0, import_react28.useState)(false);
  (0, import_react28.useEffect)(() => {
    if (date) {
      setInternalDate(date);
    }
  }, [date, open]);
  return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(import_jsx_runtime45.Fragment, { children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(LabelBase_default, { className: "mb-[-1rem] pl-2", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(DialogBase, { open, onOpenChange: setOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(DialogTriggerBase, { disabled, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
        ButtonBase,
        {
          variant: "default",
          size: "lg",
          className: cn(
            "w-full justify-start text-left font-normal text-zinc-950",
            !date && "text-muted-foreground"
          ),
          children: [
            date ? (0, import_date_fns.format)(date, "PPP - HH:mm", { locale: import_locale.ptBR }) : /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "text-zinc-400", children: "Pick a date" }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(import_react29.CalendarIcon, { className: "ml-auto text-gray-500", size: 24 })
          ]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(DialogContentBase, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(DialogHeaderBase, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(DialogTitleBase, { className: "text-xl font-semibold", children: dialogTitle ?? "Selecione a data" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          CalendarBase2,
          {
            mode: "single",
            locale: import_locale.ptBR,
            selected: internalDate,
            onSelect: (d) => handleSelect(d),
            initialFocus: true,
            fromDate,
            toDate
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "border-border flex justify-center border-t p-3", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          TimePicker,
          {
            setDate: setInternalDate,
            date: internalDate,
            hideSeconds
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          ButtonBase,
          {
            onClick: () => {
              onChange(internalDate);
              setOpen(false);
            },
            children: "Salvar"
          }
        )
      ] })
    ] })
  ] });
}

// src/components/selects/Select.tsx
var import_jsx_runtime46 = require("react/jsx-runtime");
function Select({
  items,
  groupItems,
  placeholder,
  onChange,
  errorMessage,
  testIds = {}
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { "data-testid": testIds.root ?? "select-root", children: [
    /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(SelectBase, { onValueChange: onChange, "data-testid": testIds.base ?? "select-base", children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        SelectTriggerBase,
        {
          className: cn(
            "flex h-12 w-full content-start text-lg shadow-md",
            errorMessage && "border-red-500"
          ),
          "data-testid": testIds.trigger ?? "select-trigger",
          children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
            SelectValueBase,
            {
              placeholder,
              "data-testid": testIds.value ?? "select-value"
            }
          )
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(ScrollAreaBase, { "data-testid": testIds.scrollarea ?? "select-scrollarea", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SelectContentBase, { "data-testid": testIds.content ?? "select-content", children: groupItems ? /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(import_jsx_runtime46.Fragment, { children: Object.keys(groupItems).map((key) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(SelectGroupBase, { "data-testid": testIds.group ?? "select-group", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SelectLabelBase, { "data-testid": testIds.label ?? "select-label", children: key }),
        groupItems[key].map((item) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
          SelectItemBase,
          {
            value: item.value,
            "data-testid": testIds.item?.(item.value) ?? `select-item-${item.value}`,
            children: item.label
          },
          item.value
        ))
      ] }, key)) }) : /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SelectGroupBase, { "data-testid": testIds.group ?? "select-group", children: items.map((item) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        SelectItemBase,
        {
          value: item.value,
          "data-testid": testIds.item?.(item.value) ?? `select-item-${item.value}`,
          children: item.label
        },
        item.value
      )) }) }) })
    ] }),
    errorMessage && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
      "p",
      {
        className: "text-sm text-red-500",
        "data-testid": testIds.error ?? "select-error",
        children: errorMessage
      }
    )
  ] });
}

// src/components/ui/DestructiveDialog.tsx
var React31 = __toESM(require("react"));
var import_react30 = require("@phosphor-icons/react");
var import_jsx_runtime47 = require("react/jsx-runtime");
var DestructiveDialog = ({
  title,
  description,
  onConfirm,
  onCancel,
  children,
  triggerContent
}) => {
  const titleId = "destructive-dialog-title";
  const descriptionId = "destructive-dialog-description";
  const triggerEl = React31.isValidElement(children) ? /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(AlertDialogTriggerBase, { asChild: true, children }) : /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(AlertDialogTriggerBase, { children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ButtonBase, { variant: "destructive", children: triggerContent ?? "Excluir" }) });
  return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(AlertDialogBase, { children: [
    triggerEl,
    /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
      AlertDialogContentBase,
      {
        role: "alertdialog",
        "aria-modal": "true",
        "aria-labelledby": titleId,
        "aria-describedby": descriptionId,
        className: cn("border border-destructive bg-background"),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-start gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex items-center justify-center w-10 h-10 rounded-full ring-1 ring-destructive/30", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_react30.XCircleIcon, { className: "w-6 h-6 text-destructive" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
                AlertDialogTitleBase,
                {
                  id: titleId,
                  className: "text-lg sm:text-xl font-semibold text-destructive",
                  children: title
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
                AlertDialogDescriptionBase,
                {
                  id: descriptionId,
                  className: "mt-2 text-sm text-muted-foreground",
                  children: description
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(AlertDialogFooterBase, { className: "mt-2 flex justify-end gap-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
              AlertDialogCancelBase,
              {
                onClick: onCancel,
                className: cn(
                  buttonVariantsBase({ variant: "outline", size: "default" }),
                  "hover:bg-foreground/5 hover:text-primary hover:opacity-90 hover:shadow-none"
                ),
                children: "Cancelar"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
              AlertDialogActionBase,
              {
                onClick: onConfirm,
                className: cn(
                  buttonVariantsBase({ variant: "destructive", size: "default" })
                ),
                children: "Confirmar"
              }
            )
          ] })
        ]
      }
    )
  ] });
};

// src/components/rechart/LineChart.tsx
var import_react33 = require("react");
var import_recharts = require("recharts");

// src/components/rechart/DraggableTooltip.tsx
var import_react31 = require("react");
var import_react32 = require("@phosphor-icons/react");
var import_ssr2 = require("@phosphor-icons/react/dist/ssr");

// src/components/rechart/CloseAllButton.tsx
var import_ssr = require("@phosphor-icons/react/dist/ssr");
var import_jsx_runtime48 = require("react/jsx-runtime");
var CloseAllButton = ({
  count,
  onCloseAll,
  position = "top-center",
  variant = "floating"
}) => {
  if (count <= 1) return null;
  const getPositionClasses = () => {
    if (variant === "inline") return "";
    switch (position) {
      case "top-left":
        return "fixed top-6 left-6 z-50";
      case "top-right":
        return "fixed top-6 right-6 z-50";
      case "top-center":
        return "fixed top-6 left-1/2 transform -translate-x-1/2 z-50";
      default:
        return "fixed top-6 left-1/2 transform -translate-x-1/2 z-50";
    }
  };
  const getVariantClasses = () => {
    if (variant === "inline") {
      return "text-xs px-2 py-1 h-auto bg-card border border-border shadow-sm hover:bg-accent";
    }
    return `
      rounded-full px-4 py-2.5 bg-transparent hover:bg-white/15 active:bg-white/20
      text-white font-semibold text-sm
      transition-all duration-200 ease-in-out
      hover:scale-105 active:scale-95 hover:shadow-2xl
      flex items-center gap-2.5
      group
      min-w-max
    `;
  };
  if (variant === "inline") {
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "absolute top-4 right-4 z-30", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
      ButtonBase,
      {
        variant: "ghost",
        size: "sm",
        onClick: onCloseAll,
        className: getVariantClasses(),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(import_ssr.XIcon, { size: 12, className: "mr-1" }),
          "Fechar Todos"
        ]
      }
    ) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: `${getPositionClasses()} animate-in fade-in slide-in-from-top-2 duration-300`, children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "bg-red-500 rounded-full shadow-xl border border-white/20 backdrop-blur-sm", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
    ButtonBase,
    {
      onClick: onCloseAll,
      variant: "destructive",
      size: "sm",
      className: getVariantClasses(),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          import_ssr.XIcon,
          {
            size: 18,
            className: "\n              group-hover:rotate-90 transition-all duration-300 ease-out\n              drop-shadow-sm\n            "
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { className: "min-w-0 tracking-wide", children: "Fechar Todos" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          "div",
          {
            className: "\n            bg-white/20 text-white text-xs font-bold\n            rounded-full w-6 h-6 \n            flex items-center justify-center\n            transition-colors duration-200\n          ",
            children: count
          }
        )
      ]
    }
  ) }) });
};
var CloseAllButton_default = CloseAllButton;

// src/components/rechart/DraggableTooltip.tsx
var import_jsx_runtime49 = require("react/jsx-runtime");
var DraggableTooltip = ({
  id,
  data,
  position,
  title,
  dataKeys,
  finalColors,
  onClose,
  periodLabel = "Per\xEDodo Selecionado",
  dataLabel = "Dados do Per\xEDodo",
  showCloseAllButton = false,
  globalTooltipCount,
  onCloseAll,
  closeAllButtonPosition = "top-center",
  closeAllButtonVariant = "floating",
  onPositionChange
}) => {
  const [localPos, setLocalPos] = (0, import_react31.useState)(
    position
  );
  const [dragging, setDragging] = (0, import_react31.useState)(false);
  const offsetRef = (0, import_react31.useRef)({ x: 0, y: 0 });
  const lastMouse = (0, import_react31.useRef)({ x: 0, y: 0 });
  const [alignmentGuides, setAlignmentGuides] = (0, import_react31.useState)([]);
  const [globalTooltipCountLocal, setGlobalTooltipCountLocal] = (0, import_react31.useState)(0);
  (0, import_react31.useEffect)(() => setLocalPos(position), [position]);
  const ALIGNMENT_THRESHOLD = 25;
  const GUIDE_THRESHOLD = 60;
  const STRONG_SNAP_THRESHOLD = 35;
  const PRECISION_SNAP_THRESHOLD = 8;
  const getAllTooltips = (0, import_react31.useCallback)(() => {
    const response = [];
    const ev = new CustomEvent("requestGlobalTooltips", {
      detail: { requesterId: id, response }
    });
    window.dispatchEvent(ev);
    return response;
  }, [id]);
  const updateAlignmentGuides = (0, import_react31.useCallback)(
    (currentPosition) => {
      const allTooltips = getAllTooltips();
      const otherTooltips = allTooltips.filter((t) => t.id !== id);
      const guides = [];
      const tooltipDimensions = { width: 224, height: 120 };
      otherTooltips.forEach((tooltip) => {
        const topDiff = Math.abs(currentPosition.top - tooltip.position.top);
        if (topDiff <= GUIDE_THRESHOLD) {
          guides.push({
            type: "horizontal",
            position: tooltip.position.top,
            sourceTooltip: {
              top: currentPosition.top,
              left: currentPosition.left,
              width: tooltipDimensions.width,
              height: tooltipDimensions.height
            },
            targetTooltip: {
              top: tooltip.position.top,
              left: tooltip.position.left,
              width: tooltipDimensions.width,
              height: tooltipDimensions.height
            }
          });
        }
        const leftDiff = Math.abs(currentPosition.left - tooltip.position.left);
        if (leftDiff <= GUIDE_THRESHOLD) {
          guides.push({
            type: "vertical",
            position: tooltip.position.left,
            sourceTooltip: {
              top: currentPosition.top,
              left: currentPosition.left,
              width: tooltipDimensions.width,
              height: tooltipDimensions.height
            },
            targetTooltip: {
              top: tooltip.position.top,
              left: tooltip.position.left,
              width: tooltipDimensions.width,
              height: tooltipDimensions.height
            }
          });
        }
      });
      setAlignmentGuides(guides);
    },
    [getAllTooltips, id]
  );
  const snapToGuides = (0, import_react31.useCallback)(
    (position2) => {
      const snappedPosition = { ...position2 };
      let hasSnapped = false;
      alignmentGuides.forEach((guide) => {
        if (guide.type === "horizontal") {
          const diff = Math.abs(position2.top - guide.position);
          if (diff <= PRECISION_SNAP_THRESHOLD) {
            snappedPosition.top = guide.position;
            hasSnapped = true;
          }
        } else {
          const diff = Math.abs(position2.left - guide.position);
          if (diff <= PRECISION_SNAP_THRESHOLD) {
            snappedPosition.left = guide.position;
            hasSnapped = true;
          }
        }
      });
      if (!hasSnapped) {
        alignmentGuides.forEach((guide) => {
          if (guide.type === "horizontal") {
            const diff = Math.abs(position2.top - guide.position);
            if (diff <= STRONG_SNAP_THRESHOLD)
              snappedPosition.top = guide.position;
          } else {
            const diff = Math.abs(position2.left - guide.position);
            if (diff <= STRONG_SNAP_THRESHOLD)
              snappedPosition.left = guide.position;
          }
        });
      }
      alignmentGuides.forEach((guide) => {
        if (guide.type === "horizontal") {
          const diff = Math.abs(position2.top - guide.position);
          if (diff <= ALIGNMENT_THRESHOLD && snappedPosition.top === position2.top)
            snappedPosition.top = guide.position;
        } else {
          const diff = Math.abs(position2.left - guide.position);
          if (diff <= ALIGNMENT_THRESHOLD && snappedPosition.left === position2.left)
            snappedPosition.left = guide.position;
        }
      });
      return snappedPosition;
    },
    [alignmentGuides]
  );
  (0, import_react31.useEffect)(() => {
    let rafId = null;
    const handleMouseMove = (e) => {
      if (!dragging) return;
      lastMouse.current = { x: e.clientX, y: e.clientY };
      if (rafId) cancelAnimationFrame(rafId);
      rafId = requestAnimationFrame(() => {
        const newLeft = lastMouse.current.x - offsetRef.current.x;
        const newTop = lastMouse.current.y - offsetRef.current.y;
        const rawPosition = {
          top: Math.max(0, Math.min(newTop, window.innerHeight - 200)),
          left: Math.max(0, Math.min(newLeft, window.innerWidth - 250))
        };
        updateAlignmentGuides(rawPosition);
        const snapped = snapToGuides(rawPosition);
        setLocalPos(snapped);
        if (onPositionChange) onPositionChange(id, snapped);
      });
    };
    const handleMouseUp = () => {
      if (dragging) {
        setDragging(false);
        setAlignmentGuides([]);
        if (rafId) cancelAnimationFrame(rafId);
      }
    };
    if (dragging) {
      document.addEventListener("mousemove", handleMouseMove, {
        passive: true
      });
      document.addEventListener("mouseup", handleMouseUp);
      document.body.style.cursor = "grabbing";
      document.body.style.userSelect = "none";
    }
    return () => {
      if (rafId) cancelAnimationFrame(rafId);
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", handleMouseUp);
      document.body.style.cursor = "";
      document.body.style.userSelect = "";
    };
  }, [dragging, snapToGuides, updateAlignmentGuides, id, onPositionChange]);
  (0, import_react31.useEffect)(() => {
    const handleCloseAll = () => {
      onClose(id);
    };
    const handleRequestTooltipCount = () => {
      window.dispatchEvent(
        new CustomEvent("tooltipCountResponse", { detail: { count: 1 } })
      );
    };
    const handleRequestGlobalTooltips = (event) => {
      const customEvent = event;
      const detail = customEvent.detail;
      if (detail && detail.response && detail.requesterId) {
        if (!detail.response.find((t) => t.id === id)) {
          detail.response.push({ id, position: localPos });
        }
      }
    };
    window.addEventListener("closeAllTooltips", handleCloseAll);
    window.addEventListener("requestTooltipCount", handleRequestTooltipCount);
    window.addEventListener(
      "requestGlobalTooltips",
      handleRequestGlobalTooltips
    );
    return () => {
      window.removeEventListener("closeAllTooltips", handleCloseAll);
      window.removeEventListener(
        "requestTooltipCount",
        handleRequestTooltipCount
      );
      window.removeEventListener(
        "requestGlobalTooltips",
        handleRequestGlobalTooltips
      );
    };
  }, [id, localPos, onClose]);
  (0, import_react31.useEffect)(() => {
    if (dragging) return;
    let total = 0;
    const handleCountResponse = (event) => {
      const customEvent = event;
      total += customEvent.detail.count || 0;
    };
    window.addEventListener("tooltipCountResponse", handleCountResponse);
    window.dispatchEvent(new CustomEvent("requestTooltipCount"));
    const timeoutId = setTimeout(() => {
      window.removeEventListener("tooltipCountResponse", handleCountResponse);
      setGlobalTooltipCountLocal(total);
    }, 50);
    return () => {
      clearTimeout(timeoutId);
      window.removeEventListener("tooltipCountResponse", handleCountResponse);
    };
  }, [localPos, dragging]);
  (0, import_react31.useEffect)(() => {
    const recount = () => {
      if (dragging) return;
      let total = 0;
      const handleCountResponse = (event) => {
        const customEvent = event;
        total += customEvent.detail.count || 0;
      };
      window.addEventListener("tooltipCountResponse", handleCountResponse);
      window.dispatchEvent(new CustomEvent("requestTooltipCount"));
      setTimeout(() => {
        window.removeEventListener("tooltipCountResponse", handleCountResponse);
        setGlobalTooltipCountLocal(total);
      }, 50);
    };
    window.addEventListener("recountTooltips", recount);
    return () => window.removeEventListener("recountTooltips", recount);
  }, [dragging]);
  const handleMouseDownLocal = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const rect = e.currentTarget.getBoundingClientRect();
    offsetRef.current = { x: e.clientX - rect.left, y: e.clientY - rect.top };
    setDragging(true);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(import_jsx_runtime49.Fragment, { children: [
    dragging && alignmentGuides.map((guide, index) => {
      const isHorizontal = guide.type === "horizontal";
      const color = isHorizontal ? "#3b82f6" : "#ef4444";
      const startX = isHorizontal ? Math.min(
        guide.sourceTooltip.left + guide.sourceTooltip.width / 2,
        guide.targetTooltip.left + guide.targetTooltip.width / 2
      ) : guide.sourceTooltip.left + guide.sourceTooltip.width / 2;
      const endX = isHorizontal ? Math.max(
        guide.sourceTooltip.left + guide.sourceTooltip.width / 2,
        guide.targetTooltip.left + guide.targetTooltip.width / 2
      ) : guide.targetTooltip.left + guide.targetTooltip.width / 2;
      const startY = isHorizontal ? guide.sourceTooltip.top + guide.sourceTooltip.height / 2 : Math.min(
        guide.sourceTooltip.top + guide.sourceTooltip.height / 2,
        guide.targetTooltip.top + guide.targetTooltip.height / 2
      );
      const endY = isHorizontal ? guide.targetTooltip.top + guide.targetTooltip.height / 2 : Math.max(
        guide.sourceTooltip.top + guide.sourceTooltip.height / 2,
        guide.targetTooltip.top + guide.targetTooltip.height / 2
      );
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          "div",
          {
            className: "fixed pointer-events-none z-30",
            style: {
              left: startX,
              top: startY,
              width: isHorizontal ? endX - startX : "2px",
              height: isHorizontal ? "2px" : endY - startY,
              backgroundColor: color,
              boxShadow: `0 0 8px ${color}60`,
              opacity: 0.9,
              borderStyle: "dashed",
              borderWidth: "1px",
              borderColor: color,
              transform: "translateZ(0)"
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          "div",
          {
            className: "fixed pointer-events-none z-31",
            style: {
              left: guide.sourceTooltip.left + guide.sourceTooltip.width / 2 - 4,
              top: guide.sourceTooltip.top + guide.sourceTooltip.height / 2 - 4,
              width: "8px",
              height: "8px",
              backgroundColor: color,
              borderRadius: "50%",
              boxShadow: `0 0 4px ${color}80`,
              opacity: 0.8
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          "div",
          {
            className: "fixed pointer-events-none z-31",
            style: {
              left: guide.targetTooltip.left + guide.targetTooltip.width / 2 - 4,
              top: guide.targetTooltip.top + guide.targetTooltip.height / 2 - 4,
              width: "8px",
              height: "8px",
              backgroundColor: color,
              borderRadius: "50%",
              boxShadow: `0 0 4px ${color}80`,
              opacity: 0.8
            }
          }
        )
      ] }, index);
    }),
    /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
      "div",
      {
        className: "fixed bg-card border border-border rounded-lg shadow-lg z-50 min-w-56 select-none",
        style: {
          top: localPos.top,
          left: localPos.left,
          cursor: dragging ? "grabbing" : "grab"
        },
        onMouseDown: handleMouseDownLocal,
        onClick: (e) => e.stopPropagation(),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "flex items-center justify-between mb-2 p-3 pb-2 border-b bg-muted/20 rounded-t-lg", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "flex flex-col gap-1", children: title && /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "w-2 h-2 bg-blue-500 rounded-full" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "font-bold text-foreground text-base", children: title })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
              "button",
              {
                onClick: (e) => {
                  e.stopPropagation();
                  onClose(id);
                },
                className: "text-muted-foreground hover:text-destructive ml-2 text-sm hover:bg-destructive/10 rounded p-1",
                title: "Fechar este tooltip",
                children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(import_ssr2.XIcon, { size: 14 })
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "px-3 py-2 bg-accent/30 border-l-4 border-primary", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("span", { className: "text-xs font-medium text-muted-foreground uppercase tracking-wide", children: periodLabel }) }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "font-bold text-lg text-foreground mt-1", children: data.name })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "p-3 pt-2 space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-xs font-medium text-muted-foreground uppercase tracking-wide mb-2", children: dataLabel }),
            dataKeys.map((key) => {
              const value = data[key];
              if (value === void 0) return null;
              return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
                "div",
                {
                  className: "flex items-center justify-between gap-3 text-sm mb-2 p-2 rounded bg-muted/20 hover:bg-muted/40 transition-colors",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
                        "div",
                        {
                          className: "w-3 h-3 rounded-sm shadow-sm",
                          style: { backgroundColor: finalColors[key] || "#666" }
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("span", { className: "font-medium text-foreground", children: key.charAt(0).toUpperCase() + key.slice(1) })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("span", { className: "font-semibold text-foreground bg-background px-2 py-1 rounded text-xs", children: value.toLocaleString("pt-BR") })
                  ]
                },
                key
              );
            }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "mt-3 pt-2 border-t", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("p", { className: "text-xs text-muted-foreground flex items-center gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("span", { children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(import_react32.MouseIcon, {}) }),
              "Arraste para mover \u2022 Clique no ",
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(import_ssr2.XIcon, { size: 12 }),
              " para remover"
            ] }) })
          ] })
        ]
      }
    ),
    showCloseAllButton && onCloseAll && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
      CloseAllButton_default,
      {
        count: typeof globalTooltipCount === "number" ? globalTooltipCount : globalTooltipCountLocal,
        onCloseAll,
        position: closeAllButtonPosition,
        variant: closeAllButtonVariant
      }
    )
  ] });
};
var DraggableTooltip_default = DraggableTooltip;

// src/components/rechart/pillLabelRenderer.tsx
var import_jsx_runtime50 = require("react/jsx-runtime");
var formatCompactNumber = (value) => {
  if (value >= 1e9)
    return (value / 1e9).toFixed(1).replace(/\.0$/, "") + "B";
  if (value >= 1e6)
    return (value / 1e6).toFixed(1).replace(/\.0$/, "") + "M";
  if (value >= 1e3) return (value / 1e3).toFixed(1).replace(/\.0$/, "") + "K";
  return value.toString();
};
var parseNumber = (v) => {
  if (typeof v === "number") return v;
  if (typeof v === "string" && v.trim() !== "" && !Number.isNaN(Number(v)))
    return Number(v);
  return void 0;
};
var renderPillLabel = (color, variant) => {
  return (props) => {
    const { x, y, value } = props;
    const text = typeof value === "number" ? formatCompactNumber(value) : String(value ?? "");
    const paddingX = 8;
    const approxCharWidth = 7;
    const pillWidth = Math.max(
      40,
      String(text).length * approxCharWidth + paddingX * 2
    );
    const pillHeight = 20;
    const xNum = parseNumber(x);
    const px = parseNumber(props.x);
    const pWidth = parseNumber(props.width);
    const vb = props.viewBox;
    const cxNum = parseNumber(props.cx);
    let centerX;
    if (typeof px === "number" && typeof pWidth === "number") {
      centerX = px + pWidth / 2;
    } else if (typeof xNum === "number" && typeof pWidth === "number") {
      centerX = xNum + pWidth / 2;
    } else if (typeof cxNum === "number") {
      centerX = cxNum;
    } else if (vb && typeof vb.x === "number" && typeof vb.width === "number" && typeof props.index === "number") {
      const approxCols = Math.max(1, props.index + 1);
      const colWidth = vb.width / approxCols;
      centerX = vb.x + colWidth * (props.index + 0.5);
    } else if (vb && typeof vb.x === "number" && typeof vb.width === "number") {
      centerX = vb.x + vb.width / 2;
    } else {
      centerX = typeof props.index === "number" ? props.index * 40 + 24 : 0;
    }
    if (vb && typeof vb.x === "number" && typeof vb.width === "number") {
      const minX = vb.x + 0 + pillWidth / 22;
      const maxX = vb.x + vb.width - 2 - pillWidth / 2;
      centerX = Math.max(minX, Math.min(maxX, centerX));
    }
    const yNum = parseNumber(y);
    const py = parseNumber(props.y);
    const cyNum = parseNumber(props.cy);
    const centerY = yNum ?? (typeof py === "number" ? py : vb && typeof vb.y === "number" && typeof vb.height === "number" ? vb.y + vb.height / 2 : typeof cyNum === "number" ? cyNum : 0);
    const rectX = centerX - pillWidth / 2;
    const rectY = centerY - pillHeight - 6;
    const textX = centerX;
    const textY = rectY + pillHeight / 2 + 3;
    const rectFill = variant === "filled" ? color : variant === "soft" ? `${color}` : "#ffffff";
    const rectStroke = variant === "outline" ? `${color}CC` : void 0;
    const textColor = variant === "filled" ? "#ffffff" : variant === "outline" ? color : "#111827";
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("g", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        "rect",
        {
          x: rectX,
          y: rectY,
          rx: pillHeight / 2,
          width: pillWidth,
          height: pillHeight,
          fill: rectFill,
          stroke: rectStroke,
          strokeWidth: rectStroke ? 1 : 0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        "text",
        {
          x: textX,
          y: textY - 3,
          fill: textColor,
          fontSize: 13,
          fontWeight: 700,
          textAnchor: "middle",
          dominantBaseline: "central",
          letterSpacing: 0.2,
          children: text
        }
      )
    ] });
  };
};
var pillLabelRenderer_default = renderPillLabel;

// src/components/rechart/LineChart.tsx
var import_jsx_runtime51 = require("react/jsx-runtime");
var defaultData = [
  { name: "A", value: 100 },
  { name: "B", value: 200 },
  { name: "C", value: 150 }
];
var DEFAULT_COLORS = ["#55af7d", "#8e68ff", "#2273e1"];
var generateAdditionalColors = (baseColors, count) => {
  const colors2 = [...baseColors];
  const variations = [
    "#ff6b6b",
    "#4ecdc4",
    "#45b7d1",
    "#f9ca24",
    "#6c5ce7",
    "#a29bfe",
    "#fd79a8",
    "#00b894"
  ];
  while (colors2.length < count) {
    colors2.push(
      variations[(colors2.length - baseColors.length) % variations.length]
    );
  }
  return colors2;
};
var compactTick = (value) => {
  if (value >= 1e9)
    return (value / 1e9).toFixed(1).replace(/\.0$/, "") + "B";
  if (value >= 1e6)
    return (value / 1e6).toFixed(1).replace(/\.0$/, "") + "M";
  if (value >= 1e3) return (value / 1e3).toFixed(1).replace(/\.0$/, "") + "K";
  return String(value);
};
var CustomLineChart = ({
  data = defaultData,
  className,
  height = 300,
  width = "100%",
  colors: colors2 = DEFAULT_COLORS,
  gridColor,
  showGrid = true,
  showTooltip = true,
  showLegend = true,
  title,
  titlePosition = "left",
  strokeWidth = 2,
  showDots = true,
  showLabels = false
}) => {
  const [activeTooltips, setActiveTooltips] = (0, import_react33.useState)([]);
  const [isDragging, setIsDragging] = (0, import_react33.useState)(null);
  const [dragOffset, setDragOffset] = (0, import_react33.useState)({
    x: 0,
    y: 0
  });
  const [globalTooltipCount, setGlobalTooltipCount] = (0, import_react33.useState)(0);
  const [alignmentGuides, setAlignmentGuides] = (0, import_react33.useState)([]);
  const generateColors = (dataKeys2) => {
    const colorMap = {};
    const allColors = generateAdditionalColors(colors2, dataKeys2.length);
    dataKeys2.forEach((key, index) => {
      colorMap[key] = allColors[index] || colors2[index % colors2.length];
    });
    return colorMap;
  };
  const dataKeys = (0, import_react33.useMemo)(
    () => data.length > 0 ? Object.keys(data[0]).filter((key) => key !== "name") : [],
    [data]
  );
  const finalColors = generateColors(dataKeys);
  const niceCeil = (value) => {
    if (!isFinite(value) || value <= 0) return 1;
    const pow = Math.pow(10, Math.floor(Math.log10(value)));
    const normalized = value / pow;
    const multipliers = [
      1,
      1.25,
      1.5,
      2,
      2.5,
      3,
      4,
      5,
      7.5,
      10,
      15,
      20,
      25,
      50,
      100
    ];
    for (const m of multipliers) {
      if (m >= normalized) return Math.ceil(m * pow);
    }
    return Math.ceil(100 * pow);
  };
  const maxDataValue = (0, import_react33.useMemo)(() => {
    let max = 0;
    for (const row of data) {
      const r = row;
      for (const key of dataKeys) {
        const v = r[key];
        if (typeof v === "number" && Number.isFinite(v) && v > max)
          max = v;
      }
    }
    return max;
  }, [data, dataKeys]);
  const niceMax = (0, import_react33.useMemo)(() => {
    let padding = 0.08;
    if (maxDataValue > 1e6) padding = 0.05;
    if (maxDataValue > 1e7) padding = 0.03;
    if (maxDataValue === 0) padding = 0.12;
    const padded = maxDataValue * (1 + padding);
    return niceCeil(padded);
  }, [maxDataValue]);
  const ClickableDot = (props) => {
    const { cx, cy, payload, dataKey } = props;
    const handleDotClick = (e) => {
      e.stopPropagation();
      if (!payload || !cx || !cy) return;
      const tooltipId = `${payload.name}`;
      const existingIndex = activeTooltips.findIndex(
        (tooltip) => tooltip.id === tooltipId
      );
      if (existingIndex !== -1) {
        setActiveTooltips(
          (prev) => prev.filter((tooltip) => tooltip.id !== tooltipId)
        );
      } else {
        const newTooltip = {
          id: tooltipId,
          data: payload,
          position: {
            top: cy - 50,
            // Posição relativa ao SVG
            left: cx - 100
          }
        };
        setActiveTooltips((prev) => [...prev, newTooltip]);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
      "circle",
      {
        cx,
        cy,
        r: 6,
        fill: finalColors[dataKey || ""] || colors2[0],
        stroke: finalColors[dataKey || ""] || colors2[0],
        strokeWidth: 2,
        style: { cursor: "pointer" },
        onClick: handleDotClick
      }
    );
  };
  const handleChartClick = (e) => {
    if (e && e.activePayload && e.activePayload.length > 0) {
      const clickedData = e.activePayload[0].payload;
      const tooltipId = `${clickedData.name}`;
      const existingIndex = activeTooltips.findIndex(
        (tooltip) => tooltip.id === tooltipId
      );
      if (existingIndex !== -1) {
        setActiveTooltips(
          (prev) => prev.filter((tooltip) => tooltip.id !== tooltipId)
        );
      } else {
        const newTooltip = {
          id: tooltipId,
          data: clickedData,
          position: {
            top: (e.chartY || 100) - 10,
            left: (e.chartX || 100) - 100
          }
        };
        setActiveTooltips((prev) => [...prev, newTooltip]);
      }
    } else {
    }
  };
  const handleChartBackgroundClick = () => {
    setActiveTooltips([]);
  };
  const handleCloseAllTooltips = (0, import_react33.useCallback)(() => {
    window.dispatchEvent(new CustomEvent("closeAllTooltips"));
  }, []);
  const updateAlignmentGuides = (0, import_react33.useCallback)(
    (draggedTooltipId, draggedPosition) => {
      const SNAP_THRESHOLD = 15;
      const draggedTooltip = activeTooltips.find(
        (t) => t.id === draggedTooltipId
      );
      if (!draggedTooltip) return;
      const tooltipWidth = 200;
      const tooltipHeight = 80;
      const globalTooltips = [];
      window.dispatchEvent(
        new CustomEvent("requestGlobalTooltips", {
          detail: { requesterId: draggedTooltipId }
        })
      );
      activeTooltips.forEach((tooltip) => {
        if (tooltip.id !== draggedTooltipId) {
          globalTooltips.push({
            top: tooltip.position.top,
            left: tooltip.position.left,
            width: tooltipWidth,
            height: tooltipHeight,
            id: tooltip.id
          });
        }
      });
      const newGuides = [];
      globalTooltips.forEach((otherTooltip) => {
        const draggedCenter = {
          x: draggedPosition.left + tooltipWidth / 2,
          y: draggedPosition.top + tooltipHeight / 2
        };
        const otherCenter = {
          x: otherTooltip.left + otherTooltip.width / 2,
          y: otherTooltip.top + otherTooltip.height / 2
        };
        const horizontalDistance = Math.abs(draggedCenter.y - otherCenter.y);
        if (horizontalDistance <= SNAP_THRESHOLD) {
          newGuides.push({
            type: "horizontal",
            position: otherCenter.y,
            visible: true,
            sourceTooltip: {
              top: draggedPosition.top,
              left: draggedPosition.left,
              width: tooltipWidth,
              height: tooltipHeight
            },
            targetTooltip: {
              top: otherTooltip.top,
              left: otherTooltip.left,
              width: otherTooltip.width,
              height: otherTooltip.height
            }
          });
        }
        const verticalDistance = Math.abs(draggedCenter.x - otherCenter.x);
        if (verticalDistance <= SNAP_THRESHOLD) {
          newGuides.push({
            type: "vertical",
            position: otherCenter.x,
            visible: true,
            sourceTooltip: {
              top: draggedPosition.top,
              left: draggedPosition.left,
              width: tooltipWidth,
              height: tooltipHeight
            },
            targetTooltip: {
              top: otherTooltip.top,
              left: otherTooltip.left,
              width: otherTooltip.width,
              height: otherTooltip.height
            }
          });
        }
      });
      setAlignmentGuides(newGuides);
    },
    [activeTooltips]
  );
  const snapToGuides = (0, import_react33.useCallback)(
    (position) => {
      const SNAP_DISTANCE = 10;
      const snappedPosition = { ...position };
      alignmentGuides.forEach((guide) => {
        if (guide.type === "horizontal") {
          const tooltipCenter = position.top + 40;
          if (Math.abs(tooltipCenter - guide.position) <= SNAP_DISTANCE) {
            snappedPosition.top = guide.position - 40;
          }
        } else if (guide.type === "vertical") {
          const tooltipCenter = position.left + 100;
          if (Math.abs(tooltipCenter - guide.position) <= SNAP_DISTANCE) {
            snappedPosition.left = guide.position - 100;
          }
        }
      });
      return snappedPosition;
    },
    [alignmentGuides]
  );
  const handleMouseDown = (tooltipId, e) => {
    const rect = e.target.getBoundingClientRect();
    const offsetX = e.clientX - rect.left;
    const offsetY = e.clientY - rect.top;
    setIsDragging(tooltipId);
    setDragOffset({ x: offsetX, y: offsetY });
  };
  (0, import_react33.useEffect)(() => {
    let rafId;
    let lastMousePosition = { x: 0, y: 0 };
    const handleGlobalMouseMove = (e) => {
      if (!isDragging) return;
      lastMousePosition = { x: e.clientX, y: e.clientY };
      if (rafId) cancelAnimationFrame(rafId);
      rafId = requestAnimationFrame(() => {
        const newLeft = lastMousePosition.x - dragOffset.x;
        const newTop = lastMousePosition.y - dragOffset.y;
        let finalPosition = { top: newTop, left: newLeft };
        finalPosition = snapToGuides(finalPosition);
        setActiveTooltips(
          (prev) => prev.map(
            (tooltip) => tooltip.id === isDragging ? { ...tooltip, position: finalPosition } : tooltip
          )
        );
        updateAlignmentGuides(isDragging, finalPosition);
      });
    };
    const handleGlobalMouseUp = () => {
      if (rafId) cancelAnimationFrame(rafId);
      setIsDragging(null);
      setAlignmentGuides([]);
      document.body.style.cursor = "";
      document.body.style.userSelect = "";
    };
    if (isDragging) {
      document.body.style.cursor = "grabbing";
      document.body.style.userSelect = "none";
      window.addEventListener("mousemove", handleGlobalMouseMove);
      window.addEventListener("mouseup", handleGlobalMouseUp);
    }
    return () => {
      if (rafId) cancelAnimationFrame(rafId);
      window.removeEventListener("mousemove", handleGlobalMouseMove);
      window.removeEventListener("mouseup", handleGlobalMouseUp);
      document.body.style.cursor = "";
      document.body.style.userSelect = "";
    };
  }, [
    isDragging,
    dragOffset,
    alignmentGuides,
    updateAlignmentGuides,
    snapToGuides
  ]);
  (0, import_react33.useEffect)(() => {
    const handleCloseAllTooltips2 = () => {
      setActiveTooltips([]);
      setGlobalTooltipCount(0);
    };
    window.addEventListener("closeAllTooltips", handleCloseAllTooltips2);
    return () => {
      window.removeEventListener("closeAllTooltips", handleCloseAllTooltips2);
    };
  }, []);
  (0, import_react33.useEffect)(() => {
    const handleTooltipCountRequest = () => {
      window.dispatchEvent(
        new CustomEvent("tooltipCountResponse", {
          detail: { count: activeTooltips.length }
        })
      );
    };
    const handleGlobalTooltipsRequest = (event) => {
      const requesterId = event.detail?.requesterId;
      activeTooltips.forEach((tooltip) => {
        if (tooltip.id !== requesterId) {
          window.dispatchEvent(
            new CustomEvent("globalTooltipResponse", {
              detail: {
                tooltip: {
                  top: tooltip.position.top,
                  left: tooltip.position.left,
                  width: 200,
                  height: 80,
                  id: tooltip.id
                }
              }
            })
          );
        }
      });
    };
    window.addEventListener("requestTooltipCount", handleTooltipCountRequest);
    window.addEventListener(
      "requestGlobalTooltips",
      handleGlobalTooltipsRequest
    );
    return () => {
      window.removeEventListener(
        "requestTooltipCount",
        handleTooltipCountRequest
      );
      window.removeEventListener(
        "requestGlobalTooltips",
        handleGlobalTooltipsRequest
      );
    };
  }, [activeTooltips]);
  (0, import_react33.useEffect)(() => {
    if (isDragging) return;
    let totalCount = 0;
    const handleCountResponse = (event) => {
      const customEvent = event;
      totalCount += customEvent.detail.count;
    };
    window.addEventListener("tooltipCountResponse", handleCountResponse);
    window.dispatchEvent(new CustomEvent("requestTooltipCount"));
    const timeoutId = setTimeout(() => {
      window.removeEventListener("tooltipCountResponse", handleCountResponse);
      setGlobalTooltipCount(totalCount);
    }, 5);
    return () => {
      clearTimeout(timeoutId);
      window.removeEventListener("tooltipCountResponse", handleCountResponse);
    };
  }, [activeTooltips.length, isDragging]);
  const getTitleClass = () => {
    switch (titlePosition) {
      case "center":
        return "text-center";
      case "right":
        return "text-right";
      default:
        return "text-left";
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: cn("relative", className), children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(
    "div",
    {
      className: "rounded-lg bg-card p-4 relative border border-border",
      style: {
        width: typeof width === "number" ? `${width + 32}px` : "fit-content",
        maxWidth: "100%"
      },
      onClick: handleChartBackgroundClick,
      children: [
        title && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: cn("mb-4", getTitleClass()), children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h3", { className: "text-lg font-semibold text-foreground", children: title }) }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(
          import_recharts.LineChart,
          {
            data,
            width: typeof width === "number" ? width : 900,
            height,
            margin: {
              top: showLabels ? 48 : 20,
              right: 30,
              left: 20,
              bottom: 5
            },
            onClick: handleChartClick,
            children: [
              showGrid && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                import_recharts.CartesianGrid,
                {
                  strokeDasharray: "3 3",
                  stroke: gridColor || "hsl(var(--muted-foreground))",
                  opacity: 0.3
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                import_recharts.XAxis,
                {
                  dataKey: "name",
                  className: "fill-muted-foreground text-xs",
                  fontSize: 12
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                import_recharts.YAxis,
                {
                  className: "fill-muted-foreground text-xs",
                  fontSize: 12,
                  tickFormatter: (value) => compactTick(Number(value)),
                  domain: [0, niceMax],
                  tickCount: 6
                }
              ),
              showTooltip && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(import_recharts.Tooltip, { content: () => null }),
              showLegend && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                import_recharts.Legend,
                {
                  wrapperStyle: {
                    fontSize: "12px",
                    color: "hsl(var(--muted-foreground))"
                  }
                }
              ),
              dataKeys.map((key) => /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                import_recharts.Line,
                {
                  type: "monotone",
                  dataKey: key,
                  stroke: finalColors[key],
                  strokeWidth,
                  dot: showDots ? { r: 4, cursor: "pointer" } : false,
                  activeDot: (props) => /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(ClickableDot, { ...props, dataKey: key }),
                  children: showLabels && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                    import_recharts.LabelList,
                    {
                      dataKey: key,
                      position: "top",
                      content: pillLabelRenderer_default(
                        finalColors[key] || "#000",
                        "filled"
                      ),
                      offset: 14
                    }
                  )
                },
                key
              ))
            ]
          }
        ),
        alignmentGuides.map((guide, index) => {
          const isHorizontal = guide.type === "horizontal";
          const color = isHorizontal ? "#3b82f6" : "#ef4444";
          const startX = isHorizontal ? Math.min(
            guide.sourceTooltip.left + guide.sourceTooltip.width / 2,
            guide.targetTooltip.left + guide.targetTooltip.width / 2
          ) : guide.sourceTooltip.left + (isHorizontal ? 0 : guide.sourceTooltip.width / 2);
          const endX = isHorizontal ? Math.max(
            guide.sourceTooltip.left + guide.sourceTooltip.width / 2,
            guide.targetTooltip.left + guide.targetTooltip.width / 2
          ) : guide.targetTooltip.left + (isHorizontal ? 0 : guide.targetTooltip.width / 2);
          const startY = isHorizontal ? guide.sourceTooltip.top + (isHorizontal ? guide.sourceTooltip.height / 2 : 0) : Math.min(
            guide.sourceTooltip.top + guide.sourceTooltip.height / 2,
            guide.targetTooltip.top + guide.targetTooltip.height / 2
          );
          const endY = isHorizontal ? guide.targetTooltip.top + (isHorizontal ? guide.targetTooltip.height / 2 : 0) : Math.max(
            guide.sourceTooltip.top + guide.sourceTooltip.height / 2,
            guide.targetTooltip.top + guide.targetTooltip.height / 2
          );
          return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
              "div",
              {
                className: "fixed pointer-events-none z-30",
                style: {
                  left: startX,
                  top: startY,
                  width: isHorizontal ? endX - startX : "2px",
                  height: isHorizontal ? "2px" : endY - startY,
                  backgroundColor: color,
                  boxShadow: `0 0 8px ${color}60`,
                  opacity: 0.9,
                  borderStyle: "dashed",
                  borderWidth: "1px",
                  borderColor: color,
                  transform: "translateZ(0)"
                }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
              "div",
              {
                className: "fixed pointer-events-none z-31",
                style: {
                  left: guide.sourceTooltip.left + guide.sourceTooltip.width / 2 - 4,
                  top: guide.sourceTooltip.top + guide.sourceTooltip.height / 2 - 4,
                  width: "8px",
                  height: "8px",
                  backgroundColor: color,
                  borderRadius: "50%",
                  boxShadow: `0 0 4px ${color}80`,
                  opacity: 0.8
                }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
              "div",
              {
                className: "fixed pointer-events-none z-31",
                style: {
                  left: guide.targetTooltip.left + guide.targetTooltip.width / 2 - 4,
                  top: guide.targetTooltip.top + guide.targetTooltip.height / 2 - 4,
                  width: "8px",
                  height: "8px",
                  backgroundColor: color,
                  borderRadius: "50%",
                  boxShadow: `0 0 4px ${color}80`,
                  opacity: 0.8
                }
              }
            )
          ] }, index);
        }),
        activeTooltips.map((tooltip, index) => /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          DraggableTooltip_default,
          {
            id: tooltip.id,
            data: tooltip.data,
            position: tooltip.position,
            isDragging: isDragging === tooltip.id,
            title,
            dataKeys,
            finalColors,
            onMouseDown: (id, e) => handleMouseDown(id, e),
            onClose: (id) => {
              setActiveTooltips((prev) => prev.filter((t) => t.id !== id));
            },
            periodLabel: "Ponto Selecionado",
            dataLabel: "Dados do Ponto",
            showCloseAllButton: index === 0,
            globalTooltipCount,
            onCloseAll: handleCloseAllTooltips,
            closeAllButtonPosition: "top-center",
            closeAllButtonVariant: "floating"
          },
          tooltip.id
        ))
      ]
    }
  ) });
};
var LineChart_default = CustomLineChart;

// src/components/rechart/PieChart.tsx
var import_recharts2 = require("recharts");
var import_jsx_runtime52 = require("react/jsx-runtime");
var defaultData2 = [
  { name: "Vendas", value: 4e3 },
  { name: "Marketing", value: 3e3 },
  { name: "Desenvolvimento", value: 2e3 },
  { name: "Suporte", value: 1e3 },
  { name: "Outros", value: 800 }
];
var DEFAULT_COLORS2 = [
  "#55af7d",
  // verde do projeto
  "#8e68ff",
  // roxo do projeto
  "#2273e1",
  // azul do projeto
  "#f59e0b",
  // amarelo complementar
  "#ef4444",
  // vermelho complementar
  "#8b5cf6",
  // roxo claro
  "#06b6d4",
  // ciano
  "#84cc16"
  // verde lima
];
var RADIAN = Math.PI / 180;
var renderCustomizedLabel = ({ cx = 0, cy = 0, midAngle = 0, innerRadius = 0, outerRadius = 0, percent = 0 }) => {
  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
  const x = cx + radius * Math.cos(-midAngle * RADIAN);
  const y = cy + radius * Math.sin(-midAngle * RADIAN);
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
    "text",
    {
      x,
      y,
      fill: "white",
      textAnchor: x > cx ? "start" : "end",
      dominantBaseline: "central",
      fontSize: 12,
      fontWeight: "600",
      children: `${(percent * 100).toFixed(0)}%`
    }
  );
};
var CustomPieChart = ({
  data = defaultData2,
  className,
  height = 400,
  width = "100%",
  colors: colors2,
  showTooltip = true,
  showLegend = true,
  showLabels = true,
  innerRadius = 0,
  outerRadius = 120,
  centerX = "50%",
  centerY = "50%"
}) => {
  const finalColors = colors2 || DEFAULT_COLORS2;
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: cn("w-full rounded-lg bg-card p-4", className), children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(import_recharts2.ResponsiveContainer, { width, height, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(import_recharts2.PieChart, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
      import_recharts2.Pie,
      {
        data,
        cx: centerX,
        cy: centerY,
        labelLine: false,
        label: showLabels ? renderCustomizedLabel : false,
        outerRadius,
        innerRadius,
        fill: "#8884d8",
        dataKey: "value",
        children: data.map((entry, index) => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
          import_recharts2.Cell,
          {
            fill: finalColors[index % finalColors.length]
          },
          `cell-${entry.name}-${index}`
        ))
      }
    ),
    showTooltip && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
      import_recharts2.Tooltip,
      {
        contentStyle: {
          backgroundColor: "hsl(var(--popover))",
          border: "1px solid hsl(var(--border))",
          borderRadius: "6px",
          color: "hsl(var(--popover-foreground))"
        }
      }
    ),
    showLegend && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(import_recharts2.Legend, {})
  ] }) }) });
};
var PieChart_default = CustomPieChart;

// src/components/rechart/BarChart.tsx
var import_react34 = require("react");
var import_recharts3 = require("recharts");
var import_jsx_runtime53 = require("react/jsx-runtime");
var formatFieldName = (fieldName) => {
  return fieldName.replace(/([A-Z])/g, " $1").replace(/[_-]/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()).trim();
};
var detectXAxis = (data) => {
  if (!data || data.length === 0) return "name";
  const firstItem = data[0];
  const stringFields = Object.keys(firstItem).filter(
    (key) => typeof firstItem[key] === "string" || typeof firstItem[key] === "number" && String(firstItem[key]).length <= 4
    // Anos, IDs curtos
  );
  return stringFields[0] || Object.keys(firstItem)[0] || "name";
};
var detectDataFields = (data, xAxisKey) => {
  if (!data || data.length === 0) return [];
  const firstItem = data[0];
  return Object.keys(firstItem).filter(
    (key) => key !== xAxisKey && typeof firstItem[key] === "number"
  );
};
var DEFAULT_COLORS3 = ["#55af7d", "#8e68ff", "#2273e1"];
var generateAdditionalColors2 = (baseColors, count) => {
  const colors2 = [...baseColors];
  const variations = [
    "#ff6b6b",
    "#4ecdc4",
    "#45b7d1",
    "#f9ca24",
    "#6c5ce7",
    "#a29bfe",
    "#fd79a8",
    "#00b894"
  ];
  while (colors2.length < count) {
    colors2.push(
      variations[(colors2.length - baseColors.length) % variations.length]
    );
  }
  return colors2;
};
var BarChart = ({
  data,
  className,
  height = 350,
  width = 900,
  colors: colors2 = DEFAULT_COLORS3,
  gridColor,
  showGrid = true,
  showTooltip = true,
  showLegend = true,
  title,
  titlePosition = "left",
  showLabels = false,
  xAxis,
  mapper,
  yAxis,
  labelMap,
  autoDetect = false
}) => {
  const smartConfig = (0, import_react34.useMemo)(() => {
    const providedMapper = yAxis ?? mapper;
    if (autoDetect === true || xAxis == null || providedMapper == null) {
      const detectedXAxis = detectXAxis(data);
      const detectedFields = detectDataFields(data, detectedXAxis);
      return {
        xAxisConfig: {
          dataKey: detectedXAxis,
          label: labelMap?.[detectedXAxis] ?? formatFieldName(detectedXAxis),
          autoLabel: true
        },
        mapperConfig: detectedFields.reduce((acc, field) => {
          acc[field] = {
            label: labelMap?.[field] ?? formatFieldName(field),
            type: "number",
            visible: true
          };
          return acc;
        }, {})
      };
    }
    const xAxisConfig2 = typeof xAxis === "string" ? { dataKey: xAxis, label: formatFieldName(xAxis), autoLabel: true } : xAxis;
    let mapperConfig2;
    if (Array.isArray(providedMapper)) {
      mapperConfig2 = providedMapper.reduce((acc, field) => {
        acc[field] = {
          label: labelMap?.[field] ?? formatFieldName(field),
          type: "auto",
          visible: true
        };
        return acc;
      }, {});
    } else {
      mapperConfig2 = Object.keys(providedMapper).reduce(
        (acc, key) => {
          acc[key] = {
            label: providedMapper[key]?.label ?? labelMap?.[key] ?? formatFieldName(key),
            type: "auto",
            visible: true,
            ...providedMapper[key]
            // Sobrescreve com configurações do usuário
          };
          return acc;
        },
        {}
      );
    }
    return { xAxisConfig: xAxisConfig2, mapperConfig: mapperConfig2 };
  }, [data, xAxis, mapper, yAxis, autoDetect, labelMap]);
  const { xAxisConfig, mapperConfig } = smartConfig;
  const [activeTooltips, setActiveTooltips] = (0, import_react34.useState)([]);
  const [isDragging, setIsDragging] = (0, import_react34.useState)(null);
  const [dragOffset, setDragOffset] = (0, import_react34.useState)({
    x: 0,
    y: 0
  });
  const [globalTooltipCount, setGlobalTooltipCount] = (0, import_react34.useState)(0);
  const [alignmentGuides, setAlignmentGuides] = (0, import_react34.useState)([]);
  const processedData = data.map((item) => ({
    ...item,
    name: String(item[xAxisConfig.dataKey] || "N/A")
    // Garantir propriedade 'name' para tooltip
  }));
  const generateColors = (dataKeys2) => {
    const colorMap = {};
    const allColors = generateAdditionalColors2(colors2, dataKeys2.length);
    dataKeys2.forEach((key, index) => {
      colorMap[key] = allColors[index] || colors2[index % colors2.length];
    });
    return colorMap;
  };
  const dataKeys = Object.keys(mapperConfig);
  const finalColors = generateColors(dataKeys);
  const adaptDataForTooltip = (universalData) => {
    return {
      ...universalData,
      name: String(universalData[xAxisConfig.dataKey] || "N/A")
      // Garantir que tem a propriedade 'name'
    };
  };
  const niceCeil = (value) => {
    if (!isFinite(value) || value <= 0) return 1;
    const pow = Math.pow(10, Math.floor(Math.log10(value)));
    const normalized = value / pow;
    const multipliers = [
      1,
      1.25,
      1.5,
      2,
      2.5,
      3,
      4,
      5,
      7.5,
      10,
      15,
      20,
      25,
      50,
      100
    ];
    for (const m of multipliers) {
      if (m >= normalized) return Math.ceil(m * pow);
    }
    return Math.ceil(100 * pow);
  };
  const maxDataValue = (0, import_react34.useMemo)(() => {
    let max = 0;
    const keys = Object.keys(mapperConfig);
    for (const row of processedData) {
      const r = row;
      for (const key of keys) {
        const v = r[key];
        if (typeof v === "number" && Number.isFinite(v) && v > max)
          max = v;
      }
    }
    return max;
  }, [processedData, mapperConfig]);
  const niceMax = (0, import_react34.useMemo)(() => {
    let padding = 0.08;
    if (maxDataValue > 1e6) padding = 0.05;
    if (maxDataValue > 1e7) padding = 0.03;
    if (maxDataValue === 0) padding = 0.12;
    const padded = maxDataValue * (1 + padding);
    return niceCeil(padded);
  }, [maxDataValue]);
  const handleBarClick = (data2, index, event) => {
    event.stopPropagation();
    const xAxisValue = data2[xAxisConfig.dataKey] || "N/A";
    const tooltipId = `${xAxisValue}`;
    const rect = event.target.getBoundingClientRect();
    const existingIndex = activeTooltips.findIndex(
      (tooltip) => tooltip.id === tooltipId
    );
    if (existingIndex !== -1) {
      setActiveTooltips(
        (prev) => prev.filter((tooltip) => tooltip.id !== tooltipId)
      );
    } else {
      const newTooltip = {
        id: tooltipId,
        data: data2,
        position: {
          top: rect.top - 10,
          // Posição fixa da viewport
          left: rect.right + 10
          // À direita da barra clicada
        }
      };
      setActiveTooltips((prev) => [...prev, newTooltip]);
    }
  };
  const handleChartClick = () => {
    setActiveTooltips([]);
  };
  const ALIGNMENT_THRESHOLD = 25;
  const GUIDE_THRESHOLD = 60;
  const STRONG_SNAP_THRESHOLD = 35;
  const PRECISION_SNAP_THRESHOLD = 8;
  const updateAlignmentGuides = (0, import_react34.useCallback)(
    (draggedTooltipId, currentPosition) => {
      if (!isDragging) return;
      const getAllTooltips = () => {
        const allTooltips2 = [];
        allTooltips2.push(...activeTooltips);
        const globalEvent = new CustomEvent("requestGlobalTooltips", {
          detail: { requesterId: draggedTooltipId, response: allTooltips2 }
        });
        window.dispatchEvent(globalEvent);
        return allTooltips2;
      };
      const allTooltips = getAllTooltips();
      const otherTooltips = allTooltips.filter(
        (t) => t.id !== draggedTooltipId
      );
      const guides = [];
      const tooltipDimensions = { width: 224, height: 120 };
      otherTooltips.forEach((tooltip) => {
        const topDiff = Math.abs(currentPosition.top - tooltip.position.top);
        if (topDiff <= GUIDE_THRESHOLD) {
          guides.push({
            type: "horizontal",
            position: tooltip.position.top,
            visible: true,
            sourceTooltip: {
              top: currentPosition.top,
              left: currentPosition.left,
              width: tooltipDimensions.width,
              height: tooltipDimensions.height
            },
            targetTooltip: {
              top: tooltip.position.top,
              left: tooltip.position.left,
              width: tooltipDimensions.width,
              height: tooltipDimensions.height
            }
          });
        }
        const leftDiff = Math.abs(currentPosition.left - tooltip.position.left);
        if (leftDiff <= GUIDE_THRESHOLD) {
          guides.push({
            type: "vertical",
            position: tooltip.position.left,
            visible: true,
            sourceTooltip: {
              top: currentPosition.top,
              left: currentPosition.left,
              width: tooltipDimensions.width,
              height: tooltipDimensions.height
            },
            targetTooltip: {
              top: tooltip.position.top,
              left: tooltip.position.left,
              width: tooltipDimensions.width,
              height: tooltipDimensions.height
            }
          });
        }
      });
      setAlignmentGuides(guides);
    },
    [isDragging, activeTooltips]
  );
  const snapToGuides = (0, import_react34.useCallback)(
    (position) => {
      const snappedPosition = { ...position };
      let hasSnapped = false;
      alignmentGuides.forEach((guide) => {
        if (guide.type === "horizontal") {
          const diff = Math.abs(position.top - guide.position);
          if (diff <= PRECISION_SNAP_THRESHOLD) {
            snappedPosition.top = guide.position;
            hasSnapped = true;
          }
        } else if (guide.type === "vertical") {
          const diff = Math.abs(position.left - guide.position);
          if (diff <= PRECISION_SNAP_THRESHOLD) {
            snappedPosition.left = guide.position;
            hasSnapped = true;
          }
        }
      });
      if (!hasSnapped) {
        alignmentGuides.forEach((guide) => {
          if (guide.type === "horizontal") {
            const diff = Math.abs(position.top - guide.position);
            if (diff <= STRONG_SNAP_THRESHOLD) {
              snappedPosition.top = guide.position;
            }
          } else if (guide.type === "vertical") {
            const diff = Math.abs(position.left - guide.position);
            if (diff <= STRONG_SNAP_THRESHOLD) {
              snappedPosition.left = guide.position;
            }
          }
        });
      }
      alignmentGuides.forEach((guide) => {
        if (guide.type === "horizontal") {
          const diff = Math.abs(position.top - guide.position);
          if (diff <= ALIGNMENT_THRESHOLD && snappedPosition.top === position.top) {
            snappedPosition.top = guide.position;
          }
        } else if (guide.type === "vertical") {
          const diff = Math.abs(position.left - guide.position);
          if (diff <= ALIGNMENT_THRESHOLD && snappedPosition.left === position.left) {
            snappedPosition.left = guide.position;
          }
        }
      });
      return snappedPosition;
    },
    [alignmentGuides]
  );
  const handleMouseDown = (e, tooltipId) => {
    e.preventDefault();
    e.stopPropagation();
    const tooltip = activeTooltips.find((t) => t.id === tooltipId);
    if (!tooltip) return;
    const rect = e.currentTarget.getBoundingClientRect();
    const offsetX = e.clientX - rect.left;
    const offsetY = e.clientY - rect.top;
    setIsDragging(tooltipId);
    setDragOffset({ x: offsetX, y: offsetY });
  };
  (0, import_react34.useEffect)(() => {
    let rafId;
    let lastMousePosition = { x: 0, y: 0 };
    const handleGlobalMouseMove = (e) => {
      if (!isDragging) return;
      lastMousePosition = { x: e.clientX, y: e.clientY };
      if (rafId) cancelAnimationFrame(rafId);
      rafId = requestAnimationFrame(() => {
        const newLeft = lastMousePosition.x - dragOffset.x;
        const newTop = lastMousePosition.y - dragOffset.y;
        const rawPosition = {
          top: Math.max(0, Math.min(newTop, window.innerHeight - 200)),
          left: Math.max(0, Math.min(newLeft, window.innerWidth - 250))
        };
        updateAlignmentGuides(isDragging, rawPosition);
        const snappedPosition = snapToGuides(rawPosition);
        setActiveTooltips(
          (prev) => prev.map((tooltip) => {
            if (tooltip.id === isDragging) {
              return {
                ...tooltip,
                position: snappedPosition
              };
            }
            return tooltip;
          })
        );
      });
    };
    const handleGlobalMouseUp = () => {
      if (isDragging) {
        setIsDragging(null);
        setAlignmentGuides([]);
        if (rafId) cancelAnimationFrame(rafId);
      }
    };
    if (isDragging) {
      document.addEventListener("mousemove", handleGlobalMouseMove, {
        passive: true
      });
      document.addEventListener("mouseup", handleGlobalMouseUp);
      document.body.style.cursor = "grabbing";
      document.body.style.userSelect = "none";
    }
    return () => {
      if (rafId) cancelAnimationFrame(rafId);
      document.removeEventListener("mousemove", handleGlobalMouseMove);
      document.removeEventListener("mouseup", handleGlobalMouseUp);
      document.body.style.cursor = "";
      document.body.style.userSelect = "";
    };
  }, [
    isDragging,
    dragOffset,
    alignmentGuides,
    updateAlignmentGuides,
    snapToGuides
  ]);
  (0, import_react34.useEffect)(() => {
    const handleCloseAllTooltips = () => {
      setActiveTooltips([]);
      setGlobalTooltipCount(0);
    };
    window.addEventListener("closeAllTooltips", handleCloseAllTooltips);
    return () => {
      window.removeEventListener("closeAllTooltips", handleCloseAllTooltips);
    };
  }, []);
  (0, import_react34.useEffect)(() => {
    const handleTooltipCountRequest = () => {
      window.dispatchEvent(
        new CustomEvent("tooltipCountResponse", {
          detail: { count: activeTooltips.length }
        })
      );
    };
    const handleGlobalTooltipsRequest = (event) => {
      const { detail } = event;
      if (detail && detail.response && detail.requesterId) {
        activeTooltips.forEach((tooltip) => {
          if (!detail.response.find(
            (t) => t.id === tooltip.id
          )) {
            detail.response.push({
              id: tooltip.id,
              position: tooltip.position
            });
          }
        });
      }
    };
    window.addEventListener("requestTooltipCount", handleTooltipCountRequest);
    window.addEventListener(
      "requestGlobalTooltips",
      handleGlobalTooltipsRequest
    );
    return () => {
      window.removeEventListener(
        "requestTooltipCount",
        handleTooltipCountRequest
      );
      window.removeEventListener(
        "requestGlobalTooltips",
        handleGlobalTooltipsRequest
      );
    };
  }, [activeTooltips]);
  (0, import_react34.useEffect)(() => {
    if (isDragging) return;
    let totalCount = 0;
    const handleCountResponse = (event) => {
      const customEvent = event;
      totalCount += customEvent.detail.count;
    };
    window.addEventListener("tooltipCountResponse", handleCountResponse);
    window.dispatchEvent(new CustomEvent("requestTooltipCount"));
    const timeoutId = setTimeout(() => {
      window.removeEventListener("tooltipCountResponse", handleCountResponse);
      setGlobalTooltipCount(totalCount);
    }, 5);
    return () => {
      clearTimeout(timeoutId);
      window.removeEventListener("tooltipCountResponse", handleCountResponse);
    };
  }, [activeTooltips.length, isDragging]);
  const CustomTooltip = ({
    active,
    payload,
    label
  }) => {
    if (!active || !payload) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "bg-card border border-border rounded-lg p-3 shadow-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "font-medium text-foreground mb-2", children: label }),
      payload.map(
        (entry, index) => /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center gap-2 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            "div",
            {
              className: "w-3 h-3 rounded-sm",
              style: { backgroundColor: entry.color }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("span", { className: "text-muted-foreground", children: [
            entry.name,
            ":"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { className: "text-foreground font-medium", children: entry.value?.toLocaleString("pt-BR") })
        ] }, index)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-xs text-muted-foreground mt-1", children: "Clique para fixar este tooltip" })
    ] });
  };
  const getTitleClassName = (position) => {
    const baseClasses = "text-xl font-semibold text-foreground mb-3";
    switch (position) {
      case "center":
        return `${baseClasses} text-center`;
      case "right":
        return `${baseClasses} text-right`;
      default:
        return `${baseClasses} text-left`;
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(
    "div",
    {
      className: cn("rounded-lg bg-card p-4 relative", className),
      style: {
        width: typeof width === "number" ? `${width + 32}px` : "fit-content",
        maxWidth: "100%"
      },
      children: [
        title && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h3", { className: getTitleClassName(titlePosition), children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(
          import_recharts3.BarChart,
          {
            data: processedData,
            width: typeof width === "number" ? width : 900,
            height,
            margin: { top: showLabels ? 48 : 20, right: 30, left: 20, bottom: 5 },
            onClick: handleChartClick,
            children: [
              showGrid && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                import_recharts3.CartesianGrid,
                {
                  strokeDasharray: "3 3",
                  stroke: gridColor || "hsl(var(--muted-foreground))",
                  opacity: 0.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                import_recharts3.XAxis,
                {
                  dataKey: xAxisConfig.dataKey,
                  stroke: "hsl(var(--muted-foreground))",
                  fontSize: 12,
                  tickLine: false,
                  axisLine: false,
                  tickFormatter: xAxisConfig.formatter
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                import_recharts3.YAxis,
                {
                  stroke: "hsl(var(--muted-foreground))",
                  fontSize: 12,
                  tickLine: false,
                  axisLine: false,
                  tickFormatter: (value) => value.toLocaleString("pt-BR"),
                  domain: [0, niceMax],
                  tickCount: 6
                }
              ),
              showTooltip && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                import_recharts3.Tooltip,
                {
                  content: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(CustomTooltip, {}),
                  cursor: { fill: "hsl(var(--muted))", opacity: 0.1 }
                }
              ),
              showLegend && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                import_recharts3.Legend,
                {
                  wrapperStyle: {
                    color: "hsl(var(--foreground))",
                    fontSize: "14px"
                  }
                }
              ),
              dataKeys.map((key) => {
                const fieldConfig = mapperConfig[key];
                return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                  import_recharts3.Bar,
                  {
                    dataKey: key,
                    name: fieldConfig?.label || key,
                    fill: fieldConfig?.color || finalColors[key],
                    radius: [4, 4, 0, 0],
                    onClick: handleBarClick,
                    style: { cursor: "pointer" },
                    activeBar: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                      import_recharts3.Rectangle,
                      {
                        fill: finalColors[key],
                        stroke: finalColors[key],
                        strokeWidth: 2,
                        opacity: 0.8
                      }
                    ),
                    children: showLabels && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                      import_recharts3.LabelList,
                      {
                        dataKey: key,
                        position: "top",
                        content: pillLabelRenderer_default(
                          finalColors[key] || "#000",
                          "filled"
                        )
                      }
                    )
                  },
                  key
                );
              })
            ]
          }
        ),
        alignmentGuides.map((guide, index) => {
          const isHorizontal = guide.type === "horizontal";
          const color = isHorizontal ? "#3b82f6" : "#ef4444";
          const startX = isHorizontal ? Math.min(
            guide.sourceTooltip.left + guide.sourceTooltip.width / 2,
            guide.targetTooltip.left + guide.targetTooltip.width / 2
          ) : guide.sourceTooltip.left + (isHorizontal ? 0 : guide.sourceTooltip.width / 2);
          const endX = isHorizontal ? Math.max(
            guide.sourceTooltip.left + guide.sourceTooltip.width / 2,
            guide.targetTooltip.left + guide.targetTooltip.width / 2
          ) : guide.targetTooltip.left + (isHorizontal ? 0 : guide.targetTooltip.width / 2);
          const startY = isHorizontal ? guide.sourceTooltip.top + (isHorizontal ? guide.sourceTooltip.height / 2 : 0) : Math.min(
            guide.sourceTooltip.top + guide.sourceTooltip.height / 2,
            guide.targetTooltip.top + guide.targetTooltip.height / 2
          );
          const endY = isHorizontal ? guide.targetTooltip.top + (isHorizontal ? guide.targetTooltip.height / 2 : 0) : Math.max(
            guide.sourceTooltip.top + guide.sourceTooltip.height / 2,
            guide.targetTooltip.top + guide.targetTooltip.height / 2
          );
          return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
              "div",
              {
                className: "fixed pointer-events-none z-30",
                style: {
                  left: startX,
                  top: startY,
                  width: isHorizontal ? endX - startX : "2px",
                  height: isHorizontal ? "2px" : endY - startY,
                  backgroundColor: color,
                  boxShadow: `0 0 8px ${color}60`,
                  opacity: 0.9,
                  borderStyle: "dashed",
                  borderWidth: "1px",
                  borderColor: color,
                  transform: "translateZ(0)"
                }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
              "div",
              {
                className: "fixed pointer-events-none z-31",
                style: {
                  left: guide.sourceTooltip.left + guide.sourceTooltip.width / 2 - 4,
                  top: guide.sourceTooltip.top + guide.sourceTooltip.height / 2 - 4,
                  width: "8px",
                  height: "8px",
                  backgroundColor: color,
                  borderRadius: "50%",
                  boxShadow: `0 0 4px ${color}80`,
                  opacity: 0.8
                }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
              "div",
              {
                className: "fixed pointer-events-none z-31",
                style: {
                  left: guide.targetTooltip.left + guide.targetTooltip.width / 2 - 4,
                  top: guide.targetTooltip.top + guide.targetTooltip.height / 2 - 4,
                  width: "8px",
                  height: "8px",
                  backgroundColor: color,
                  borderRadius: "50%",
                  boxShadow: `0 0 4px ${color}80`,
                  opacity: 0.8
                }
              }
            )
          ] }, index);
        }),
        activeTooltips.map((tooltip, index) => /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
          DraggableTooltip_default,
          {
            id: tooltip.id,
            data: adaptDataForTooltip(tooltip.data),
            position: tooltip.position,
            isDragging: isDragging === tooltip.id,
            title,
            dataKeys,
            finalColors,
            onMouseDown: (id, e) => handleMouseDown(e, id),
            onClose: (id) => {
              setActiveTooltips((prev) => prev.filter((t) => t.id !== id));
            },
            periodLabel: "Per\xEDodo Selecionado",
            dataLabel: "Dados do Per\xEDodo",
            showCloseAllButton: index === 0,
            globalTooltipCount,
            onCloseAll: () => {
              window.dispatchEvent(new Event("closeAllTooltips"));
            },
            closeAllButtonPosition: "top-center",
            closeAllButtonVariant: "floating"
          },
          tooltip.id
        ))
      ]
    }
  );
};
var BarChart_default = BarChart;

// src/components/rechart/Chart.tsx
var import_react37 = require("react");
var import_recharts4 = require("recharts");

// src/components/rechart/helpers.ts
var formatFieldName2 = (fieldName) => {
  return fieldName.replace(/([A-Z])/g, " $1").replace(/[_-]/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()).trim();
};
var detectDataFields2 = (data, xAxisKey) => {
  if (!data || data.length === 0) return [];
  const firstItem = data[0];
  return Object.keys(firstItem).filter(
    (key) => key !== xAxisKey && typeof firstItem[key] === "number"
  );
};
var generateAdditionalColors3 = (baseColors, count) => {
  const hexToRgb = (hex) => {
    const clean = hex.replace("#", "");
    const bigint = parseInt(
      clean.length === 3 ? clean.split("").map((c) => c + c).join("") : clean,
      16
    );
    return { r: bigint >> 16 & 255, g: bigint >> 8 & 255, b: bigint & 255 };
  };
  const rgbToHsl = ({ r, g, b }) => {
    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b), min = Math.min(r, g, b);
    let h = 0;
    let s = 0;
    const l = (max + min) / 2;
    if (max !== min) {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: Math.round(h * 360),
      s: Math.round(s * 100),
      l: Math.round(l * 100)
    };
  };
  const hslToHex = (h, s, l) => {
    s /= 100;
    l /= 100;
    const k = (n) => (n + h / 30) % 5;
    const a = s * Math.min(l, 1 - l);
    const f = (n) => {
      const color = l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
      return Math.round(255 * color).toString(16).padStart(2, "0");
    };
    return `#${f(0)}${f(8)}${f(4)}`;
  };
  const anchors = baseColors.map((c) => rgbToHsl(hexToRgb(c)));
  const colors2 = [...baseColors];
  let i = 0;
  while (colors2.length < count) {
    const anchor = anchors[i % anchors.length];
    const step = Math.floor(i / anchors.length + 1);
    const hueOffset = step * 25 * (i % 2 === 0 ? 1 : -1);
    const satOffset = i % 3 === 0 ? -6 : 6;
    const lightOffset = i % 4 === 0 ? 6 : -4;
    const newH = (anchor.h + hueOffset + 360) % 360;
    const newS = Math.max(30, Math.min(95, anchor.s + satOffset));
    const newL = Math.max(25, Math.min(45, anchor.l + lightOffset));
    colors2.push(hslToHex(newH, newS, newL));
    i += 1;
  }
  return colors2.slice(0, count);
};

// src/components/rechart/PeriodsDropdown.tsx
var import_react35 = require("react");
var import_framer_motion7 = require("framer-motion");
var import_ssr3 = require("@phosphor-icons/react/dist/ssr");
var import_ssr4 = require("@phosphor-icons/react/dist/ssr");
var import_jsx_runtime54 = require("react/jsx-runtime");
var menuVariants = {
  hidden: { opacity: 0, y: -6, scale: 0.98 },
  visible: { opacity: 1, y: 0, scale: 1 },
  exit: { opacity: 0, y: -6, scale: 0.98 }
};
var itemVariants = {
  hidden: { opacity: 0, x: -6 },
  visible: { opacity: 1, x: 0 }
};
var PeriodsDropdown = ({
  processedData,
  onOpenPeriod,
  rightOffset,
  topOffset,
  activePeriod,
  activePeriods
}) => {
  const periods = processedData.map((d) => String(d.name));
  const [open, setOpen] = (0, import_react35.useState)(false);
  const wrapperRef = (0, import_react35.useRef)(null);
  const firstItemRef = (0, import_react35.useRef)(null);
  const listRef = (0, import_react35.useRef)(null);
  (0, import_react35.useEffect)(() => {
    const handleClickOutside = (e) => {
      if (!wrapperRef.current) return;
      if (!wrapperRef.current.contains(e.target)) setOpen(false);
    };
    const handleEscape = (e) => {
      if (e.key === "Escape") setOpen(false);
    };
    document.addEventListener("mousedown", handleClickOutside);
    document.addEventListener("keydown", handleEscape);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
      document.removeEventListener("keydown", handleEscape);
    };
  }, []);
  (0, import_react35.useEffect)(() => {
    if (open && firstItemRef.current) {
      firstItemRef.current.focus();
    }
  }, [open]);
  const handleSelect = (p) => {
    onOpenPeriod(p);
    setOpen(false);
  };
  const containerStyle = typeof rightOffset === "number" ? { position: "relative", zIndex: 60 } : { position: "relative", zIndex: 60 };
  return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { ref: wrapperRef, style: containerStyle, className: "mr-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
      "button",
      {
        className: "relative p-2 rounded-md hover:bg-accent/10 focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 transition z-10 flex items-center",
        "aria-expanded": open,
        onClick: () => setOpen((v) => !v),
        onKeyDown: (e) => {
          if (e.key === "ArrowDown") setOpen(true);
        },
        title: open ? "Fechar lista de per\xEDodos" : "Abrir lista de per\xEDodos",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(import_ssr3.DotsThreeIcon, { size: 18 }),
          periods.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "absolute -top-1 -right-1 bg-accent text-foreground text-xs rounded-full w-5 h-5 flex items-center justify-center", children: periods.length })
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(import_framer_motion7.AnimatePresence, { children: open && /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
      import_framer_motion7.motion.div,
      {
        initial: "hidden",
        animate: "visible",
        exit: "exit",
        variants: menuVariants,
        transition: { type: "spring", stiffness: 500, damping: 30 },
        className: "bg-card border border-border rounded-lg shadow-lg overflow-hidden",
        style: {
          minWidth: 180,
          maxHeight: 260,
          overflow: "hidden",
          position: "absolute",
          top: typeof topOffset === "number" ? topOffset : "calc(100% + 6px)",
          right: typeof rightOffset === "number" ? rightOffset : 0
        },
        role: "menu",
        "aria-orientation": "vertical",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "px-3 py-2 text-sm font-medium text-muted-foreground", children: "Per\xEDodos" }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "h-px bg-border" }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
            "div",
            {
              ref: listRef,
              className: "flex flex-col p-2 gap-1",
              style: { maxHeight: 200, overflowY: "auto" },
              children: periods.map((p, idx) => /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
                import_framer_motion7.motion.button,
                {
                  className: "flex items-center justify-between w-full text-left px-3 py-2 rounded focus:outline-none transition-colors " + (activePeriods && activePeriods.includes(p) || p === activePeriod ? "bg-accent/10" : "hover:bg-accent/5 focus:bg-accent/10"),
                  variants: itemVariants,
                  initial: "hidden",
                  animate: "visible",
                  whileTap: { scale: 0.98 },
                  onClick: () => handleSelect(p),
                  ref: idx === 0 ? firstItemRef : void 0,
                  role: "menuitem",
                  "aria-checked": activePeriods && activePeriods.includes(p) || p === activePeriod,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "truncate", children: p }),
                    (activePeriods && activePeriods.includes(p) || p === activePeriod) && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "ml-2 text-primary", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(import_ssr4.Check, { size: 16, weight: "bold" }) })
                  ]
                },
                p
              ))
            }
          )
        ]
      }
    ) })
  ] });
};
var PeriodsDropdown_default = PeriodsDropdown;

// src/components/rechart/ShowOnly.tsx
var import_framer_motion8 = require("framer-motion");
var import_react36 = require("@phosphor-icons/react");
var import_jsx_runtime55 = require("react/jsx-runtime");
var ShowOnly = ({
  showOnlyHighlighted,
  setShowOnlyHighlighted,
  highlightedSeriesSize
}) => {
  const hasHighlights = highlightedSeriesSize > 0;
  if (!hasHighlights) return null;
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "ml-auto flex items-center gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
    import_framer_motion8.motion.div,
    {
      whileTap: { scale: hasHighlights ? 0.985 : 1 },
      whileHover: { y: hasHighlights ? -2 : 0 },
      children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
        ButtonBase,
        {
          variant: "secondary",
          onClick: () => hasHighlights && setShowOnlyHighlighted((v) => !v),
          "aria-pressed": showOnlyHighlighted,
          "aria-label": showOnlyHighlighted ? "Exibir todos" : "Mostrar somente destacados",
          title: showOnlyHighlighted ? "Exibir todos" : "Mostrar somente destacados",
          disabled: !hasHighlights,
          className: cn(
            "flex items-center gap-2 text-sm px-3 py-1 rounded-md transition-shadow",
            !hasHighlights ? "opacity-60 cursor-not-allowed" : showOnlyHighlighted ? "bg-primary/10 text-primary shadow-sm border" : "bg-transparent text-muted-foreground border border-transparent hover:bg-muted/5"
          ),
          children: showOnlyHighlighted ? /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(import_jsx_runtime55.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(import_react36.EyeSlash, { size: 16, weight: "regular" }) }) : /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(import_jsx_runtime55.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(import_react36.Eye, { size: 16, weight: "bold" }) })
        }
      )
    }
  ) });
};
var ShowOnly_default = ShowOnly;

// src/components/rechart/Highlights.tsx
var import_framer_motion9 = require("framer-motion");
var import_jsx_runtime56 = require("react/jsx-runtime");
var Highlights = ({
  allKeys,
  mapperConfig,
  finalColors,
  highlightedSeries,
  toggleHighlight,
  containerWidth
}) => {
  const count = allKeys.length || 1;
  const available = containerWidth && containerWidth > 0 ? containerWidth : 600;
  const perPill = Math.floor(available / count);
  const showFullLabel = perPill >= 96;
  const showShortLabel = perPill >= 64;
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.03 } }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
    import_framer_motion9.motion.div,
    {
      className: "flex-1 flex items-center gap-2 flex-wrap",
      initial: "hidden",
      animate: "visible",
      variants: containerVariants,
      children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(import_framer_motion9.AnimatePresence, { initial: false, mode: "popLayout", children: allKeys.map((k) => {
        const isHighlighted = highlightedSeries.has(k);
        const label = mapperConfig[k]?.label ?? k;
        const color = finalColors[k];
        const pillClasses = cn(
          "inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm border transition-all select-none",
          isHighlighted ? "bg-card/95 border-2 text-foreground shadow-[0_6px_18px_rgba(0,0,0,0.12)]" : "bg-muted/10 border-border text-muted-foreground"
        );
        return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
          import_framer_motion9.motion.div,
          {
            layout: true,
            initial: "hidden",
            animate: "visible",
            exit: "exit",
            children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              ButtonBase,
              {
                asChild: true,
                variant: "ghost",
                onClick: () => toggleHighlight(k),
                title: isHighlighted ? `Desativar ${label}` : `Ativar ${label}`,
                className: pillClasses,
                style: { minWidth: showFullLabel ? void 0 : 36 },
                "aria-pressed": isHighlighted,
                children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
                  import_framer_motion9.motion.button,
                  {
                    whileHover: { scale: isHighlighted ? 1.04 : 1.03 },
                    whileTap: { scale: 0.96 },
                    animate: isHighlighted ? { scale: 1.02 } : { scale: 1 },
                    className: "flex items-center gap-2",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                        import_framer_motion9.motion.span,
                        {
                          className: cn("w-3 h-3 rounded-sm flex-shrink-0 border"),
                          style: {
                            backgroundColor: color,
                            borderColor: isHighlighted ? color : "transparent",
                            boxShadow: isHighlighted ? `0 6px 20px ${color}33` : void 0
                          },
                          layout: true,
                          initial: { scale: 0.8, opacity: 0.9 },
                          animate: { scale: 1, opacity: 1 },
                          transition: { type: "spring", stiffness: 400, damping: 30 }
                        }
                      ),
                      showFullLabel ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(import_framer_motion9.motion.span, { className: "truncate max-w-[10rem]", layout: true, children: label }) : showShortLabel ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                        import_framer_motion9.motion.span,
                        {
                          className: "truncate max-w-[6rem] text-xs",
                          layout: true,
                          children: label
                        }
                      ) : null,
                      isHighlighted ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                        import_framer_motion9.motion.span,
                        {
                          initial: { opacity: 0, scale: 0.6 },
                          animate: { opacity: 1, scale: 1 },
                          transition: {
                            type: "spring",
                            stiffness: 450,
                            damping: 28
                          },
                          className: "ml-1 text-xs text-foreground",
                          children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                            "svg",
                            {
                              width: "12",
                              height: "12",
                              viewBox: "0 0 24 24",
                              fill: "none",
                              xmlns: "http://www.w3.org/2000/svg",
                              "aria-hidden": true,
                              children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                                "path",
                                {
                                  d: "M20 6L9 17l-5-5",
                                  stroke: "currentColor",
                                  strokeWidth: "2",
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round"
                                }
                              )
                            }
                          )
                        }
                      ) : null
                    ]
                  }
                )
              }
            )
          },
          `pill-${k}`
        );
      }) })
    }
  );
};
var Highlights_default = Highlights;

// src/components/rechart/Chart.tsx
var import_jsx_runtime57 = require("react/jsx-runtime");
var DEFAULT_COLORS4 = ["#55af7d", "#8e68ff", "#2273e1"];
var Chart = ({
  data,
  series,
  className,
  height = 350,
  width = 900,
  colors: colors2 = DEFAULT_COLORS4,
  gridColor,
  showGrid = true,
  showTooltip = true,
  showLegend = true,
  title,
  titlePosition = "left",
  showLabels = false,
  xAxis,
  labelMap,
  enableHighlights = false,
  enableShowOnly = false,
  enablePeriodsDropdown = false,
  enableDraggableTooltips = false
}) => {
  const smartConfig = (0, import_react37.useMemo)(() => {
    const xAxisConfig2 = typeof xAxis === "string" ? { dataKey: xAxis, label: formatFieldName2(xAxis), autoLabel: true } : xAxis;
    const detectedFields = detectDataFields2(data, xAxisConfig2.dataKey);
    const mapperConfig2 = detectedFields.reduce((acc, field) => {
      acc[field] = {
        label: labelMap?.[field] ?? formatFieldName2(field),
        type: "number",
        visible: true
      };
      return acc;
    }, {});
    return { xAxisConfig: xAxisConfig2, mapperConfig: mapperConfig2 };
  }, [data, xAxis, labelMap]);
  const { xAxisConfig, mapperConfig } = smartConfig;
  const [activeTooltips, setActiveTooltips] = (0, import_react37.useState)([]);
  const [highlightedSeries, setHighlightedSeries] = (0, import_react37.useState)(
    /* @__PURE__ */ new Set()
  );
  const [showOnlyHighlighted, setShowOnlyHighlighted] = (0, import_react37.useState)(false);
  (0, import_react37.useEffect)(() => {
    if (highlightedSeries.size === 0 && showOnlyHighlighted) {
      setShowOnlyHighlighted(false);
    }
  }, [highlightedSeries, showOnlyHighlighted]);
  const processedData = data.map((item) => ({
    ...item,
    name: String(item[xAxisConfig.dataKey] || "N/A")
  }));
  const wrapperRef = (0, import_react37.useRef)(null);
  const [measuredWidth, setMeasuredWidth] = (0, import_react37.useState)(null);
  (0, import_react37.useLayoutEffect)(() => {
    const el = wrapperRef.current;
    if (!el) return;
    const ro = new ResizeObserver((entries) => {
      const r = entries[0];
      if (r && typeof r.contentRect.width === "number") {
        setMeasuredWidth(Math.round(r.contentRect.width));
      }
    });
    ro.observe(el);
    setMeasuredWidth(Math.round(el.getBoundingClientRect().width));
    return () => ro.disconnect();
  }, []);
  const seriesOrder = [];
  if (series) {
    if (series.bar)
      series.bar.forEach((k) => seriesOrder.push({ type: "bar", key: k }));
    if (series.line)
      series.line.forEach((k) => seriesOrder.push({ type: "line", key: k }));
    if (series.area)
      series.area.forEach((k) => seriesOrder.push({ type: "area", key: k }));
  } else {
    Object.keys(mapperConfig).forEach(
      (k) => seriesOrder.push({ type: "bar", key: k })
    );
  }
  const allKeys = seriesOrder.map((s) => s.key).filter(Boolean);
  const generateColors = (dataKeys) => {
    const colorMap = {};
    const allColors = generateAdditionalColors3(colors2, dataKeys.length);
    dataKeys.forEach((key, index) => {
      colorMap[key] = mapperConfig[key] && mapperConfig[key].color || allColors[index] || colors2[index % colors2.length];
    });
    return colorMap;
  };
  const finalColors = generateColors(allKeys);
  const adaptDataForTooltip = (0, import_react37.useCallback)(
    (universalData) => ({
      ...universalData,
      name: String(universalData[xAxisConfig.dataKey] || "N/A")
    }),
    [xAxisConfig.dataKey]
  );
  const activePeriods = (0, import_react37.useMemo)(
    () => activeTooltips.map((t) => adaptDataForTooltip(t.data).name),
    [activeTooltips, adaptDataForTooltip]
  );
  const openTooltipForPeriod = (periodName) => {
    if (!enableDraggableTooltips) return;
    const row = processedData.find((r) => String(r.name) === periodName);
    if (!row) return;
    const tooltipId = `${periodName}`;
    const existingIndex = activeTooltips.findIndex((t) => t.id === tooltipId);
    if (existingIndex !== -1) {
      setActiveTooltips((prev) => prev.filter((t) => t.id !== tooltipId));
      return;
    }
    const offsetIndex = activeTooltips.length;
    const availableWidth = typeof width === "number" ? width : measuredWidth ? Math.max(0, measuredWidth - 32) : computedWidth;
    const newTooltip = {
      id: tooltipId,
      data: row,
      position: {
        top: 48 + offsetIndex * 28,
        left: Math.max(120, availableWidth - 260 - offsetIndex * 28)
      }
    };
    setActiveTooltips((prev) => [...prev, newTooltip]);
  };
  (0, import_react37.useEffect)(() => {
    window.dispatchEvent(new Event("recountTooltips"));
  }, [activeTooltips.length]);
  const toggleHighlight = (0, import_react37.useCallback)((key) => {
    setHighlightedSeries((prev) => {
      const next = new Set(prev);
      if (next.has(key)) next.delete(key);
      else next.add(key);
      return next;
    });
  }, []);
  const niceCeil = (value) => {
    if (!isFinite(value) || value <= 0) return 1;
    const pow = Math.pow(10, Math.floor(Math.log10(value)));
    const normalized = value / pow;
    const multipliers = [
      1,
      1.25,
      1.5,
      2,
      2.5,
      3,
      4,
      5,
      7.5,
      10,
      15,
      20,
      25,
      50,
      100
    ];
    for (const m of multipliers) {
      if (m >= normalized) return Math.ceil(m * pow);
    }
    return Math.ceil(100 * pow);
  };
  const maxDataValue = (0, import_react37.useMemo)(() => {
    let max = 0;
    const numericKeys = allKeys;
    for (const row of processedData) {
      const r = row;
      for (const key of numericKeys) {
        const v = r[key];
        if (typeof v === "number" && Number.isFinite(v) && v > max) max = v;
      }
    }
    return max;
  }, [processedData, allKeys]);
  const niceMax = (0, import_react37.useMemo)(() => {
    let padding = 0.08;
    if (maxDataValue > 1e6) padding = 0.05;
    if (maxDataValue > 1e7) padding = 0.03;
    if (maxDataValue === 0) padding = 0.12;
    const padded = maxDataValue * (1 + padding);
    return niceCeil(padded);
  }, [maxDataValue]);
  const computedWidth = (0, import_react37.useMemo)(() => {
    if (typeof width === "number") return width;
    const points = processedData.length || 1;
    const barCount = series?.bar?.length ?? 0;
    const lineCount = series?.line?.length ?? 0;
    const areaCount = series?.area?.length ?? 0;
    const basePerPoint = 84;
    const perBarExtra = Math.max(0, barCount - 1) * 10;
    const perOtherExtra = (lineCount + areaCount) * 6;
    let sizeFactor = 1;
    if (niceMax > 1e5) sizeFactor = 1.18;
    if (niceMax > 1e6) sizeFactor = 1.36;
    if (niceMax > 1e7) sizeFactor = 1.6;
    const perPoint = Math.round(
      (basePerPoint + perBarExtra + perOtherExtra) * sizeFactor
    );
    const marginExtra = 140;
    const raw = Math.round(points * perPoint + marginExtra);
    const min = 380;
    const max = 2200;
    return Math.max(min, Math.min(max, raw));
  }, [
    width,
    processedData.length,
    series?.bar?.length,
    series?.line?.length,
    series?.area?.length,
    niceMax
  ]);
  const handleBarClick = (data2, index, event) => {
    if (!enableDraggableTooltips) return;
    event.stopPropagation();
    const xAxisValue = data2[xAxisConfig.dataKey] || "N/A";
    const tooltipId = `${xAxisValue}`;
    const rect = event.target.getBoundingClientRect();
    const existingIndex = activeTooltips.findIndex((t) => t.id === tooltipId);
    if (existingIndex !== -1) {
      setActiveTooltips((prev) => prev.filter((t) => t.id !== tooltipId));
    } else {
      const newTooltip = {
        id: tooltipId,
        data: data2,
        position: { top: rect.top - 10, left: rect.right + 10 }
      };
      setActiveTooltips((prev) => [...prev, newTooltip]);
    }
  };
  const handleChartClick = (e) => {
    if (!enableDraggableTooltips) return;
    const ev = e;
    if (ev && ev.activePayload && ev.activePayload.length > 0) {
      const clickedData = ev.activePayload[0].payload;
      const xAxisValue = clickedData[xAxisConfig.dataKey] || clickedData.name || "N/A";
      const tooltipId = `${xAxisValue}`;
      const existingIndex = activeTooltips.findIndex((t) => t.id === tooltipId);
      if (existingIndex !== -1) {
        setActiveTooltips((prev) => prev.filter((t) => t.id !== tooltipId));
      } else {
        const newTooltip = {
          id: tooltipId,
          data: clickedData,
          position: {
            top: (ev?.chartY || 100) - 10,
            left: (ev?.chartX || 100) - 100
          }
        };
        setActiveTooltips((prev) => [...prev, newTooltip]);
      }
      return;
    }
    setActiveTooltips([]);
  };
  const handleSeriesClick = (...args) => {
    if (args.length >= 3) {
      const [data2, index, event] = args;
      handleBarClick(data2, index, event);
      return;
    }
    handleChartClick(args[0]);
  };
  const onTooltipPositionChange = (id, position) => {
    setActiveTooltips(
      (prev) => prev.map((t) => t.id === id ? { ...t, position } : t)
    );
  };
  const CustomTooltip = ({
    active,
    payload,
    label
  }) => {
    if (!active || !payload) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "bg-card border border-border rounded-lg p-3 shadow-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "font-medium text-foreground mb-2", children: label }),
      payload.map((entry, index) => /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center gap-2 text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "div",
          {
            className: "w-3 h-3 rounded-sm",
            style: {
              backgroundColor: finalColors[entry.dataKey] || entry.color
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("span", { className: "text-muted-foreground", children: [
          entry.name,
          ":"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "text-foreground font-medium", children: entry.value?.toLocaleString("pt-BR") })
      ] }, index)),
      /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "text-xs text-muted-foreground mt-1", children: "Clique para fixar este tooltip" })
    ] });
  };
  const getTitleClassName = () => {
    return "text-xl font-semibold text-foreground mb-3";
  };
  const finalEnableHighlights = enableHighlights;
  const finalEnableShowOnly = enableShowOnly;
  const finalEnablePeriodsDropdown = enablePeriodsDropdown && enableDraggableTooltips;
  const chartRightMargin = 30;
  const containerPaddingLeft = 16;
  const chartLeftMargin = 20;
  const measuredInner = measuredWidth ? Math.max(0, measuredWidth - 32) : void 0;
  const effectiveChartWidth = typeof width === "number" ? width : measuredInner ?? computedWidth;
  const chartInnerWidth = effectiveChartWidth - chartLeftMargin - chartRightMargin;
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
    "div",
    {
      ref: wrapperRef,
      style: {
        width: "100%",
        overflowX: typeof width === "number" ? "auto" : "visible",
        overflowY: "hidden"
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
        "div",
        {
          className: cn("rounded-lg bg-card p-4 relative", className),
          style: typeof width === "number" ? { width: `${width + 32}px` } : { width: "100%", maxWidth: "100%" },
          children: [
            title && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              "div",
              {
                style: {
                  paddingLeft: `${containerPaddingLeft + chartLeftMargin}px`,
                  width: "100%",
                  maxWidth: `${chartInnerWidth}px`,
                  display: "flex",
                  justifyContent: titlePosition === "center" ? "center" : titlePosition === "right" ? "flex-end" : "flex-start",
                  alignItems: "center"
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h3", { className: getTitleClassName(), children: title })
              }
            ),
            allKeys.length > 0 && (finalEnableHighlights || finalEnableShowOnly) && /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
              "div",
              {
                className: "flex items-center w-full",
                style: {
                  paddingLeft: `${containerPaddingLeft + chartLeftMargin}px`,
                  width: "98%",
                  display: "flex",
                  alignItems: "center",
                  gap: "0.5rem"
                },
                children: [
                  finalEnableHighlights && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                    Highlights_default,
                    {
                      allKeys,
                      mapperConfig,
                      finalColors,
                      highlightedSeries,
                      toggleHighlight,
                      containerWidth: chartInnerWidth
                    }
                  ),
                  finalEnableShowOnly && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                    ShowOnly_default,
                    {
                      showOnlyHighlighted,
                      setShowOnlyHighlighted,
                      highlightedSeriesSize: highlightedSeries.size,
                      clearHighlights: () => setHighlightedSeries(/* @__PURE__ */ new Set())
                    }
                  ),
                  finalEnablePeriodsDropdown && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                    "div",
                    {
                      style: {
                        marginLeft: "auto",
                        display: "flex",
                        alignItems: "center"
                      },
                      children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                        PeriodsDropdown_default,
                        {
                          processedData,
                          onOpenPeriod: openTooltipForPeriod,
                          rightOffset: chartRightMargin,
                          activePeriods
                        }
                      )
                    }
                  )
                ]
              }
            ),
            !(allKeys.length > 0 && (finalEnableHighlights || finalEnableShowOnly)) && finalEnablePeriodsDropdown && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              "div",
              {
                style: {
                  paddingLeft: `${containerPaddingLeft + chartLeftMargin}px`,
                  paddingRight: `${chartRightMargin}px`,
                  width: "100%",
                  maxWidth: `${chartInnerWidth}px`,
                  display: "flex",
                  justifyContent: "flex-end"
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                  PeriodsDropdown_default,
                  {
                    processedData,
                    onOpenPeriod: openTooltipForPeriod,
                    rightOffset: chartRightMargin
                  }
                )
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(import_recharts4.ResponsiveContainer, { width: "100%", height, children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
              import_recharts4.ComposedChart,
              {
                data: processedData,
                height,
                margin: {
                  top: showLabels ? 48 : 20,
                  right: 30,
                  left: 20,
                  bottom: 5
                },
                onClick: handleChartClick,
                children: [
                  showGrid && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                    import_recharts4.CartesianGrid,
                    {
                      strokeDasharray: "3 3",
                      stroke: gridColor || "hsl(var(--muted-foreground))",
                      opacity: 0.5
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                    import_recharts4.XAxis,
                    {
                      dataKey: xAxisConfig.dataKey,
                      stroke: "hsl(var(--muted-foreground))",
                      fontSize: 12,
                      tickLine: false,
                      axisLine: false,
                      tickFormatter: xAxisConfig.formatter
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                    import_recharts4.YAxis,
                    {
                      stroke: "hsl(var(--muted-foreground))",
                      fontSize: 12,
                      tickLine: false,
                      axisLine: false,
                      tickFormatter: (value) => Number(value).toLocaleString("pt-BR"),
                      domain: [0, niceMax],
                      tickCount: 6
                    }
                  ),
                  showTooltip && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                    import_recharts4.Tooltip,
                    {
                      content: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(CustomTooltip, {}),
                      cursor: { fill: "hsl(var(--muted))", opacity: 0.1 }
                    }
                  ),
                  showLegend && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                    import_recharts4.Legend,
                    {
                      wrapperStyle: {
                        color: "hsl(var(--foreground))",
                        fontSize: "14px"
                      }
                    }
                  ),
                  seriesOrder.map((s) => {
                    const key = s.key;
                    if (showOnlyHighlighted && !highlightedSeries.has(key))
                      return null;
                    const label = mapperConfig[key]?.label ?? labelMap?.[key] ?? formatFieldName2(key);
                    const color = finalColors[key];
                    if (s.type === "bar") {
                      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                        import_recharts4.Bar,
                        {
                          dataKey: key,
                          name: label,
                          fill: color,
                          radius: [4, 4, 0, 0],
                          onClick: handleBarClick,
                          style: {
                            cursor: "pointer",
                            opacity: highlightedSeries.size > 0 ? highlightedSeries.has(key) ? 1 : 0.25 : 1
                          },
                          activeBar: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                            import_recharts4.Rectangle,
                            {
                              fill: color,
                              stroke: color,
                              strokeWidth: 2,
                              opacity: 0.8
                            }
                          ),
                          children: showLabels && highlightedSeries.size === 0 || highlightedSeries.has(key) ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                            import_recharts4.LabelList,
                            {
                              dataKey: key,
                              position: "top",
                              content: pillLabelRenderer_default(color, "filled"),
                              offset: 8
                            }
                          ) : null
                        },
                        `bar-${key}`
                      );
                    }
                    if (s.type === "line") {
                      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                        import_recharts4.Line,
                        {
                          dataKey: key,
                          name: label,
                          stroke: color,
                          strokeWidth: 2,
                          dot: { r: 3 },
                          activeDot: { r: 6 },
                          onClick: handleSeriesClick,
                          style: {
                            cursor: "pointer",
                            pointerEvents: "all",
                            opacity: highlightedSeries.size > 0 ? highlightedSeries.has(key) ? 1 : 0.25 : 1
                          },
                          children: showLabels && highlightedSeries.size === 0 || highlightedSeries.has(key) ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                            import_recharts4.LabelList,
                            {
                              dataKey: key,
                              position: "top",
                              content: pillLabelRenderer_default(color, "filled"),
                              offset: 14
                            }
                          ) : null
                        },
                        `line-${key}`
                      );
                    }
                    if (s.type === "area") {
                      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                        import_recharts4.Area,
                        {
                          dataKey: key,
                          name: label,
                          stroke: color,
                          fill: color,
                          fillOpacity: 0.15,
                          onClick: handleSeriesClick,
                          style: {
                            cursor: "pointer",
                            pointerEvents: "all",
                            opacity: highlightedSeries.size > 0 ? highlightedSeries.has(key) ? 1 : 0.25 : 1
                          },
                          children: showLabels && highlightedSeries.size === 0 || highlightedSeries.has(key) ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                            import_recharts4.LabelList,
                            {
                              dataKey: key,
                              position: "top",
                              content: pillLabelRenderer_default(color, "soft"),
                              offset: 12
                            }
                          ) : null
                        },
                        `area-${key}`
                      );
                    }
                    return null;
                  })
                ]
              }
            ) }),
            enableDraggableTooltips && activeTooltips.map((tooltip) => /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              DraggableTooltip_default,
              {
                id: tooltip.id,
                data: adaptDataForTooltip(tooltip.data),
                position: tooltip.position,
                title,
                dataKeys: allKeys,
                finalColors,
                onClose: (id) => setActiveTooltips((prev) => prev.filter((t) => t.id !== id)),
                onPositionChange: onTooltipPositionChange,
                periodLabel: "Per\xEDodo Selecionado",
                dataLabel: "Dados do Per\xEDodo",
                globalTooltipCount: activeTooltips.length,
                onCloseAll: () => window.dispatchEvent(new Event("closeAllTooltips")),
                closeAllButtonPosition: "top-center",
                closeAllButtonVariant: "floating"
              },
              tooltip.id
            )),
            enableDraggableTooltips && activeTooltips.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              CloseAllButton_default,
              {
                count: activeTooltips.length,
                onCloseAll: () => window.dispatchEvent(new Event("closeAllTooltips")),
                position: "top-center",
                variant: "floating"
              }
            )
          ]
        }
      )
    }
  );
};
var Chart_default = Chart;

// src/hooks/use-drag.tsx
var import_react38 = require("react");
var useDrag = (options = {}) => {
  const [isDragging, setIsDragging] = (0, import_react38.useState)(null);
  const [positions, setPositions] = (0, import_react38.useState)({});
  const dragStartPos = (0, import_react38.useRef)(null);
  const dragId = (0, import_react38.useRef)(null);
  const handleMouseDown = (0, import_react38.useCallback)((id, e) => {
    e.preventDefault();
    const currentPosition = positions[id] || { top: 0, left: 0 };
    dragStartPos.current = {
      x: e.clientX,
      y: e.clientY,
      elementX: currentPosition.left,
      elementY: currentPosition.top
    };
    dragId.current = id;
    setIsDragging(id);
    options.onDragStart?.(id);
  }, [positions, options]);
  const handleMouseMove = (0, import_react38.useCallback)((e) => {
    if (!isDragging || !dragStartPos.current || !dragId.current) return;
    const deltaX = e.clientX - dragStartPos.current.x;
    const deltaY = e.clientY - dragStartPos.current.y;
    const newPosition = {
      left: dragStartPos.current.elementX + deltaX,
      top: dragStartPos.current.elementY + deltaY
    };
    newPosition.left = Math.max(0, Math.min(window.innerWidth - 300, newPosition.left));
    newPosition.top = Math.max(0, Math.min(window.innerHeight - 200, newPosition.top));
    setPositions((prev) => ({
      ...prev,
      [dragId.current]: newPosition
    }));
    options.onDrag?.(dragId.current, newPosition);
  }, [isDragging, options]);
  const handleMouseUp = (0, import_react38.useCallback)(() => {
    if (dragId.current) {
      options.onDragEnd?.(dragId.current);
    }
    setIsDragging(null);
    dragStartPos.current = null;
    dragId.current = null;
  }, [options]);
  (0, import_react38.useEffect)(() => {
    if (isDragging) {
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);
      document.body.style.userSelect = "none";
      return () => {
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
        document.body.style.userSelect = "";
      };
    }
  }, [isDragging, handleMouseMove, handleMouseUp]);
  const setPosition = (0, import_react38.useCallback)((id, position) => {
    setPositions((prev) => ({
      ...prev,
      [id]: position
    }));
  }, []);
  const getPosition = (0, import_react38.useCallback)((id) => {
    return positions[id] || { top: 0, left: 0 };
  }, [positions]);
  const isElementDragging = (0, import_react38.useCallback)((id) => {
    return isDragging === id;
  }, [isDragging]);
  return {
    handleMouseDown,
    getPosition,
    setPosition,
    isElementDragging,
    isDragging: isDragging !== null
  };
};
